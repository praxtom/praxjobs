<section class="relative py-16 sm:py-24 lg:py-32 bg-white dark:bg-gray-950">
  <div
    aria-hidden="true"
    class="absolute inset-0 grid grid-cols-2 -space-x-52 opacity-0 dark:opacity-0 transition-opacity duration-300 ease-in-out"
  >
    <div
      class="blur-[106px] h-56 bg-gradient-to-br from-primary to-purple-400 dark:from-blue-700 dark:to-indigo-600 opacity-40 dark:opacity-20"
    >
    </div>
    <div
      class="blur-[106px] h-32 bg-gradient-to-r from-cyan-400 to-sky-300 dark:to-indigo-600 dark:from-emerald-500 opacity-40 dark:opacity-20"
    >
    </div>
  </div>
  <div class="relative w-full">
    <div class="container mx-auto px-3 md:px-6 lg:px-8 max-w-6xl">
      <div class="w-full mx-auto">
        <form
          id="linkedinOptimiserForm"
          class="w-full space-y-6 sm:space-y-8 bg-white dark:bg-gray-900/80 backdrop-blur-md rounded-3xl p-4 sm:p-8
                    shadow-xl border-gray-100 border dark:border-gray-700/50
                    transition-all duration-300 ease-in-out hover:shadow-2xl"
        >
          <div class="space-y-4 sm:space-y-5">
            <!-- Success State -->
            <div
              id="linkedinFileAddedUI"
              class="hidden w-full p-6 border-2 border-gray-300 dark:border-gray-700/70 rounded-xl bg-white/10 dark:bg-gray-800/20 min-h-[100px] flex flex-col items-center justify-center"
            >
              <div class="flex items-center justify-center mb-3">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-10 w-10 text-green-500"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <p
                id="linkedinFileName"
                class="text-center text-lg text-gray-900 dark:text-white font-medium"
              >
                LinkedIn PDF added successfully
              </p>
              <button
                id="changeLinkedinSource"
                class="mt-4 px-4 py-2 bg-black text-white dark:bg-white dark:text-black rounded-full text-sm hover:bg-gray-800 dark:hover:bg-gray-200 transition-all duration-200"
              >
                Upload Another
              </button>
            </div>

            <div id="linkedinOptionsSelector">
              <label
                for="linkedin-upload"
                class="block mb-2 text-left text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                LinkedIn Profile PDF: <span class="text-red-600">*</span>
                <span class="text-xs text-gray-500 dark:text-gray-400"
                  >(You can download your LinkedIn profile as a PDF by going to
                  your profile, clicking on 'Resources', and selecting 'Save to
                  PDF.')</span
                >
              </label>
              <button
                type="button"
                id="linkedinFileUploadButton"
                class="relative flex flex-col items-center justify-center p-2 border-2 border-gray-200 dark:border-gray-700 rounded-xl bg-white/10 dark:bg-gray-800/20 hover:bg-gray-50 dark:hover:bg-gray-700/40 transition-all duration-300 group w-full"
              >
                <div
                  class="flex flex-col items-center justify-center space-y-2"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-7 w-7 text-primary group-hover:text-primary-dark transition-colors duration-300"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                    ></path>
                  </svg>
                  <span class="font-medium text-gray-900 dark:text-white"
                    >Upload File</span
                  >
                  <span class="text-xs text-gray-500 dark:text-gray-400 mt-1"
                    >PDF only</span
                  >
                </div>
              </button>
              <input
                type="file"
                accept="application/pdf"
                id="linkedin-upload"
                required
                style="display: none;"
              />
            </div>
          </div>

          <div class="">
            <div class="mb-2 flex justify-between items-center">
              <label
                class="block text-left text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Resume <span class="text-red-600">*</span>
              </label>
            </div>

            <input type="file" id="resumeFileInput" style="display: none;" />

            <div
              id="resumeOptionsSelector"
              class="grid grid-cols-3 md:grid-cols-3 xs:gap-2 sm:gap-4 md:gap-4 lg:gap-4 gap-2"
            >
              <button
                type="button"
                id="resumeFileUploadButton"
                class="relative flex flex-col items-center justify-center p-2 border-2 border-gray-200 dark:border-gray-700 rounded-xl bg-white/10 dark:bg-gray-800/20 hover:bg-gray-50 dark:hover:bg-gray-700/40 transition-all duration-300 group"
              >
                <div
                  class="flex flex-col items-center justify-center space-y-2"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-7 w-7 text-primary group-hover:text-primary-dark transition-colors duration-300"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                    ></path>
                  </svg>
                  <span class="font-medium text-gray-900 dark:text-white"
                    >Upload File</span
                  >
                  <span class="text-xs text-gray-500 dark:text-gray-400 mt-1"
                    >PDF, DOCX, TXT</span
                  >
                </div>
              </button>

              <button
                type="button"
                id="importResumeButton"
                class="relative flex flex-col items-center justify-center p-2 border-2 border-gray-200 dark:border-gray-700 rounded-xl bg-white/10 dark:bg-gray-800/20 hover:bg-gray-50 dark:hover:bg-gray-700/40 transition-all duration-300 group"
              >
                <div
                  class="flex flex-col items-center justify-center space-y-2"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-7 w-7 text-primary group-hover:text-primary-dark transition-colors duration-300"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4"
                    ></path>
                  </svg>
                  <span class="font-medium text-gray-900 dark:text-white"
                    >Resume Manager</span
                  >
                  <span class="text-xs text-gray-500 dark:text-gray-400 mt-1"
                    >Select saved resume</span
                  >
                </div>
              </button>

              <button
                type="button"
                id="enterManuallyButton"
                class="relative flex flex-col items-center justify-center p-2 border-2 border-gray-200 dark:border-gray-700 rounded-xl bg-white/10 dark:bg-gray-800/20 hover:bg-gray-50 dark:hover:bg-gray-700/40 transition-all duration-300 group"
              >
                <div
                  class="flex flex-col items-center justify-center space-y-2"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-7 w-7 text-primary group-hover:text-primary-dark transition-colors duration-300"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
                    ></path>
                  </svg>
                  <span class="font-medium text-gray-900 dark:text-white"
                    >Enter Manually</span
                  >
                  <span class="text-xs text-gray-500 dark:text-gray-400 mt-1"
                    >Paste or type resume</span
                  >
                </div>
              </button>
            </div>

            <!-- File Added UI -->
            <div
              id="resumeFileAddedUI"
              class="hidden w-full p-6 border-2 border-gray-300 dark:border-gray-700/70 rounded-xl bg-white/10 dark:bg-gray-800/20 min-h-[100px] flex flex-col items-center justify-center"
            >
              <div class="flex items-center justify-center mb-3">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-10 w-10 text-green-500"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <p
                id="resumeFileName"
                class="text-center text-lg text-gray-900 dark:text-white font-medium"
              >
                Resume added successfully
              </p>
              <button
                id="changeResumeSource"
                class="mt-4 px-4 py-2 bg-black text-white dark:bg-white dark:text-black rounded-full text-sm hover:bg-gray-800 dark:hover:bg-gray-200 transition-all duration-200"
              >
                Upload Another
              </button>
            </div>

            <!-- Manual Entry UI -->
            <div id="manualEntryContainer" class="hidden w-full">
              <textarea
                id="resumeContent"
                name="resumeContent"
                rows="10"
                placeholder="Paste or type your resume here..."
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-700/70 bg-white dark:bg-gray-800/30 rounded-xl
                                dark:text-gray-100 focus:border-primary dark:focus:border-primary focus:ring-1 focus:ring-primary
                                outline-none text-md transition-colors duration-200 resize-y"
              ></textarea>
              <div class="flex justify-end mt-2">
                <button
                  id="cancelManualEntry"
                  class="text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors"
                >
                  Back to options
                </button>
              </div>
            </div>
          </div>

          <div
            class="flex flex-col sm:flex-row justify-center items-center space-y-2.5 sm:space-y-0 sm:space-x-4 pt-4"
          >
            <button
              type="submit"
              id="optimizeProfileBtn"
              class="w-full sm:w-auto inline-flex h-11 sm:h-12 items-center justify-center px-6 sm:px-8 py-2 sm:py-3
                                text-sm sm:text-base font-semibold
                                text-white bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700
                                dark:text-white dark:bg-gradient-to-r dark:from-blue-500 dark:to-indigo-500 dark:hover:from-blue-600 dark:hover:to-indigo-600
                                rounded-full
                                transition-all duration-300 ease-in-out
                                transform hover:scale-[1.03] active:scale-95
                                focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900
                                shadow-lg hover:shadow-xl"
            >
              <svg id="optimizeIcon" class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path></svg>
              <svg id="optimizeSpinner" class="animate-spin -ml-1 mr-3 h-5 w-5 text-white hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <span id="optimizeButtonText">Optimize Profile</span>
            </button>
            <button
              type="button"
              id="clearForm"
              class="w-full sm:w-auto inline-flex h-11 sm:h-12 items-center justify-center px-6 sm:px-8 py-2 sm:py-3
                                text-sm sm:text-base font-semibold
                                text-gray-700 bg-gray-100 hover:bg-gray-200
                                dark:text-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600
                                border border-transparent
                                rounded-full
                                transition-all duration-300 ease-in-out
                                transform hover:scale-[1.03] active:scale-95
                                focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 dark:focus:ring-offset-gray-900
                                shadow-md hover:shadow-lg"
            >
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
              Clear
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</section>

<!-- Results Container -->
<div
  id="linkedinResults"
  class="hidden mt-12 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"
>
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    <!-- Left Column (Scores & Completeness) -->
    <div class="lg:col-span-1 space-y-8">
      <!-- Overall Score Card -->
      <div
        class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 p-6 text-center"
      >
        <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
          Overall Profile Score
        </h3>
        <div class="relative w-36 h-36 mx-auto mb-4">
          <svg class="w-full h-full" viewBox="0 0 100 100">
            <!-- Background circle -->
            <circle
              class="text-gray-200 dark:text-gray-700 stroke-current"
              stroke-width="10"
              cx="50"
              cy="50"
              r="40"
              fill="transparent"></circle>
            <!-- Progress circle -->
            <circle
              id="overallScoreCircle"
              class="text-primary-500 progress-ring__circle stroke-current"
              stroke-width="10"
              stroke-linecap="round"
              cx="50"
              cy="50"
              r="40"
              fill="transparent"
              stroke-dasharray="251.2"
              stroke-dashoffset="251.2"
              transform="rotate(-90 50 50)"></circle>
            <!-- Score text -->
            <text
              id="overallScoreText"
              x="50"
              y="50"
              font-family="Verdana"
              font-size="20"
              text-anchor="middle"
              alignment-baseline="middle"
              class="fill-current text-gray-900 dark:text-white font-bold"
              >0</text
            >
          </svg>
        </div>
        <p class="text-sm text-gray-600 dark:text-gray-400">
          How well your profile is optimized based on best practices.
        </p>
      </div>

      <!-- Profile Completeness Card -->
      <div
        class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 p-6"
      >
        <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
          Profile Completeness
        </h3>
        <div
          class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5 mb-2"
        >
          <div
            id="completenessBar"
            class="bg-green-500 h-2.5 rounded-full"
            style="width: 0%"
          >
          </div>
        </div>
        <p
          id="completenessText"
          class="text-right text-sm font-medium text-gray-700 dark:text-gray-300 mb-4"
        >
          0% Complete
        </p>
        <div class="space-y-3">
          <div>
            <h4
              class="text-sm font-semibold text-gray-800 dark:text-gray-200 mb-1 flex items-center"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-4 w-4 mr-1.5 text-red-500"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fill-rule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v4a1 1 0 102 0V7zm-1 8a1 1 0 100-2 1 1 0 000 2z"
                  clip-rule="evenodd"></path>
              </svg>
              Missing Sections
            </h4>
            <ul
              id="missingSections"
              class="text-xs text-gray-600 dark:text-gray-400 list-disc list-inside pl-4 space-y-0.5"
            >
              <li>No missing sections found.</li>
            </ul>
          </div>
          <div>
            <h4
              class="text-sm font-semibold text-gray-800 dark:text-gray-200 mb-1 flex items-center"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-4 w-4 mr-1.5 text-yellow-500"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fill-rule="evenodd"
                  d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.21 3.03-1.742 3.03H4.42c-1.532 0-2.493-1.697-1.743-3.03l5.58-9.92zM10 13a1 1 0 100-2 1 1 0 000 2zm-1-4a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1z"
                  clip-rule="evenodd"></path>
              </svg>
              Incomplete Sections
            </h4>
            <ul
              id="incompleteSections"
              class="text-xs text-gray-600 dark:text-gray-400 list-disc list-inside pl-4 space-y-0.5"
            >
              <li>No incomplete sections found.</li>
            </ul>
          </div>
        </div>
      </div>

      <!-- ATS Optimization Card -->
      <div
        class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 p-6"
      >
        <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
          ATS Optimization
        </h3>
        <div class="flex items-center mb-4">
          <div class="relative w-16 h-16 mr-4">
            <svg class="w-full h-full" viewBox="0 0 100 100">
              <circle
                class="text-gray-200 dark:text-gray-700 stroke-current"
                stroke-width="10"
                cx="50"
                cy="50"
                r="40"
                fill="transparent"></circle>
              <circle
                id="atsScoreCircle"
                class="text-amber-500 progress-ring__circle stroke-current"
                stroke-width="10"
                stroke-linecap="round"
                cx="50"
                cy="50"
                r="40"
                fill="transparent"
                stroke-dasharray="251.2"
                stroke-dashoffset="251.2"
                transform="rotate(-90 50 50)"></circle>
              <text
                id="atsScoreText"
                x="50"
                y="50"
                font-family="Verdana"
                font-size="20"
                text-anchor="middle"
                alignment-baseline="middle"
                class="fill-current text-gray-900 dark:text-white font-bold"
                >0</text
              >
            </svg>
          </div>
          <p class="text-sm text-gray-600 dark:text-gray-400 flex-1">
            How well your profile might perform in Applicant Tracking Systems.
          </p>
        </div>
        <div>
          <h4
            class="text-sm font-semibold text-gray-800 dark:text-gray-200 mb-2 flex items-center"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-4 w-4 mr-1.5 text-blue-500"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path d="M10 12a2 2 0 100-4 2 2 0 000 4z"></path>
              <path
                fill-rule="evenodd"
                d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z"
                clip-rule="evenodd"></path>
            </svg>
            Recommendations
          </h4>
          <ul
            id="atsRecommendations"
            class="text-xs text-gray-600 dark:text-gray-400 list-disc list-inside pl-4 space-y-1"
          >
            <li>No specific ATS recommendations.</li>
          </ul>
        </div>
      </div>
    </div>

    <!-- Right Column (Detailed Analysis) -->
    <div class="lg:col-span-2 space-y-8">
      <!-- Section-by-Section Analysis Card -->
      <div
        class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 p-6"
      >
        <h3 class="text-xl font-semibold mb-5 text-gray-900 dark:text-white">
          Section Analysis
        </h3>
        <div id="sectionScores" class="space-y-5">
          <!-- Populated by JS -->
          <p class="text-sm text-gray-500 dark:text-gray-400">
            Loading section analysis...
          </p>
        </div>
      </div>

      <!-- Keyword Optimization Card -->
      <div
        class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 p-6"
      >
        <h3 class="text-xl font-semibold mb-5 text-gray-900 dark:text-white">
          Keyword Optimization
        </h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h4
              class="text-md font-semibold text-gray-800 dark:text-gray-200 mb-3 flex items-center"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5 mr-2 text-red-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                stroke-width="2"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              Missing Keywords
            </h4>
            <div id="missingKeywords" class="flex flex-wrap gap-2">
              <span
                class="px-2.5 py-1 rounded-full bg-gray-100 dark:bg-gray-700 text-xs text-gray-600 dark:text-gray-300"
                >No missing keywords identified.</span
              >
            </div>
          </div>
          <div>
            <h4
              class="text-md font-semibold text-gray-800 dark:text-gray-200 mb-3 flex items-center"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5 mr-2 text-blue-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                stroke-width="2"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                ></path>
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
              </svg>
              Placement Suggestions
            </h4>
            <div id="keywordSuggestions" class="space-y-3">
              <p class="text-xs text-gray-500 dark:text-gray-400">
                No specific placement suggestions.
              </p>
            </div>
          </div>
        </div>
      </div>

      <!-- Optimized Summary Card -->
      <div
        class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 p-6"
      >
        <h3
          class="text-xl font-semibold mb-4 text-gray-900 dark:text-white flex items-center"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5 mr-2 text-green-500"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            stroke-width="2"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          Optimized Summary Suggestion
        </h3>
        <div class="bg-gray-50 dark:bg-gray-900/50 rounded-lg p-4">
          <p
            id="optimizedSummary"
            class="text-sm text-gray-700 dark:text-gray-300 leading-relaxed"
          >
            No optimized summary generated.
          </p>
        </div>
      </div>

      <!-- Headline Suggestions Card -->
      <div
        class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 p-6"
      >
        <h3
          class="text-xl font-semibold mb-4 text-gray-900 dark:text-white flex items-center"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5 mr-2 text-purple-500"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            stroke-width="2"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"
            ></path>
          </svg>
          Headline Suggestions
        </h3>
        <div id="headlineSuggestions" class="space-y-4">
          <p class="text-sm text-gray-500 dark:text-gray-400">
            No headline suggestions available.
          </p>
        </div>
      </div>

      <!-- Experience Enhancements Card -->
      <div
        class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 p-6"
      >
        <h3
          class="text-xl font-semibold mb-4 text-gray-900 dark:text-white flex items-center"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5 mr-2 text-indigo-500"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            stroke-width="2"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
            ></path>
          </svg>
          Experience Enhancements
        </h3>
        <div id="experienceEnhancements" class="space-y-5">
          <p class="text-sm text-gray-500 dark:text-gray-400">
            No experience enhancement suggestions.
          </p>
        </div>
      </div>

      <!-- Skills Prioritization Card -->
      <div
        class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 p-6"
      >
        <h3
          class="text-xl font-semibold mb-4 text-gray-900 dark:text-white flex items-center"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5 mr-2 text-pink-500"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            stroke-width="2"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M7 20l4-16m2 16l4-16M6 9h14M4 15h14"></path>
          </svg>
          Skills Prioritization & Endorsements
        </h3>
        <div id="skillEndorsements" class="space-y-4">
          <p class="text-sm text-gray-500 dark:text-gray-400">
            No skill suggestions available.
          </p>
        </div>
      </div>

      <!-- Content & Engagement Strategy Card -->
      <div
        class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 p-6"
      >
        <h3
          class="text-xl font-semibold mb-4 text-gray-900 dark:text-white flex items-center"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5 mr-2 text-teal-500"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            stroke-width="2"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a1.994 1.994 0 01-1.414-.586m0 0L11 14h4a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2v4l.586-.586z"
            ></path>
          </svg>
          Content & Engagement Strategy
        </h3>
        <div id="contentStrategy" class="space-y-4">
          <p class="text-sm text-gray-500 dark:text-gray-400">
            No content strategy suggestions.
          </p>
        </div>
      </div>

      <!-- Networking Recommendations Card -->
      <div
        class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 p-6"
      >
        <h3
          class="text-xl font-semibold mb-4 text-gray-900 dark:text-white flex items-center"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5 mr-2 text-cyan-500"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            stroke-width="2"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"
            ></path>
          </svg>
          Networking Recommendations
        </h3>
        <div class="bg-gray-50 dark:bg-gray-900/50 rounded-lg p-4">
          <ul
            id="networkingRecommendations"
            class="text-sm text-gray-700 dark:text-gray-300 list-disc list-inside space-y-2"
          >
            <li>No specific networking recommendations.</li>
          </ul>
        </div>
      </div>

      <!-- Competitive Analysis Card -->
      <div
        class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 p-6"
      >
        <h3
          class="text-xl font-semibold mb-4 text-gray-900 dark:text-white flex items-center"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5 mr-2 text-lime-500"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            stroke-width="2"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
            ></path>
          </svg>
          Competitive Analysis
        </h3>
        <div class="space-y-5">
          <div class="bg-gray-50 dark:bg-gray-900/50 rounded-lg p-4">
            <h4
              class="text-md font-semibold text-gray-800 dark:text-gray-200 mb-2"
            >
              Industry Standards
            </h4>
            <p
              id="industryStandards"
              class="text-sm text-gray-700 dark:text-gray-300 leading-relaxed"
            >
              Analysis unavailable.
            </p>
          </div>
          <div class="bg-gray-50 dark:bg-gray-900/50 rounded-lg p-4">
            <h4
              class="text-md font-semibold text-gray-800 dark:text-gray-200 mb-2"
            >
              Your Differentiators
            </h4>
            <ul
              id="differentiators"
              class="text-sm text-gray-700 dark:text-gray-300 list-disc list-inside space-y-1"
            >
              <li>Analysis unavailable.</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { authService } from "../../lib/auth";
  import { TierManagementService } from "../../lib/tierManagement";
  import { PersistentDocumentService } from "../../lib/persistentDocumentService";
  let linkedinContent; // Declare at a higher scope

  document.addEventListener("DOMContentLoaded", async () => {
    // Check usage limits immediately when page loads
    try {
      const currentUser = await authService.getCurrentUser();
      if (currentUser?.uid) {
        const hasAccess = await TierManagementService.checkFeatureAccess(
          currentUser.uid,
          "linkedinOptimization"
        );

        if (!hasAccess) {
          const upgradeModal = document.createElement("div");
          upgradeModal.innerHTML = `
            <div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
              <div class="bg-white dark:bg-gray-900 rounded-2xl p-8 max-w-md w-full text-center">
                <h2 class="text-2xl font-bold mb-4 text-gray-900 dark:text-white">Usage Limit Reached</h2>
                <p class="text-gray-600 dark:text-gray-400 mb-6">
                  You've reached the maximum number of LinkedIn optimizations for your current plan.
                </p>
                <div class="flex justify-center space-x-4">
                  <button id="upgradeButton" class="bg-black dark:bg-white text-white dark:text-black px-6 py-2 rounded-full hover:bg-primary-600 transition">
                    Upgrade to Pro
                  </button>
                  <button id="closeUpgradeModal" class="bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white px-6 py-2 rounded-full hover:bg-gray-300 dark:hover:bg-gray-600 transition">
                    Close
                  </button>
                </div>
              </div>
            </div>
          `;
          document.body.appendChild(upgradeModal);

          const upgradeButton = upgradeModal.querySelector("#upgradeButton");
          const closeButton = upgradeModal.querySelector("#closeUpgradeModal");

          upgradeButton?.addEventListener("click", () => {
            window.location.href = "/pricing";
          });

          closeButton?.addEventListener("click", () => {
            document.body.removeChild(upgradeModal);
          });
        }
      }
    } catch (error) {
      console.error("Error checking feature access:", error);
    }

    // ** START: Form Clear and Manual Entry Handlers **
    const clearButton = document.getElementById("clearForm");
    const resumeOptionsSelector = document.getElementById(
      "resumeOptionsSelector"
    );
    const manualEntryContainer = document.getElementById(
      "manualEntryContainer"
    );
    const enterManuallyButton = document.getElementById("enterManuallyButton");
    const cancelManualEntry = document.getElementById("cancelManualEntry");
    const changeResumeSource = document.getElementById("changeResumeSource");
    const resumeFileAddedUI = document.getElementById("resumeFileAddedUI");
    const resumeContent = document.getElementById(
      "resumeContent"
    ) as HTMLTextAreaElement | null;

    // Clear button handler
    clearButton?.addEventListener("click", (e) => {
      e.preventDefault(); // Prevent form submission
      window.location.reload();
    });

    // Enter manually button handler
    enterManuallyButton?.addEventListener("click", () => {
      if (resumeOptionsSelector && manualEntryContainer) {
        resumeOptionsSelector.classList.add("hidden");
        manualEntryContainer.classList.remove("hidden");
        resumeFileAddedUI?.classList.add("hidden");
      }
    });

    // Cancel manual entry button handler
    cancelManualEntry?.addEventListener("click", () => {
      if (resumeOptionsSelector && manualEntryContainer) {
        resumeOptionsSelector.classList.remove("hidden");
        manualEntryContainer.classList.add("hidden");
      }
    });

    // Change resume source button handler
    changeResumeSource?.addEventListener("click", () => {
      if (resumeOptionsSelector && resumeFileAddedUI) {
        resumeOptionsSelector.classList.remove("hidden");
        resumeFileAddedUI.classList.add("hidden");
        manualEntryContainer?.classList.add("hidden");
      }
    });

    if (clearButton && resumeContent) {
      clearButton.addEventListener("click", (e) => {
        e.preventDefault(); // Prevent form submission

        // Clear all text areas
        resumeContent.value = "";

        // Reset any template selections if needed
        const selectedTemplate = document.querySelector(
          'input[name="template"]:checked'
        ) as HTMLInputElement | null;
        if (selectedTemplate) {
          selectedTemplate.checked = false;
        }
      });
    }

    // Clear resumeContent on page load (within the same DOMContentLoaded)
    if (resumeContent) {
      resumeContent.value = ""; // Clear the field on page load
    }
    // ** END: Form Clear and Manual Entry Handlers **

    // ** START: Resume File Upload Handlers **
    const resumeFileUploadButton = document.getElementById(
      "resumeFileUploadButton"
    );
    const resumeFileInput = document.getElementById(
      "resumeFileInput"
    ) as HTMLInputElement;
    const resumeContentTextarea = document.getElementById(
      "resumeContent"
    ) as HTMLTextAreaElement;

    // Add file upload button event listener
    resumeFileUploadButton?.addEventListener("click", async (e) => {
      // Prevent any form submission
      e.preventDefault();
      e.stopPropagation();

      // Trigger file input click
      resumeFileInput?.click();

      return false;
    });

    // Handle file selection
    resumeFileInput?.addEventListener("change", async (event) => {
      // Prevent default form submission
      event.preventDefault();

      const file = (event.target as HTMLInputElement).files?.[0];

      if (!file) {
        // console.error("No file selected"); // Removed for prod
        return;
      }

      // Supported file types
      const supportedTypes = [
        "application/pdf",
        "application/msword",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "text/plain",
        "text/rtf",
        "application/rtf",
      ];

      if (!supportedTypes.includes(file.type)) {
        alert(
          "Unsupported file type. Please upload a PDF, DOC, DOCX, TXT, or RTF file."
        );
        return;
      }

      // Convert file to base64
      const fileReader = new FileReader();
      fileReader.readAsDataURL(file);

      fileReader.onload = async () => {
        const base64File = fileReader.result as string;
        const base64Data = base64File.split(",")[1]; // Remove data URL prefix

        try {
          // Send to server-side API
          const response = await fetch("/.netlify/functions/upload-resume", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              fileBase64: base64Data,
              fileName: file.name,
              fileType: file.type,
            }),
          });

          // Parse response
          const result = await response.json();

          // Check for error in response
          if (!response.ok) {
            throw new Error(result.error || "Unknown server error");
          }

          if (result.success) {
            // Populate resume content textarea
            const resumeContent = result.data.text;
            resumeContentTextarea.value = resumeContent;

            // Optional: Trigger any validation or UI updates
            resumeContentTextarea.dispatchEvent(new Event("input"));

            // Show the file added UI and hide other elements
            const resumeFileAddedUI =
              document.getElementById("resumeFileAddedUI");
            const resumeOptionsSelector = document.getElementById(
              "resumeOptionsSelector"
            );
            const manualEntryContainer = document.getElementById(
              "manualEntryContainer"
            );

            if (resumeFileAddedUI && resumeOptionsSelector) {
              resumeFileAddedUI.classList.remove("hidden");
              resumeOptionsSelector.classList.add("hidden");
              manualEntryContainer?.classList.add("hidden");

              const resumeFileName = document.getElementById("resumeFileName");
              if (resumeFileName) {
                resumeFileName.textContent = `${file.name}`;
              }
            }
          } else {
            // Handle error response
            // console.error("Resume upload failed:", result); // Removed for prod
            alert(
              `Failed to upload resume: ${result.error || "Unknown error"}`
            );
          }
        } catch (error) {
          // Network or parsing errors
          // console.error("Resume upload error:", error); // Removed for prod
          alert(
            `Error uploading resume: ${error instanceof Error ? error.message : "Unknown error"}`
          );
        }
      };
    });
    // ** END: Resume File Upload Handlers **

    // ** START: Resume Import Modal Handlers **
    const importResumeButton = document.getElementById("importResumeButton");

    if (!importResumeButton || !resumeContentTextarea) {
      // console.error("Required elements for resume import not found"); // Removed for prod
      return;
    }

    importResumeButton.addEventListener("click", async () => {
      try {
        const user = await authService.getCurrentUser();
        if (!user) {
          // Redirect to login or show login modal
          return;
        }

        // Create a modal dynamically
        const modal = document.createElement("div");
        modal.innerHTML = `
                    <div class="p-4 fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
                        <div class="bg-white dark:bg-gray-900 rounded-2xl p-6 max-w-md w-full max-h-[80vh] overflow-y-auto">
                            <div class="flex justify-between items-center mb-4">
                                <h2 class="text-2xl font-bold text-gray-900 dark:text-white">
                                    Resume Manager
                                </h2>
                                <button id="closeImportModal" class="text-gray-500 hover:text-gray-900 dark:hover:text-white">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>

                            <div class="mb-4">
                                <button
                                    id="addNewResumeButton"
                                    class="w-full inline-flex items-center justify-center px-4 py-3
                                    bg-black text-white
                                    rounded-xl
                                    hover:bg-primary-600
                                    transition-all duration-300
                                    focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                    </svg>
                                    Create New Resume
                                </button>
                            </div>

                            <div class="border-t border-gray-200 dark:border-gray-700 my-4"></div>

                            <div id="resumeList" class="space-y-3">
                                </div>
                        </div>
                    </div>
                `;

        document.body.appendChild(modal);

        const closeModalButton = modal.querySelector("#closeImportModal");
        const addNewResumeButton = modal.querySelector("#addNewResumeButton");
        const resumeListContainer = modal.querySelector("#resumeList");

        closeModalButton?.addEventListener("click", () => {
          document.body.removeChild(modal);
        });

        // Add new resume functionality
        addNewResumeButton?.addEventListener("click", () => {
          // Navigate to Dashboard's Resume Manager section
          window.location.href = "/dashboard#addResumeBtn";
        });

        // Fetch and display resumes
        const resumes = await PersistentDocumentService.loadAllResumes();

        if (resumes.length === 0) {
          resumeListContainer!.innerHTML = `
                        <div class="text-center text-gray-500 dark:text-gray-400 py-6">
                            <p>No resumes found. Create a new resume to get started.</p>
                        </div>
                    `;
          return;
        }

        // Populate resume list
        resumeListContainer!.innerHTML = resumes
          .map(
            (resume, index) => `
                    <div class="bg-gray-100 dark:bg-gray-700 rounded-xl p-4 hover:bg-gray-200 dark:hover:bg-gray-600 cursor-pointer transition-colors resume-item"
                         data-resume-index="${index}">
                        <div class="flex justify-between items-center">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                                    ${resume.name || `Resume ${index + 1}`}
                                </h3>
                                <p class="text-sm text-gray-500 dark:text-gray-400">
                                    Last updated: ${new Date(resume.lastUpdated).toLocaleDateString()}
                                </p>
                            </div>
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                        </div>
                    </div>
                `
          )
          .join("");

        // Add click event to resume items
        const resumeItems = modal.querySelectorAll(".resume-item");
        resumeItems.forEach((item) => {
          item.addEventListener("click", () => {
            const index = item.getAttribute("data-resume-index");
            const selectedResume = resumes[Number(index)];

            // Populate resume content textarea
            resumeContentTextarea.value = selectedResume.content || ""; // Using the original variable name here

            // Close modal
            document.body.removeChild(modal);
          });
        });
      } catch (error) {
        console.error("Error importing resume:", error); // Keep error log
        // Show user-friendly error message
        const errorModal = document.createElement("div");
        errorModal.innerHTML = `
                    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
                        <div class="bg-white dark:bg-gray-900 rounded-2xl p-6 max-w-md w-full text-center">
                            <h2 class="text-2xl font-bold text-red-600 mb-4">
                                Import Error
                            </h2>
                            <p class="text-gray-600 dark:text-gray-400 mb-6">
                                Unable to import resumes. Please try again later.
                            </p>
                            <button id="closeErrorModal" class="bg-primary text-white px-4 py-2 rounded-full">
                                Close
                            </button>
                        </div>
                    </div>
                `;
        document.body.appendChild(errorModal);

        const closeErrorModalButton =
          errorModal.querySelector("#closeErrorModal");
        closeErrorModalButton?.addEventListener("click", () => {
          document.body.removeChild(errorModal);
        });
      }
    });
    // ** END: Resume Import Modal Handlers **

    // ** START: LinkedIn File Upload Handlers **
    const linkedinFileUploadButton = document.getElementById(
      "linkedinFileUploadButton"
    );
    const linkedinFileInput = document.getElementById(
      "linkedin-upload"
    ) as HTMLInputElement;

    // Add file upload button event listener
    linkedinFileUploadButton?.addEventListener("click", async (e) => {
      e.preventDefault();
      e.stopPropagation();
      linkedinFileInput?.click();
      return false;
    });

    // Track LinkedIn optimization usage and check access
    async function trackLinkedInOptimization() {
      try {
        const currentUser = await authService.getCurrentUser();
        if (!currentUser?.uid) throw new Error("User not authenticated");
        
        const hasAccess = await TierManagementService.checkFeatureAccess(
          currentUser.uid,
          "linkedinOptimization"
        );

        if (!hasAccess) {
          const upgradeModal = document.createElement("div");
          upgradeModal.innerHTML = `
            <div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
              <div class="bg-white dark:bg-gray-900 rounded-2xl p-8 max-w-md w-full text-center">
                <h2 class="text-2xl font-bold mb-4 text-gray-900 dark:text-white">Usage Limit Reached</h2>
                <p class="text-gray-600 dark:text-gray-400 mb-6">
                  You've reached the maximum number of LinkedIn optimizations for your current plan.
                </p>
                <div class="flex justify-center space-x-4">
                  <button id="upgradeButton" class="bg-black dark:bg-white text-white dark:text-black px-6 py-2 rounded-full hover:bg-primary-600 transition">
                    Upgrade to Pro
                  </button>
                  <button id="closeUpgradeModal" class="bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white px-6 py-2 rounded-full hover:bg-gray-300 dark:hover:bg-gray-600 transition">
                    Close
                  </button>
                </div>
              </div>
            </div>
          `;
          document.body.appendChild(upgradeModal);

          const upgradeButton = upgradeModal.querySelector("#upgradeButton");
          const closeButton = upgradeModal.querySelector("#closeUpgradeModal");

          upgradeButton?.addEventListener("click", () => {
            window.location.href = "/pricing";
          });

          closeButton?.addEventListener("click", () => {
            document.body.removeChild(upgradeModal);
          });

          return false;
        }

        await TierManagementService.trackFeatureUsage(
          currentUser.uid,
          "linkedinOptimization"
        );
        return true;
      } catch (error) {
        console.error("Error tracking LinkedIn optimization:", error); // Keep error log
        throw error;
      }
    }

    // Handle file selection
    linkedinFileInput?.addEventListener("change", async (event) => {
      event.preventDefault();
      const file = (event.target as HTMLInputElement).files?.[0];

      if (!file) return;

      try {
        // Check usage limit first
        const hasAccess = await trackLinkedInOptimization();
        if (!hasAccess) {
          // Clear the file input
          linkedinFileInput.value = '';
          return;
        }
        // Update UI for LinkedIn success state
        const linkedinFileAddedUI = document.getElementById(
          "linkedinFileAddedUI"
        );
        const linkedinOptionsSelector = document.getElementById(
          "linkedinOptionsSelector"
        );

        if (linkedinFileAddedUI && linkedinOptionsSelector) {
          linkedinFileAddedUI.classList.remove("hidden");
          linkedinOptionsSelector.classList.add("hidden");

          const linkedinFileName = document.getElementById("linkedinFileName");
          if (linkedinFileName) {
            linkedinFileName.textContent = `${file.name}`;
          }
        }
      } catch (error) {
        // console.error("LinkedIn PDF upload error:", error); // Removed for prod
        return;
      }

      if (!file) {
        // console.error("No file selected"); // Removed for prod
        return;
      }

      // Supported file types
      const supportedTypes = ["application/pdf"];
      if (!supportedTypes.includes(file.type)) {
        alert("Unsupported file type. Please upload a PDF file.");
        return;
      }

      // Convert file to base64
      const fileReader = new FileReader();
      fileReader.readAsDataURL(file);

      fileReader.onload = async () => {
        const base64File = fileReader.result as string;
        const base64Data = base64File.split(",")[1]; // Remove data URL prefix

        try {
          // Send to server-side API (same as resume upload)
          const response = await fetch("/.netlify/functions/upload-resume", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              fileBase64: base64Data,
              fileName: file.name,
              fileType: file.type,
            }),
          });

          // Parse response
          const result = await response.json();

          if (!response.ok) {
            throw new Error(result.error || "Unknown server error");
          }

          if (result.success) {
            // Store the text content in a local variable
            linkedinContent = result.data.text;

            // Update UI for success state
            const linkedinFileAddedUI = document.getElementById(
              "linkedinFileAddedUI"
            );
            const linkedinOptionsSelector = document.getElementById(
              "linkedinOptionsSelector"
            );

            if (linkedinFileAddedUI && linkedinOptionsSelector) {
              linkedinFileAddedUI.classList.remove("hidden");
              linkedinOptionsSelector.classList.add("hidden");

              const linkedinFileName =
                document.getElementById("linkedinFileName");
              if (linkedinFileName) {
                linkedinFileName.textContent = `${file.name}`;
              }
            }
          } else {
            // console.error("LinkedIn PDF upload failed:", result); // Removed for prod
            alert(
              `Failed to upload LinkedIn PDF: ${result.error || "Unknown error"}`
            );
          }
        } catch (error) {
          // console.error("LinkedIn PDF upload error:", error); // Removed for prod
          alert(
            `Error uploading LinkedIn PDF: ${error instanceof Error ? error.message : "Unknown error"}`
          );
        }
      };
    });
    // ** END: LinkedIn File Upload Handlers **

    // ** START: LinkedIn Optimizer Form Submission Handlers **
    const linkedinOptimiserForm = document.getElementById(
      "optimizeProfileBtn"
    ) as HTMLButtonElement;

    linkedinOptimiserForm?.addEventListener("click", async (event) => {
      event.preventDefault();

      const loader = document.getElementById("linkedinSubmitLoader");
      const submitButton = document.querySelector(
        "#optimizeProfileBtn"
      ) as HTMLButtonElement;

      try {
        loader?.classList.remove("hidden");
        (submitButton as HTMLButtonElement) &&
          ((submitButton as HTMLButtonElement).disabled = true);

        const response = await fetch("/.netlify/functions/linkedin-optimize", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            linkedinContent: linkedinContent,
            resumeContent: resumeContent?.value,
          }),
        });

        const result = await response.json();

        if (!response.ok)
          throw new Error(result.error || "Failed to optimize profile");

        // Update UI with results
        updateResults(result);

        // Track LinkedIn optimization usage
        await trackLinkedInOptimization();

        // Show success UI
        const successUI = document.getElementById("optimizationSuccess");
        const formContainer = document.getElementById("linkedinFormContainer");
        successUI?.classList.remove("hidden");
        formContainer?.classList.add("hidden");
      } catch (error) {
        console.error("Optimization error:", error); // Keep error log
        alert(
          `Optimization failed: ${error instanceof Error ? error.message : "Unknown error"}`
        );
      } finally {
        loader?.classList.add("hidden");
        submitButton && ((submitButton as HTMLButtonElement).disabled = false);
      }

      // Optionally, you can proceed with the form submission logic here
      // For example, you can call the API to optimize the profile
    });
    // ** END: LinkedIn Optimizer Form Submission Handlers **
  });

  const changeLinkedinSource = document.getElementById("changeLinkedinSource");
  const linkedinOptionsSelector = document.getElementById(
    "linkedinOptionsSelector"
  );
  const linkedinFileAddedUI = document.getElementById("linkedinFileAddedUI");
  const linkedinFileInput = document.getElementById(
    "linkedin-upload"
  ) as HTMLInputElement;

  changeLinkedinSource?.addEventListener("click", () => {
    if (linkedinOptionsSelector && linkedinFileAddedUI) {
      linkedinOptionsSelector.classList.remove("hidden");
      linkedinFileAddedUI.classList.add("hidden");
      linkedinFileInput.value = "";
    }
  });

  // Helper function to get color class based on score
  const getScoreColorClass = (score) => {
    if (score >= 90) return "text-green-500"; // Use text color for SVG stroke
    if (score >= 70) return "text-blue-500";
    if (score >= 50) return "text-amber-500";
    return "text-red-500";
  };

  const getProgressBarColorClass = (score) => {
    if (score >= 90) return "bg-green-500";
    if (score >= 70) return "bg-blue-500";
    if (score >= 50) return "bg-amber-500";
    return "bg-red-500";
  };

  // Function to update radial progress circle
  const setProgress = (circleElement, textElement, score) => {
    if (!circleElement || !textElement) return;
    const radius = circleElement.r.baseVal.value;
    const circumference = 2 * Math.PI * radius;
    const offset = circumference - (score / 100) * circumference;

    circleElement.style.strokeDashoffset = offset;
    circleElement.classList.remove(
      "text-green-500",
      "text-blue-500",
      "text-amber-500",
      "text-red-500"
    );
    circleElement.classList.add(getScoreColorClass(score));
    textElement.textContent = score;
  };

  // Function to update results with API data
  const updateResults = (data) => {
    // Overall Score
    const overallScoreCircle = document.getElementById("overallScoreCircle");
    const overallScoreText = document.getElementById("overallScoreText");
    setProgress(overallScoreCircle, overallScoreText, data.overallScore || 0);

    // Section Scores
    const sectionScoresContainer = document.getElementById("sectionScores");
    if (
      sectionScoresContainer &&
      data.sectionScores &&
      Array.isArray(data.sectionScores)
    ) {
      if (data.sectionScores.length > 0) {
        sectionScoresContainer.innerHTML = data.sectionScores
          .map((section) => {
            const score = section.score || 0;
            const colorClass = getProgressBarColorClass(score);
            const recommendationsHTML =
              Array.isArray(section.recommendations) &&
              section.recommendations.length > 0
                ? `<ul class="mt-2 text-xs text-gray-600 dark:text-gray-400 list-disc list-inside pl-4 space-y-0.5">
                 ${section.recommendations.map((rec) => `<li>${rec}</li>`).join("")}
               </ul>`
                : '<p class="mt-1 text-xs text-gray-500 dark:text-gray-400 italic">No specific recommendations for this section.</p>';

            return `
            <div class="border-b border-gray-200 dark:border-gray-700 pb-4 last:border-0 last:pb-0">
              <div class="flex justify-between items-center mb-1">
                <h4 class="text-md font-semibold text-gray-900 dark:text-white">${section.section}</h4>
                <span class="text-sm font-medium ${getScoreColorClass(score).replace("text-", "text-")}">${score}/100</span>
              </div>
              <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5">
                <div class="${colorClass} h-1.5 rounded-full" style="width: ${score}%"></div>
              </div>
              ${recommendationsHTML}
            </div>`;
          })
          .join("");
      } else {
        sectionScoresContainer.innerHTML =
          '<p class="text-sm text-gray-500 dark:text-gray-400">Section analysis data is not available.</p>';
      }
    } else if (sectionScoresContainer) {
      sectionScoresContainer.innerHTML =
        '<p class="text-sm text-gray-500 dark:text-gray-400">Section analysis data is not available.</p>';
    }

    // Profile Completeness
    const completenessBar = document.getElementById("completenessBar");
    const completenessText = document.getElementById("completenessText");
    const missingSectionsList = document.getElementById("missingSections");
    const incompleteSectionsList =
      document.getElementById("incompleteSections");

    if (completenessBar && completenessText && data.profileCompleteness) {
      const score = data.profileCompleteness.score || 0;
      completenessBar.style.width = `${score}%`;
      completenessBar.classList.remove(
        "bg-green-500",
        "bg-blue-500",
        "bg-amber-500",
        "bg-red-500"
      );
      completenessBar.classList.add(getProgressBarColorClass(score));
      completenessText.textContent = `${score}% Complete`;
    }

    const updateList = (listElement, items, placeholder) => {
      if (listElement) {
        if (items && Array.isArray(items) && items.length > 0) {
          listElement.innerHTML = items
            .map((item) => `<li>${item}</li>`)
            .join("");
        } else {
          listElement.innerHTML = `<li>${placeholder}</li>`;
        }
      }
    };

    updateList(
      missingSectionsList,
      data.profileCompleteness?.missingSections,
      "No missing sections found."
    );
    updateList(
      incompleteSectionsList,
      data.profileCompleteness?.incompleteSection,
      "No incomplete sections found."
    );

    // ATS Optimization
    const atsScoreCircle = document.getElementById("atsScoreCircle");
    const atsScoreText = document.getElementById("atsScoreText");
    const atsRecommendationsList =
      document.getElementById("atsRecommendations");

    setProgress(atsScoreCircle, atsScoreText, data.atsOptimization?.score || 0);
    updateList(
      atsRecommendationsList,
      data.atsOptimization?.recommendations,
      "No specific ATS recommendations."
    );

    // Keyword Optimization
    const missingKeywordsContainer = document.getElementById("missingKeywords");
    const keywordSuggestionsContainer =
      document.getElementById("keywordSuggestions");

    if (missingKeywordsContainer) {
      const keywords = data.keywordOptimization?.missingKeywords;
      if (keywords && Array.isArray(keywords) && keywords.length > 0) {
        missingKeywordsContainer.innerHTML = keywords
          .map(
            (keyword) =>
              `<span class="px-2.5 py-1 rounded-full bg-red-100 dark:bg-red-900/50 text-xs text-red-700 dark:text-red-300 font-medium">${keyword}</span>`
          )
          .join("");
      } else {
        missingKeywordsContainer.innerHTML = `<span class="px-2.5 py-1 rounded-full bg-gray-100 dark:bg-gray-700 text-xs text-gray-600 dark:text-gray-300">No missing keywords identified.</span>`;
      }
    }

    if (keywordSuggestionsContainer) {
      const suggestions = data.keywordOptimization?.keywordSuggestions;
      if (suggestions && Array.isArray(suggestions) && suggestions.length > 0) {
        keywordSuggestionsContainer.innerHTML = suggestions
          .map(
            (suggestion) => `
          <div class="p-2.5 rounded-lg bg-blue-50 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-800">
            <p class="text-xs font-semibold text-blue-800 dark:text-blue-200">${suggestion.keyword}</p>
            <p class="text-xs text-blue-600 dark:text-blue-300">${suggestion.placement}</p>
          </div>
        `
          )
          .join("");
      } else {
        keywordSuggestionsContainer.innerHTML = `<p class="text-xs text-gray-500 dark:text-gray-400">No specific placement suggestions.</p>`;
      }
    }

    // Optimized Summary
    const optimizedSummary = document.getElementById("optimizedSummary");
    if (optimizedSummary) {
      optimizedSummary.textContent =
        data.optimizedSummary || "No optimized summary generated.";
      optimizedSummary.parentElement?.classList.toggle(
        "opacity-50",
        !data.optimizedSummary
      ); // Dim if no summary
    }

    // Headline Suggestions
    const headlineContainer = document.getElementById("headlineSuggestions");
    if (headlineContainer) {
      const suggestions = data.headlineSuggestions;
      if (suggestions && Array.isArray(suggestions) && suggestions.length > 0) {
        headlineContainer.innerHTML = suggestions
          .map(
            (headline) => `
              <div class="p-3 rounded-lg bg-purple-50 dark:bg-purple-900/30 border border-purple-200 dark:border-purple-800">
                <p class="text-sm font-medium text-purple-800 dark:text-purple-200 mb-1">${headline.headline}</p>
                <p class="text-xs text-purple-600 dark:text-purple-300">${headline.explanation}</p>
              </div>`
          )
          .join("");
      } else {
        headlineContainer.innerHTML = `<p class="text-sm text-gray-500 dark:text-gray-400">No headline suggestions available.</p>`;
      }
    }

    // Experience Enhancements
    const experienceContainer = document.getElementById(
      "experienceEnhancements"
    );
    if (experienceContainer) {
      const enhancements = data.experienceEnhancements;
      if (
        enhancements &&
        Array.isArray(enhancements) &&
        enhancements.length > 0
      ) {
        experienceContainer.innerHTML = enhancements
          .map(
            (exp) => `
              <div class="border-b border-gray-200 dark:border-gray-700 pb-3 last:border-0 last:pb-0">
                <h4 class="text-md font-semibold text-gray-900 dark:text-white mb-1.5">${exp.company}</h4>
                ${
                  Array.isArray(exp.recommendations) &&
                  exp.recommendations.length > 0
                    ? `<ul class="text-xs text-gray-600 dark:text-gray-400 list-disc list-inside pl-4 space-y-1">
                       ${exp.recommendations.map((rec) => `<li>${rec}</li>`).join("")}
                     </ul>`
                    : '<p class="text-xs text-gray-500 dark:text-gray-400 italic">No specific recommendations for this experience.</p>'
                }
              </div>`
          )
          .join("");
      } else {
        experienceContainer.innerHTML = `<p class="text-sm text-gray-500 dark:text-gray-400">No experience enhancement suggestions.</p>`;
      }
    }

    // Skills Prioritization
    const skillsContainer = document.getElementById("skillEndorsements");
    if (skillsContainer) {
      const endorsements = data.skillEndorsements;
      if (
        endorsements &&
        Array.isArray(endorsements) &&
        endorsements.length > 0
      ) {
        skillsContainer.innerHTML = endorsements
          .map(
            (category) => `
              <div>
                <h4 class="text-md font-semibold text-gray-900 dark:text-white mb-2">${category.category}</h4>
                <div class="flex flex-wrap gap-2">
                  ${
                    Array.isArray(category.skills) && category.skills.length > 0
                      ? category.skills
                          .map(
                            (skill) =>
                              `<span class="px-2.5 py-1 rounded-full bg-pink-100 dark:bg-pink-900/50 text-xs text-pink-700 dark:text-pink-300 font-medium">${skill}</span>`
                          )
                          .join("")
                      : '<span class="text-xs text-gray-500 dark:text-gray-400 italic">No skills listed for this category.</span>'
                  }
                </div>
              </div>`
          )
          .join("");
      } else {
        skillsContainer.innerHTML = `<p class="text-sm text-gray-500 dark:text-gray-400">No skill suggestions available.</p>`;
      }
    }

    // Content Strategy
    const strategyContainer = document.getElementById("contentStrategy");
    if (strategyContainer) {
      const strategies = data.contentStrategy;
      if (strategies && Array.isArray(strategies) && strategies.length > 0) {
        strategyContainer.innerHTML = strategies
          .map(
            (strategy) => `
              <div class="p-3 rounded-lg bg-teal-50 dark:bg-teal-900/30 border border-teal-200 dark:border-teal-800">
                <h4 class="text-sm font-semibold text-teal-800 dark:text-teal-200 mb-1">${strategy.contentType}</h4>
                <p class="text-xs text-teal-600 dark:text-teal-300 mb-2">${strategy.description}</p>
                ${strategy.example ? `<div class="text-xs italic text-teal-500 dark:text-teal-400 bg-teal-100 dark:bg-teal-800/50 p-2 rounded"> Example: ${strategy.example}</div>` : ""}
              </div>`
          )
          .join("");
      } else {
        strategyContainer.innerHTML = `<p class="text-sm text-gray-500 dark:text-gray-400">No content strategy suggestions.</p>`;
      }
    }

    // Networking Recommendations
    const networkingContainer = document.getElementById(
      "networkingRecommendations"
    );
    updateList(
      networkingContainer,
      data.networkingRecommendations,
      "No specific networking recommendations."
    );

    // Competitive Analysis
    const industryStandards = document.getElementById("industryStandards");
    const differentiatorsList = document.getElementById("differentiators");

    if (industryStandards) {
      industryStandards.textContent =
        data.competitiveAnalysis?.industryStandards || "Analysis unavailable.";
      industryStandards.parentElement?.classList.toggle(
        "opacity-50",
        !data.competitiveAnalysis?.industryStandards
      );
    }
    updateList(
      differentiatorsList,
      data.competitiveAnalysis?.differentiators,
      "Analysis unavailable."
    );

    // Show results container
    const resultsContainer = document.getElementById("linkedinResults");
    if (resultsContainer) {
      resultsContainer.classList.remove("hidden");
      // Scroll to results smoothly
      resultsContainer.scrollIntoView({ behavior: "smooth", block: "start" });
    }
  };

  // ** START: LinkedIn Optimizer Form Submission Handlers **
  // Update form submit handler
  const linkedinOptimiserForm = document.getElementById(
    "linkedinOptimiserForm"
  ) as HTMLFormElement;
  linkedinOptimiserForm?.addEventListener("submit", async (event) => {
    event.preventDefault();

    const loader = document.getElementById("linkedinSubmitLoader");
    const submitButton = document.querySelector(
      '#linkedinOptimiserForm button[type="submit"]'
    );

    try {
      // Show loader and disable button
      loader?.classList.remove("hidden");
      submitButton?.setAttribute("disabled", "true");

      // Get form data and make API call
      const formData = new FormData(linkedinOptimiserForm);
      const response = await fetch("/.netlify/functions/linkedin-optimize", {
        method: "POST",
        body: formData,
      });

      if (!response.ok) throw new Error("API request failed");

      const data = await response.json();
      updateResults(data);
    } catch (error) {
      console.error("Error:", error); // Keep error log
      // Show error message to user
    } finally {
      // Hide loader and enable button
      loader?.classList.add("hidden");
      submitButton?.removeAttribute("disabled");
    }
  });
</script>
