---

---

<section class="relative py-16 sm:py-24 lg:py-32 bg-white dark:bg-gray-950">
  <div
    aria-hidden="true"
    class="absolute inset-0 grid grid-cols-2 -space-x-52 opacity-0 dark:opacity-0 transition-opacity duration-300 ease-in-out"
  >
    <div
      class="blur-[106px] h-56 bg-gradient-to-br from-primary to-purple-400 dark:from-blue-700 dark:to-indigo-600 opacity-40 dark:opacity-20"
    >
    </div>
    <div
      class="blur-[106px] h-32 bg-gradient-to-r from-cyan-400 to-sky-300 dark:to-indigo-600 dark:from-emerald-500 opacity-40 dark:opacity-20"
    >
    </div>
  </div>
  <div class="relative w-full">
    <div class="container mx-auto px-3 md:px-6 lg:px-8 max-w-6xl">
      <div class="w-full mx-auto">
        <form
          id="interviewPrepForm"
          class="w-full space-y-6 sm:space-y-8 bg-white dark:bg-transparent rounded-3xl p-6 sm:p-8
                    shadow-lg border-gray-100 border dark:border-gray-700/70
                    transition-all duration-300 ease-in-out hover:shadow-xl"
        >
          <div class="grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-6">
            <!-- Company Name -->
            <div class="space-y-1.5 sm:space-y-2">
              <label
                for="companyName"
                class="block text-sm sm:text-base font-medium text-gray-900 dark:text-white text-left"
              >
                Company Name <span class="text-red-600"> *</span>
              </label>
              <input
                type="text"
                id="companyName"
                name="companyName"
                placeholder="Enter the company name (e.g., Google, Amazon)"
                class="w-full p-2.5 sm:p-3 border-2 border-gray-300 dark:border-gray-700/70 rounded-xl
                                bg-white/10 dark:bg-gray-800/20
                                focus:ring-2 focus:ring-primary/30 focus:border-primary
                                text-gray-900 dark:text-white
                                transition-all duration-300
                                placeholder:text-gray-400 placeholder:text-sm
                                hover:bg-white/20 dark:hover:bg-gray-800/30
                                text-md sm:text-base"
                required
              />
            </div>

            <!-- Job Role -->
            <div class="space-y-1.5 sm:space-y-2">
              <label
                for="jobRole"
                class="block text-sm sm:text-base font-medium text-gray-900 dark:text-white text-left"
              >
                Job Role <span class="text-red-600"> *</span>
              </label>
              <input
                type="text"
                id="jobRole"
                name="jobRole"
                placeholder="Enter the job role (e.g., Software Engineer, Product Manager)"
                class="w-full p-2.5 sm:p-3 border-2 border-gray-300 dark:border-gray-700/70 rounded-xl
                                bg-white/10 dark:bg-gray-800/20
                                focus:ring-2 focus:ring-primary/30 focus:border-primary
                                text-gray-900 dark:text-white
                                transition-all duration-300
                                placeholder:text-gray-400 placeholder:text-sm
                                hover:bg-white/20 dark:hover:bg-gray-800/30
                                text-md sm:text-base"
                required
              />
            </div>
          </div>

          <!-- Resume -->
          <div class="space-y-4 sm:space-y-5">
            <div class="flex justify-between items-center">
              <label
                class="text-sm sm:text-base font-medium text-gray-900 dark:text-white"
              >
                Resume <span class="text-red-600">*</span>
              </label>
            </div>

            <!-- Hidden file input -->
            <input type="file" id="resumeFileInput" style="display: none;" />

            <!-- Resume Options Selector -->
            <div
              id="resumeOptionsSelector"
              class="grid grid-cols-3 md:grid-cols-3 xs:gap-2 sm:gap-4 md:gap-4 lg:gap-4 gap-2"
            >
              <button
                type="button"
                id="resumeFileUploadButton"
                class="relative flex flex-col items-center justify-center p-2 border-2 border-gray-200 dark:border-gray-700 rounded-xl bg-white/10 dark:bg-gray-800/20 hover:bg-gray-50 dark:hover:bg-gray-700/40 transition-all duration-300 group"
              >
                <div
                  class="flex flex-col items-center justify-center space-y-2"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-7 w-7 text-primary group-hover:text-primary-dark transition-colors duration-300"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                    ></path>
                  </svg>
                  <span class="font-medium text-gray-900 dark:text-white"
                    >Upload File</span
                  >
                  <span class="text-xs text-gray-500 dark:text-gray-400 mt-1"
                    >PDF, DOCX, TXT</span
                  >
                </div>
              </button>

              <button
                type="button"
                id="importResumeButton"
                class="relative flex flex-col items-center justify-center p-2 border-2 border-gray-200 dark:border-gray-700 rounded-xl bg-white/10 dark:bg-gray-800/20 hover:bg-gray-50 dark:hover:bg-gray-700/40 transition-all duration-300 group"
              >
                <div
                  class="flex flex-col items-center justify-center space-y-2"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-7 w-7 text-primary group-hover:text-primary-dark transition-colors duration-300"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4"
                    ></path>
                  </svg>
                  <span class="font-medium text-gray-900 dark:text-white"
                    >Resume Manager</span
                  >
                  <span class="text-xs text-gray-500 dark:text-gray-400 mt-1"
                    >Select saved resume</span
                  >
                </div>
              </button>

              <button
                type="button"
                id="enterManuallyButton"
                class="relative flex flex-col items-center justify-center p-2 border-2 border-gray-200 dark:border-gray-700 rounded-xl bg-white/10 dark:bg-gray-800/20 hover:bg-gray-50 dark:hover:bg-gray-700/40 transition-all duration-300 group"
              >
                <div
                  class="flex flex-col items-center justify-center space-y-2"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-7 w-7 text-primary group-hover:text-primary-dark transition-colors duration-300"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
                    ></path>
                  </svg>
                  <span class="font-medium text-gray-900 dark:text-white"
                    >Enter Manually</span
                  >
                  <span class="text-xs text-gray-500 dark:text-gray-400 mt-1"
                    >Paste or type resume</span
                  >
                </div>
              </button>
            </div>

            <!-- File Added UI -->
            <div
              id="resumeFileAddedUI"
              class="hidden w-full p-6 border-2 border-gray-300 dark:border-gray-700/70 rounded-xl bg-white/10 dark:bg-gray-800/20 min-h-[100px] flex flex-col items-center justify-center"
            >
              <div class="flex items-center justify-center mb-3">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-10 w-10 text-green-500"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <p
                id="resumeFileName"
                class="text-center text-lg text-gray-900 dark:text-white font-medium"
              >
                Resume added successfully
              </p>
              <button
                id="changeResumeSource"
                class="mt-4 px-4 py-2 bg-black text-white dark:bg-white dark:text-black rounded-full text-sm hover:bg-gray-800 dark:hover:bg-gray-200 transition-all duration-200"
              >
                Upload Another
              </button>
            </div>

            <!-- Manual Entry UI -->
            <div id="manualEntryContainer" class="hidden w-full">
              <textarea
                id="resumeContent"
                name="resumeContent"
                rows="10"
                placeholder="Paste or type your resume here..."
                class="w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-white text-left focus:ring-2 focus:ring-primary dark:focus:ring-primary-dark focus:border-transparent placeholder:text-gray-400 dark:placeholder:text-gray-500"
              ></textarea>
              <div class="flex justify-end mt-2">
                <button
                  id="cancelManualEntry"
                  class="text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors"
                >
                  Back to options
                </button>
              </div>
            </div>

            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
              This helps us generate more relevant interview questions specific
              to your background.
            </p>
          </div>

          <!-- Submit Button -->
          <div
            class="flex flex-col sm:flex-row justify-center space-y-2.5 sm:space-y-0 sm:space-x-4 mt-2 sm:mt-4"
          >
            <button
              type="submit"
              id="generateQuestionsBtn"
              class="w-full sm:w-auto inline-flex h-11 sm:h-12 items-center justify-center px-4 sm:px-6 py-2 sm:py-3
                            text-sm sm:text-base font-semibold
                            text-white bg-black
                            dark:text-black dark:bg-white
                            rounded-full
                            transition-all duration-300
                            transform hover:scale-105 active:scale-95
                            focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2
                            dark:focus:ring-offset-gray-900
                            shadow-lg shadow-gray-500/30 hover:shadow-gray-500/40"
            >
              <span class="relative z-10">Generate Interview Questions</span>
              <span
                class="absolute inset-0 rounded-full opacity-0 group-hover:opacity-10 bg-white transition-opacity duration-300"
              ></span>
            </button>
            <button
              type="button"
              id="clearForm"
              class="w-full sm:w-auto inline-flex h-11 sm:h-12 items-center justify-center px-4 sm:px-6 py-2 sm:py-3
                            text-sm sm:text-base font-semibold
                            text-black bg-white
                            dark:text-gray-900 dark:bg-gray-500
                            border border-gray-300 dark:border-gray-700
                            rounded-full
                            transition-all duration-300
                            transform hover:scale-105 active:scale-95
                            focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2
                            dark:focus:ring-offset-gray-900
                            shadow-lg shadow-gray-500/30 hover:shadow-gray-500/40"
            >
              <span class="relative z-10">Clear</span>
              <span
                class="absolute inset-0 rounded-full opacity-0 group-hover:opacity-10 bg-white transition-opacity duration-300"
              ></span>
            </button>
          </div>

          <!-- Clear Form Button -->
          <div class="flex justify-center"></div>
        </form>
      </div>

      <div id="questionsResult" class="mt-6"></div>
      <div id="answerSection" class="mt-6 hidden"></div>
      <div id="tierInfo"></div>
    </div>
  </div>
</section>

<!-- Modal Container -->
<div id="answerModal" class="fixed inset-0 z-50 hidden flex items-center justify-center">
  <!-- Overlay -->
  <div
    class="fixed inset-0 bg-black/60 backdrop-blur-sm transition-opacity duration-300 ease-in-out"
    aria-hidden="true"
    onclick="closeModal()"
  ></div>

  <!-- Modal Content -->
  <div class="relative bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700/50 w-[95vw] sm:w-[90vw] md:w-[80vw] lg:w-[70vw] max-w-4xl max-h-[90vh] flex flex-col transition-all duration-300 ease-in-out">
    <!-- Header -->
    <div class="flex justify-between items-center p-4 sm:p-5 border-b border-gray-200 dark:border-gray-700">
      <h2 class="text-xl sm:text-2xl font-semibold text-gray-900 dark:text-white">
        Practice Your Answer
      </h2>
      <button
        id="closeModalBtnTop"
        class="p-1.5 text-gray-500 hover:text-gray-900 dark:hover:text-white rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200"
        onclick="closeModal()"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 sm:h-6 sm:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
        </svg>
        <span class="sr-only">Close modal</span>
      </button>
    </div>

    <!-- Body -->
    <div class="flex-grow overflow-y-auto p-4 sm:p-6">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Left Column: Question & Answer Input -->
        <div class="space-y-5">
          <div class="p-4 bg-gray-50 dark:bg-gray-800/50 rounded-xl border border-gray-100 dark:border-gray-700/50">
            <h3 id="modalQuestion" class="font-semibold text-lg text-gray-900 dark:text-white mb-1.5 text-left">
              {/* Question will be populated by JS */}
            </h3>
            <p id="modalContext" class="text-sm text-gray-600 dark:text-gray-400 text-left">
              {/* Context will be populated by JS */}
            </p>
          </div>

          <div class="space-y-3">
            <label for="modalAnswerText" class="block text-base font-medium text-gray-900 dark:text-white">
              Your Answer
            </label>
            <div class="relative">
              <textarea
                id="modalAnswerText"
                rows="8"
                placeholder="Type or use the microphone to record your answer..."
                class="w-full px-4 py-3 pr-12 rounded-xl border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary dark:focus:ring-primary-dark focus:border-transparent placeholder:text-gray-400 dark:placeholder:text-gray-500 transition-colors duration-200"
              ></textarea>
              <button id="voiceInputBtn" class="absolute top-3 right-3 p-2 text-gray-500 dark:text-gray-400 hover:text-primary dark:hover:text-primary-light rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200" title="Record Answer">
                <svg id="micIcon" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clip-rule="evenodd" />
                </svg>
                 <svg id="stopIcon" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 hidden text-red-500 animate-pulse" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z" clip-rule="evenodd" />
                </svg>
              </button>
            </div>
             <p id="recordingStatus" class="text-xs text-gray-500 dark:text-gray-400 h-4"></p>
             <p id="speechError" class="text-xs text-red-600 dark:text-red-400 h-4"></p>
          </div>
        </div>

        <!-- Right Column: Feedback -->
        <div id="modalFeedbackContainer" class="space-y-5">
           <div class="p-6 bg-gray-50 dark:bg-gray-800/50 rounded-xl border border-gray-100 dark:border-gray-700/50 h-full flex items-center justify-center">
             <p class="text-gray-500 dark:text-gray-400 text-center">Submit your answer to get feedback.</p>
           </div>
        </div>
      </div>
    </div>

    <!-- Footer -->
    <div class="flex justify-end items-center p-4 sm:p-5 border-t border-gray-200 dark:border-gray-700 space-x-3">
      <button
        onclick="closeModal()"
        class="px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200 text-sm sm:text-base"
      >
        Cancel
      </button>
      <button
        id="modalSubmitBtn"
        class="px-5 py-2 bg-black text-white dark:bg-white dark:text-black rounded-lg hover:bg-gray-800 dark:hover:bg-gray-200 transition-colors duration-200 flex items-center text-sm sm:text-base font-medium"
      >
        <span id="submitBtnText">Submit for Review</span>
         <svg id="submitBtnSpinner" class="animate-spin ml-2 h-4 w-4 text-white dark:text-black hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
      </button>
    </div>
  </div>
</div>


<style>
  textarea.border-red-500,
  input.border-red-500,
  button.border-red-500 {
    border-color: rgb(239 68 68);
  }

  #resumeOptionsSelector button.border-red-500:hover {
    border-color: rgb(239 68 68);
    background-color: rgba(239, 68, 68, 0.05);
  }

  .question-card {
    border: 1px solid #e5e7eb;
    border-radius: 1rem;
    padding: 1rem;
    margin-bottom: 1rem;
    background-color: white;
    transition: all 0.3s ease;
  }

  .dark .question-card {
    border-color: rgba(75, 85, 99, 0.4);
    background-color: rgba(31, 41, 55, 0.4);
  }

  .question-card:hover {
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  .dark .question-card:hover {
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.2),
      0 2px 4px -1px rgba(0, 0, 0, 0.12);
  }

  .category-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid #e5e7eb;
  }

  .dark .category-title {
    border-bottom-color: rgba(75, 85, 99, 0.4);
  }

  .feedback-card {
    border-radius: 1rem;
    padding: 1.5rem;
    margin-top: 1.5rem;
    background-color: #f9fafb;
    border: 1px solid #e5e7eb;
  }

  .dark .feedback-card {
    background-color: rgba(31, 41, 55, 0.5);
    border-color: rgba(75, 85, 99, 0.4);
  }

  .feedback-section {
    margin-bottom: 1rem;
  }

  .feedback-title {
    font-weight: 600;
    margin-bottom: 0.5rem;
  }

  .feedback-list {
    list-style-type: disc;
    padding-left: 1.5rem;
  }

  .rating-pill {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-weight: 600;
    font-size: 0.875rem;
  }
</style>

<script>
  // Moved imports here to be available for the first script logic
  import { TierManagementService } from "../../lib/tierManagement";
  import { authService } from "../../lib/auth";
  import { PersistentDocumentService } from "../../lib/persistentDocumentService";

  // Define interfaces for Speech Recognition API if not available globally
  // Use 'any' for broader compatibility if specific types cause issues
  declare global {
      interface Window {
          SpeechRecognition: any;
          webkitSpeechRecognition: any;
          closeModal: () => void; // Declare closeModal globally
      }
  }

  interface SpeechRecognitionEvent extends Event {
    readonly resultIndex: number;
    readonly results: SpeechRecognitionResultList;
  }

  interface SpeechRecognitionErrorEvent extends Event {
      readonly error: string;
      readonly message: string;
  }

  interface SpeechRecognition extends EventTarget {
    grammars: any; // Use 'any' for SpeechGrammarList if type is unavailable
    lang: string;
    continuous: boolean;
    interimResults: boolean;
    maxAlternatives: number;
    serviceURI: string;

    start(): void;
    stop(): void;
    abort(): void;

    onaudiostart: ((this: SpeechRecognition, ev: Event) => any) | null;
    onaudioend: ((this: SpeechRecognition, ev: Event) => any) | null;
    onend: ((this: SpeechRecognition, ev: Event) => any) | null;
    onerror: ((this: SpeechRecognition, ev: SpeechRecognitionErrorEvent) => any) | null;
    onnomatch: ((this: SpeechRecognition, ev: SpeechRecognitionEvent) => any) | null;
    onresult: ((this: SpeechRecognition, ev: SpeechRecognitionEvent) => any) | null;
    onsoundstart: ((this: SpeechRecognition, ev: Event) => any) | null;
    onsoundend: ((this: SpeechRecognition, ev: Event) => any) | null;
    onspeechstart: ((this: SpeechRecognition, ev: Event) => any) | null;
    onspeechend: ((this: SpeechRecognition, ev: Event) => any) | null;
    onstart: ((this: SpeechRecognition, ev: Event) => any) | null;
  }

   interface SpeechRecognitionStatic {
        new(): SpeechRecognition;
    }

  let questionsData: any = null;
  let recognition: SpeechRecognition | null = null; // Use the defined interface
  let isRecording = false;
  // Store the text present before recording starts
  let initialTextBeforeRecording = '';

  // Check for browser support for Web Speech API
  const SpeechRecognitionAPI: SpeechRecognitionStatic | undefined = window.SpeechRecognition || window.webkitSpeechRecognition;
  const recognitionSupported = SpeechRecognitionAPI !== undefined;


  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById(
      "interviewPrepForm"
    ) as HTMLFormElement;
    const resultContainer = document.getElementById(
      "questionsResult"
    ) as HTMLDivElement;
    const clearButton = document.getElementById(
      "clearForm"
    ) as HTMLButtonElement;
    const importResumeButton = document.getElementById(
      "importResumeButton"
    ) as HTMLButtonElement;

    // Check for stored form data
    const storedData = localStorage.getItem("interviewPrepFormData");
    if (storedData) {
      try {
        const parsedData = JSON.parse(storedData);
        (document.getElementById("companyName") as HTMLInputElement).value =
          parsedData.companyName || "";
        (document.getElementById("jobRole") as HTMLInputElement).value =
          parsedData.jobRole || "";
        (
          document.getElementById("resumeContent") as HTMLTextAreaElement
        ).value = parsedData.resumeContent || "";
      } catch (error) {
        console.error("Error parsing stored form data:", error);
      }
    }

    // Event listener for clear button
    clearButton.addEventListener("click", () => {
      // Clear form fields
      form.reset();
      // Clear result container
      resultContainer.innerHTML = "";
      // Clear stored form data
      localStorage.removeItem("interviewPrepFormData");
    });

    // Function to check user's tier access
    async function checkInterviewPrepAccess() {
      try {
        const user = await authService.getCurrentUser();
        if (!user) {
          // Show login modal or redirect to login
          const tierInfoDiv = document.getElementById("tierInfo");
          if (tierInfoDiv) {
            tierInfoDiv.innerHTML = `
                            <div class="mt-6 p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-xl border border-yellow-200 dark:border-yellow-800/30">
                                <div class="flex items-start">
                                    <div class="flex-shrink-0">
                                        <svg class="h-5 w-5 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                                        </svg>
                                    </div>
                                    <div class="ml-3">
                                        <h3 class="text-sm font-medium text-yellow-800 dark:text-yellow-200">Login Required</h3>
                                        <div class="mt-2 text-sm text-yellow-700 dark:text-yellow-300">
                                            <p>Please <a href="/login" class="font-medium underline">login</a> or <a href="/signup" class="font-medium underline">create an account</a> to use the Interview Preparation tool.</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
          }
          return { canAccess: false, userId: null };
        }

        const canAccessInterviewPrep =
          await TierManagementService.checkFeatureAccess(
            user.uid,
            "interviewPrep"
          );

        if (!canAccessInterviewPrep) {
          // Show upgrade message
          const tierInfoDiv = document.getElementById("tierInfo");
          if (tierInfoDiv) {
            tierInfoDiv.innerHTML = `
                            <div class="mt-6 p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-xl border border-yellow-200 dark:border-yellow-800/30">
                                <div class="flex items-start">
                                    <div class="flex-shrink-0">
                                        <svg class="h-5 w-5 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                                        </svg>
                                    </div>
                                    <div class="ml-3">
                                        <h3 class="text-sm font-medium text-yellow-800 dark:text-yellow-200">Premium Feature</h3>
                                        <div class="mt-2 text-sm text-yellow-700 dark:text-yellow-300">
                                            <p>The Interview Preparation tool is available on our premium plans. <a href="/pricing" class="font-medium underline">Upgrade your account</a> to access this feature.</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
          }
          return { canAccess: false, userId: user.uid };
        }

        return { canAccess: true, userId: user.uid };
      } catch (error) {
        console.error("Error checking access:", error);
        return { canAccess: false, userId: null };
      }
    }

    // Check access on page load
    checkInterviewPrepAccess();

    // Handle form submission
    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      // Check tier status before generation
      const { canAccess, userId } = await checkInterviewPrepAccess();
      if (!canAccess) {
        return;
      }

      // Get form values
      const companyName = (
        document.getElementById("companyName") as HTMLInputElement
      ).value;
      const jobRole = (document.getElementById("jobRole") as HTMLInputElement)
        .value;
      const resumeContent = (
        document.getElementById("resumeContent") as HTMLTextAreaElement
      ).value;

      // Validate inputs
      if (!companyName.trim()) {
        (
          document.getElementById("companyName") as HTMLInputElement
        ).classList.add("border-red-500");
        return;
      } else {
        (
          document.getElementById("companyName") as HTMLInputElement
        ).classList.remove("border-red-500");
      }

      if (!jobRole.trim()) {
        (document.getElementById("jobRole") as HTMLInputElement).classList.add(
          "border-red-500"
        );
        return;
      } else {
        (
          document.getElementById("jobRole") as HTMLInputElement
        ).classList.remove("border-red-500");
      }

      // Check if resume content is empty
      if (!resumeContent.trim()) {
        // If the options selector is visible, show an error
        const resumeOptionsSelector = document.getElementById(
          "resumeOptionsSelector"
        );
        const resumeFileAddedUI = document.getElementById("resumeFileAddedUI");

        if (
          resumeOptionsSelector &&
          !resumeOptionsSelector.classList.contains("hidden") &&
          resumeFileAddedUI &&
          resumeFileAddedUI.classList.contains("hidden")
        ) {
          // Show error message
          const errorMessage = document.createElement("div");
          errorMessage.id = "resumeErrorMessage";
          errorMessage.className = "text-red-500 text-sm mt-2";
          errorMessage.textContent =
            "Please select a resume option or enter your resume manually.";

          // Remove any existing error message
          const existingError = document.getElementById("resumeErrorMessage");
          if (existingError) {
            existingError.remove();
          }

          // Add error message after options selector
          resumeOptionsSelector.parentNode?.insertBefore(
            errorMessage,
            resumeOptionsSelector.nextSibling
          );

          // Add error highlighting to the options
          resumeOptionsSelector.querySelectorAll("button").forEach((button) => {
            button.classList.add("border-red-500");
          });
        } else {
          // If manual entry is visible, highlight the textarea
          const resumeContentTextarea = document.getElementById(
            "resumeContent"
          ) as HTMLTextAreaElement;
          resumeContentTextarea.classList.add("border-red-500");
        }
        return;
      } else {
        // Remove error styling
        const resumeContentTextarea = document.getElementById(
          "resumeContent"
        ) as HTMLTextAreaElement;
        resumeContentTextarea.classList.remove("border-red-500");

        // Remove error message if exists
        const errorMessage = document.getElementById("resumeErrorMessage");
        if (errorMessage) {
          errorMessage.remove();
        }

        // Remove error highlighting from options
        const resumeOptionsSelector = document.getElementById(
          "resumeOptionsSelector"
        );
        if (resumeOptionsSelector) {
          resumeOptionsSelector.querySelectorAll("button").forEach((button) => {
            button.classList.remove("border-red-500");
          });
        }
      }

      // Save form data to localStorage
      localStorage.setItem(
        "interviewPrepFormData",
        JSON.stringify({
          companyName,
          jobRole,
          resumeContent,
        })
      );

      // Show loading state
      resultContainer.innerHTML = `
                <div class="animate-pulse space-y-4 p-6 bg-white dark:bg-gray-800/30 rounded-xl border border-gray-200 dark:border-gray-700/50">
                    <div class="h-6 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
                    <div class="space-y-2">
                        <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-5/6"></div>
                        <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
                        <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-4/6"></div>
                    </div>
                    <div class="space-y-2">
                        <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-5/6"></div>
                        <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
                        <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/6"></div>
                    </div>
                </div>
            `;

      try {
        // Track interview prep usage
        if (userId === null) {
          throw new Error("User not authenticated");
        }

        // Make API request
        const response = await fetch(
          "/.netlify/functions/interview-questions",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              companyName,
              jobRole,
              resume: resumeContent,
            }),
          }
        );

        if (!response.ok) {
          throw new Error(`API request failed with status ${response.status}`);
        }

        const data = await response.json();

        // Update usage count only after successful response
        await TierManagementService.trackInterviewPrep(userId);

        // Display the results
        displayQuestions(data);

        // Scroll to results
        resultContainer.scrollIntoView({ behavior: "smooth" });
      } catch (error) {
        console.error("Error generating interview questions:", error);
        resultContainer.innerHTML = `
                    <div class="p-4 bg-red-50 dark:bg-red-900/20 rounded-xl border border-red-200 dark:border-red-800/30">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                                </svg>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm font-medium text-red-800 dark:text-red-200">Error</h3>
                                <div class="mt-2 text-sm text-red-700 dark:text-red-300">
                                    <p>There was an error generating your interview questions. Please try again later.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
      }
    });

    // Function to display questions
    function displayQuestions(data: any) {
      if (!data || !resultContainer) return;

      // Set the questionsData for use in showAnswerSection
      questionsData = data;

      const categoryTitles = {
        companySpecific: "Company Specific",
        roleSpecific: "Role Specific",
        behavioral: "Behavioral",
        technical: "Technical",
      };

      let html = `
                <div class="bg-white dark:bg-gray-800/30 rounded-xl border border-gray-200 dark:border-gray-700/50 p-6">
                    <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 text-left">Interview Questions</h2>
            `;

      Object.keys(data).forEach((category, categoryIndex) => {
        const categoryTitle = categoryTitles[category] || category;
        html += `
          <div class="category mb-6">
            <div
              class="category-header flex justify-between items-center cursor-pointer p-4 bg-gray-50 dark:bg-gray-800/30 rounded-xl"
              data-category="${categoryIndex}"
            >
              <h3 class="text-xl font-semibold text-gray-900 dark:text-white">${categoryTitle}</h3>
              <svg class="category-chevron h-6 w-6 text-gray-500 dark:text-gray-400 transform transition-transform" viewBox="0 0 20 20" fill="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
              </svg>
            </div>
            <div class="category-content ${categoryIndex === 0 ? "" : "hidden"} p-4" data-category="${categoryIndex}">
        `;

        data[category].forEach((item: { question: string; context?: string }, index: number) => {
          html += `
            <div class="question-card p-4 border border-gray-100 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors mb-3">
              <div class="flex justify-between items-start">
                <h4 class="font-medium text-lg text-gray-900 dark:text-white text-left">${index + 1}. ${item.question}</h4>
                <button
                  class="practice-button ml-4 px-3 py-1 bg-black text-white dark:bg-white dark:text-black rounded-full text-sm hover:bg-primary-dark transition-colors flex-shrink-0"
                  data-category="${category}"
                  data-index="${index}"
                >
                  Practice
                </button>
              </div>
              ${item.context ? `<p class="mt-2 text-sm text-gray-600 dark:text-gray-300 text-left">${item.context}</p>` : ""}
            </div>
          `;
        });

        html += `
            </div>
          </div>
        `;
      });

      html += `</div>`;
      resultContainer.innerHTML = html;

      // Add event listeners to category headers for collapsing/expanding
      document.querySelectorAll(".category-header").forEach((header) => {
        header.addEventListener("click", (e) => {
          const categoryIndex = (e.currentTarget as HTMLElement).getAttribute(
            "data-category"
          );
          const content = document.querySelector(
            `.category-content[data-category="${categoryIndex}"]`
          );
          const chevron = (e.currentTarget as HTMLElement).querySelector(
            ".category-chevron"
          );

          if (content && chevron) {
            content.classList.toggle("hidden");

            // Rotate chevron when expanded/collapsed
            if (content.classList.contains("hidden")) {
              chevron.innerHTML =
                '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>';
            } else {
              chevron.innerHTML =
                '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>';
            }
          }
        });
      });

      // Add event listeners to practice buttons
      document.querySelectorAll(".practice-button").forEach((button) => {
        button.addEventListener("click", (e) => {
          const target = e.currentTarget as HTMLButtonElement;
          const category = target.getAttribute("data-category") || "";
          const index = parseInt(target.getAttribute("data-index") || "0", 10);
          showAnswerSection(category, index);
        });
      });
    }

    // --- Voice Input Functions ---
    function setupSpeechRecognition() {
        if (!recognitionSupported || !SpeechRecognitionAPI) {
            console.warn("Speech Recognition not supported by this browser.");
            const voiceBtn = document.getElementById("voiceInputBtn");
            if(voiceBtn) voiceBtn.style.display = 'none'; // Hide button if not supported
            return;
        }

        recognition = new SpeechRecognitionAPI(); // Instantiate using the API reference
        recognition.continuous = true; // Keep listening even after pauses
        recognition.interimResults = true; // Get results while speaking
        recognition.lang = 'en-US'; // Set language

        recognition.onresult = (event: SpeechRecognitionEvent) => {
            let interim_transcript = '';
            let final_transcript_this_session = ''; // Build final transcript *for this session*

            // Iterate from the beginning of results for this recognition instance
            // to reconstruct the full transcript based on final/interim status.
            for (let i = 0; i < event.results.length; ++i) {
                const transcript = event.results[i][0].transcript;
                if (event.results[i].isFinal) {
                    final_transcript_this_session += transcript + ' ';
                } else {
                    // Append all interim parts together
                    interim_transcript += transcript;
                }
            }

            // Update the textarea with the initial text + session's final + current interim
            const answerTextArea = document.getElementById("modalAnswerText") as HTMLTextAreaElement;
            if (answerTextArea) {
                // Trim the final part to avoid double spaces if interim is empty
                // Combine initial text, finalized text from this session, and current interim text
                answerTextArea.value = initialTextBeforeRecording + final_transcript_this_session.trim() + (interim_transcript ? ' ' + interim_transcript : '');
            }
            updateRecordingStatus(`Recording...`);
        };

        recognition.onerror = (event: any) => { // Changed to any
            const error = event.error || 'unknown';
            console.error('Speech recognition error:', error);
            let errorMsg = `Speech recognition error: ${error}`;
             if (error === 'not-allowed' || error === 'service-not-allowed') {
                errorMsg = "Microphone access denied. Please allow microphone access in your browser settings.";
            } else if (error === 'no-speech') {
                errorMsg = "No speech detected. Please try again.";
            } else if (error === 'audio-capture') {
                 errorMsg = "Microphone not found or not working.";
            }
            updateSpeechError(errorMsg);
            stopRecording(); // Ensure recording stops on error
        };

        recognition.onend = () => {
            // Only log if it ends while we expected it to be recording
            if (isRecording) {
                console.log("Recognition ended.");
                 // If it ended unexpectedly, ensure UI is reset
                 stopRecording(); // Clean up UI if it ended prematurely
            }
        };
    }

    function startRecording() {
        if (!recognitionSupported || !recognition) {
             updateSpeechError("Speech recognition not available.");
             return;
        }
        if (isRecording) return;

        // Store the text currently in the textarea before starting
        initialTextBeforeRecording = (document.getElementById("modalAnswerText") as HTMLTextAreaElement)?.value || '';
        // Add a space if there's text and it doesn't end with one, for separation
        if (initialTextBeforeRecording && !/\s$/.test(initialTextBeforeRecording)) {
            initialTextBeforeRecording += ' ';
        }

        try {
            recognition.start();
            isRecording = true;
            updateVoiceButtonState(true);
            updateRecordingStatus("Recording started...");
            updateSpeechError(""); // Clear previous errors
            console.log('Speech recognition started');
        } catch (e: any) {
            console.error("Error starting recognition:", e);
             let errorMsg = "Could not start recording.";
            if (e.name === 'NotAllowedError') {
                errorMsg = "Microphone access denied. Please allow access.";
            } else if (e.name === 'InvalidStateError') {
                 errorMsg = "Recording already started.";
                 // Force UI update in case state is inconsistent
                 isRecording = true;
                 updateVoiceButtonState(true);
            } else {
                 errorMsg = `Could not start recording: ${e.message || e.name}`;
            }
            updateSpeechError(errorMsg);
            isRecording = false; // Ensure state is correct
            updateVoiceButtonState(false);
        }
    }

    function stopRecording() {
        if (!recognitionSupported || !recognition) return;
        if (!isRecording) return; // Prevent stopping if not recording

        recognition.stop(); // This will trigger onend eventually
        isRecording = false; // Set state immediately
        updateVoiceButtonState(false);
        updateRecordingStatus("Processing final result..."); // Indicate processing
        console.log('Speech recognition stopping...');

        // The final result processing happens in onresult and onend.
        // Add a slight delay to update status after processing might complete.
        setTimeout(() => {
             const currentStatus = document.getElementById('recordingStatus')?.textContent || '';
             // Only update if it's still showing "Processing"
             if (currentStatus.includes("Processing")) {
                updateRecordingStatus("Recording stopped.");
             }
        }, 500); // Adjust delay if needed
    }

    function toggleRecording() {
        if (isRecording) {
            stopRecording();
        } else {
            startRecording();
        }
    }

     function updateVoiceButtonState(recording: boolean) {
        const micIcon = document.getElementById('micIcon');
        const stopIcon = document.getElementById('stopIcon');
        const voiceBtn = document.getElementById('voiceInputBtn');

        if (micIcon && stopIcon && voiceBtn) {
            micIcon.classList.toggle('hidden', recording);
            stopIcon.classList.toggle('hidden', !recording);
            voiceBtn.title = recording ? "Stop Recording" : "Record Answer";
        }
    }

    function updateRecordingStatus(message: string) {
        const statusEl = document.getElementById('recordingStatus');
        if (statusEl) statusEl.textContent = message;
    }

     function updateSpeechError(message: string) {
        const errorEl = document.getElementById('speechError');
        if (errorEl) errorEl.textContent = message;
    }

    // --- End Voice Input Functions ---


    // Function to show answer section
    function showAnswerSection(category: string, index: number) {
      if (!questionsData) return;

      const modal = document.getElementById("answerModal");
      const questionText = document.getElementById("modalQuestion");
      const contextText = document.getElementById("modalContext");
      const answerInput = document.getElementById("modalAnswerText") as HTMLTextAreaElement | null;
      const feedbackContainer = document.getElementById("modalFeedbackContainer");
      const voiceInputBtn = document.getElementById("voiceInputBtn") as HTMLButtonElement | null; // Cast for style access
      const modalSubmitBtn = document.getElementById("modalSubmitBtn") as HTMLButtonElement | null; // Cast for disabled access
      const submitBtnText = document.getElementById("submitBtnText");
      const submitBtnSpinner = document.getElementById("submitBtnSpinner");


      if (!modal || !questionText || !contextText || !answerInput || !feedbackContainer || !voiceInputBtn || !modalSubmitBtn || !submitBtnText || !submitBtnSpinner) {
        console.error("Could not find required modal elements");
        return;
      }

      // Clear previous content & state
      questionText.textContent = "";
      contextText.textContent = "";
      answerInput.value = "";
      answerInput.classList.remove("border-red-500"); // Clear validation error
      feedbackContainer.innerHTML = `
         <div class="p-6 bg-gray-50 dark:bg-gray-800/50 rounded-xl border border-gray-100 dark:border-gray-700/50 h-full flex items-center justify-center">
           <p class="text-gray-500 dark:text-gray-400 text-center">Submit your answer to get feedback.</p>
         </div>`; // Reset feedback
      updateSpeechError(""); // Clear speech errors
      updateRecordingStatus(""); // Clear recording status
      if (isRecording) stopRecording(); // Stop recording if active

      // Reset submit button state
      submitBtnText.textContent = "Submit for Review";
      submitBtnSpinner.classList.add('hidden');
      modalSubmitBtn.disabled = false;


      // Populate question details
      const question = questionsData[category][index];
      questionText.textContent = question.question;
      contextText.textContent = question.context || "No additional context provided.";

      // Setup voice input
      if (recognitionSupported && SpeechRecognitionAPI) { // Check API exists too
          voiceInputBtn.style.display = 'block';
          voiceInputBtn.onclick = toggleRecording; // Use existing toggle function
          setupSpeechRecognition(); // Re-initialize recognition instance for this modal session
      } else {
          voiceInputBtn.style.display = 'none';
          updateSpeechError("Voice input not supported in this browser.");
      }


      // --- Detach previous listener before adding a new one ---
      // Clone the button and replace it to remove all old listeners
      const newSubmitBtn = modalSubmitBtn.cloneNode(true) as HTMLButtonElement;
      modalSubmitBtn.parentNode?.replaceChild(newSubmitBtn, modalSubmitBtn);
      // Re-assign references after cloning
      const currentSubmitBtn = document.getElementById("modalSubmitBtn") as HTMLButtonElement; // Re-get reference
      const currentSubmitBtnText = document.getElementById("submitBtnText") as HTMLSpanElement; // Re-get reference
      const currentSubmitBtnSpinner = document.getElementById("submitBtnSpinner") as SVGElement | null; // Re-get reference, allow null
      // --- End Detach ---


      // Set up submit handler for the new button
      currentSubmitBtn.addEventListener("click", async (event: MouseEvent) => {
          event.preventDefault();
          if (isRecording) stopRecording(); // Stop recording before submitting

          const currentAnswerInput = document.getElementById("modalAnswerText") as HTMLTextAreaElement | null; // Get fresh reference
          if (!currentAnswerInput) return;

          const answerText = currentAnswerInput.value.trim();
          if (!answerText) {
            currentAnswerInput.classList.add("border-red-500");
            updateSpeechError("Please provide an answer before submitting."); // Use speech error field for consistency
            return;
          } else {
             currentAnswerInput.classList.remove("border-red-500");
             updateSpeechError(""); // Clear error
          }

          // Show loading state on button
          currentSubmitBtnText.textContent = "Reviewing...";
          currentSubmitBtnSpinner?.classList.remove('hidden'); // Use optional chaining
          currentSubmitBtn.disabled = true;


          // Show loading state in feedback area
          const currentFeedbackContainer = document.getElementById("modalFeedbackContainer"); // Get fresh reference
          if (currentFeedbackContainer) {
            currentFeedbackContainer.innerHTML = `
              <div class="animate-pulse space-y-4 p-6 bg-gray-50 dark:bg-gray-800/50 rounded-xl border border-gray-100 dark:border-gray-700/50 h-full">
                <div class="h-5 bg-gray-200 dark:bg-gray-700 rounded w-1/3"></div>
                <div class="space-y-2">
                  <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
                  <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-5/6"></div>
                </div>
                 <div class="h-5 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mt-4"></div>
                 <div class="space-y-2">
                  <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
                  <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
                  <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-4/6"></div>
                </div>
              </div>
            `;
          }

          // Call review-answer API
          try {
            const response = await fetch("/.netlify/functions/review-answer", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                question: question.question,
                answer: answerText,
              }),
            });

            if (!response.ok) {
              const errorData = await response.json().catch(() => ({})); // Try to parse error
              throw new Error(errorData.error || `API request failed with status ${response.status}`);
            }

            const result = await response.json();

            if (currentFeedbackContainer) {
              // Format the feedback from the response
              const feedbackHTML = `
                <div class="space-y-4 text-sm">
                  ${result.weaknesses && result.weaknesses.length > 0 ? `
                  <div class="p-3 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-100 dark:border-red-800/30">
                    <h4 class="font-semibold text-red-700 dark:text-red-300 mb-1.5 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" /></svg>
                      Areas for Improvement
                    </h4>
                    <ul class="list-disc pl-6 space-y-1 text-gray-700 dark:text-gray-300 text-left">
                      ${result.weaknesses.map((w: string) => `<li>${w}</li>`).join("")}
                    </ul>
                  </div>` : ""}

                  ${result.improvements && result.improvements.length > 0 ? `
                  <div class="p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-100 dark:border-blue-800/30">
                    <h4 class="font-semibold text-blue-700 dark:text-blue-300 mb-1.5 flex items-center">
                     <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" /></svg>
                      Suggestions
                    </h4>
                    <ul class="list-disc pl-6 space-y-1 text-gray-700 dark:text-gray-300 text-left">
                      ${result.improvements.map((i: string) => `<li>${i}</li>`).join("")}
                    </ul>
                  </div>` : ""}

                  ${result.alternativeApproach ? `
                  <div class="p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg border border-purple-100 dark:border-purple-800/30">
                    <h4 class="font-semibold text-purple-700 dark:text-purple-300 mb-1.5 flex items-center">
                     <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" viewBox="0 0 20 20" fill="currentColor"><path d="M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 011.087-.225l1.884.942a1 1 0 00.946 0l1.884-.942a.999.999 0 011.087.225l2.655 1.328a1 1 0 000-1.84l-7-3zM3 14a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" /></svg>
                      Alternative Approach
                    </h4>
                    <p class="text-gray-700 dark:text-gray-300 text-left"">${result.alternativeApproach}</p>
                  </div>` : ""}

                   ${result.suggestedAnswer ? `
                  <div class="p-3 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg border border-indigo-100 dark:border-indigo-800/30">
                    <h4 class="font-semibold text-indigo-700 dark:text-indigo-300 mb-1.5 flex items-center">
                     <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" /></svg>
                      Example Answer
                    </h4>
                    <p class="text-gray-700 dark:text-gray-300 text-left"">${result.suggestedAnswer}</p>
                  </div>` : ""}

                  ${result.keyTakeaway ? `
                  <div class="p-3 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-100 dark:border-green-800/30">
                    <h4 class="font-semibold text-green-700 dark:text-green-300 mb-1.5 flex items-center">
                     <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" /></svg>
                      Key Takeaway
                    </h4>
                    <p class="text-gray-700 dark:text-gray-300 font-medium text-left"">${result.keyTakeaway}</p>
                  </div>` : ""}
                </div>
              `;

              currentFeedbackContainer.innerHTML = `
                <div class="p-4 bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700">
                  <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Feedback</h3>
                  ${feedbackHTML}
                </div>
              `;
              // Hide the submit button after successfully displaying feedback
              currentSubmitBtn.classList.add('hidden');
            }
          } catch (error) {
            console.error("API Error:", error);
            if (currentFeedbackContainer) {
              currentFeedbackContainer.innerHTML = `
                <div class="p-4 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-100 dark:border-red-800/30">
                  <h4 class="font-semibold text-red-700 dark:text-red-300 mb-1.5">Error</h4>
                  <p class="text-sm text-red-600 dark:text-red-400">${error instanceof Error ? error.message : "Failed to get feedback. Please try again."}</p>
                </div>
              `;
            }
          } finally {
             // Reset button state
             currentSubmitBtnText.textContent = "Submit for Review";
             currentSubmitBtnSpinner?.classList.add('hidden'); // Use optional chaining
             currentSubmitBtn.disabled = false;
          }
        });

        // Show modal
        modal.classList.remove("hidden");
        answerInput.focus(); // Focus textarea when modal opens
    }

    // Global closeModal function needs to be attached to window
    window.closeModal = () => {
      const modal = document.getElementById("answerModal");
      if (modal) {
        modal.classList.add("hidden");
        if (isRecording) {
            stopRecording(); // Ensure recording stops if modal is closed
        }
        // Clear fields & state
        const answerTextArea = document.getElementById("modalAnswerText") as HTMLTextAreaElement | null;
        if (answerTextArea) answerTextArea.value = "";

        const feedbackContainer = document.getElementById("modalFeedbackContainer");
        if(feedbackContainer) feedbackContainer.innerHTML = `
         <div class="p-6 bg-gray-50 dark:bg-gray-800/50 rounded-xl border border-gray-100 dark:border-gray-700/50 h-full flex items-center justify-center">
           <p class="text-gray-500 dark:text-gray-400 text-left">Submit your answer to get feedback.</p>
         </div>`;
         updateSpeechError("");
         updateRecordingStatus("");
      }
    }
  });


</script>

<script>
  // Re-import necessary services for this script block's scope
  import { authService } from "../../lib/auth";
  import { PersistentDocumentService } from "../../lib/persistentDocumentService";

  // This script block handles resume upload/import/manual entry
  document.addEventListener("DOMContentLoaded", () => {
    const resumeFileUploadButton = document.getElementById(
      "resumeFileUploadButton"
    );
    const resumeFileInput = document.getElementById(
      "resumeFileInput"
    ) as HTMLInputElement;
    const resumeContentTextarea = document.getElementById(
      "resumeContent"
    ) as HTMLTextAreaElement;
    const resumeFileAddedUI = document.getElementById("resumeFileAddedUI");
    const removeResumeFileButton = document.getElementById("removeResumeFile"); // Note: This ID doesn't seem to exist in the HTML

    // Add file upload button event listener
    resumeFileUploadButton?.addEventListener("click", async (e) => {
      // Prevent any form submission
      e.preventDefault();
      e.stopPropagation();

      // Trigger file input click
      resumeFileInput?.click();

      return false;
    });

    // Handle file selection
    resumeFileInput?.addEventListener("change", async (event) => {
      // Prevent default to avoid form submission
      event.preventDefault();

      const file = (event.target as HTMLInputElement).files?.[0];

      if (!file) {
        console.error("No file selected");
        return;
      }

      // Supported file types
      const supportedTypes = [
        "application/pdf",
        "application/msword",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "text/plain",
        "text/rtf",
        "application/rtf",
      ];

      if (!supportedTypes.includes(file.type)) {
        alert(
          "Unsupported file type. Please upload a PDF, DOC, DOCX, TXT, or RTF file."
        );
        return;
      }

      // Convert file to base64
      const fileReader = new FileReader();
      fileReader.readAsDataURL(file);

      fileReader.onload = async () => {
        const base64File = fileReader.result as string;
        const base64Data = base64File.split(",")[1]; // Remove data URL prefix

        try {
          // Send to server-side API
          const response = await fetch("/.netlify/functions/upload-resume", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              fileBase64: base64Data,
              fileName: file.name,
              fileType: file.type,
            }),
          });

          // Parse response
          const result = await response.json();

          // Check for error in response
          if (!response.ok) {
            throw new Error(result.error || "Unknown server error");
          }

          if (result.success) {
            // Populate resume content textarea
            const resumeContent = result.data.text;
            resumeContentTextarea.value = resumeContent;

            // Optional: Trigger any validation or UI updates
            resumeContentTextarea.dispatchEvent(new Event("input"));

            // Show the file added UI and hide other elements
            const currentResumeFileAddedUI = // Use different variable name to avoid conflict
              document.getElementById("resumeFileAddedUI");
            const resumeOptionsSelector = document.getElementById(
              "resumeOptionsSelector"
            );
            const manualEntryContainer = document.getElementById(
              "manualEntryContainer"
            );

            if (currentResumeFileAddedUI && resumeOptionsSelector) {
              currentResumeFileAddedUI.classList.remove("hidden");
              resumeOptionsSelector.classList.add("hidden");
              manualEntryContainer?.classList.add("hidden");

              const resumeFileName = document.getElementById("resumeFileName");
              if (resumeFileName) {
                resumeFileName.textContent = `${file.name}`;
              }
            }
          } else {
            // Handle error response
            console.error("Resume upload failed:", result);
            alert(
              `Failed to upload resume: ${result.error || "Unknown error"}`
            );
          }
        } catch (error) {
          // Network or parsing errors
          console.error("Resume upload error:", error);
          alert(
            `Error uploading resume: ${error instanceof Error ? error.message : "Unknown error"}`
          );
        }
      };
    });

    // Add event listener for changing the resume source
    const changeResumeSourceButton =
      document.getElementById("changeResumeSource");
    changeResumeSourceButton?.addEventListener("click", () => {
      // Clear the textarea
      resumeContentTextarea.value = "";

      // Hide the file added UI and show options
      const currentResumeFileAddedUI = document.getElementById("resumeFileAddedUI"); // Use different variable name
      currentResumeFileAddedUI?.classList.add("hidden");
      const resumeOptionsSelector = document.getElementById(
        "resumeOptionsSelector"
      );
      resumeOptionsSelector?.classList.remove("hidden");

      // Reset the file input
      resumeFileInput.value = "";
    });

    // Add event listener for the Enter Manually button
    const enterManuallyButton = document.getElementById("enterManuallyButton");
    enterManuallyButton?.addEventListener("click", () => {
      const resumeOptionsSelector = document.getElementById(
        "resumeOptionsSelector"
      );
      const manualEntryContainer = document.getElementById(
        "manualEntryContainer"
      );

      if (resumeOptionsSelector && manualEntryContainer) {
        resumeOptionsSelector.classList.add("hidden");
        manualEntryContainer.classList.remove("hidden");
        resumeContentTextarea.focus();
      }
    });

    // Add event listener for the Cancel Manual Entry button
    const cancelManualEntryButton =
      document.getElementById("cancelManualEntry");
    cancelManualEntryButton?.addEventListener("click", () => {
      const resumeOptionsSelector = document.getElementById(
        "resumeOptionsSelector"
      );
      const manualEntryContainer = document.getElementById(
        "manualEntryContainer"
      );

      if (resumeOptionsSelector && manualEntryContainer) {
        manualEntryContainer.classList.add("hidden");
        resumeOptionsSelector.classList.remove("hidden");
      }
    });
  });

  document.addEventListener("DOMContentLoaded", () => {
    const importResumeButton = document.getElementById(
      "importResumeButton"
    ) as HTMLButtonElement;
    const resumeContentTextarea = document.getElementById( // Get reference here
      "resumeContent"
    ) as HTMLTextAreaElement;

    // Handle resume import
    importResumeButton?.addEventListener("click", async () => {
      try {
        const user = await authService.getCurrentUser();
        if (!user) {
          // Redirect to login or show login modal
          return;
        }

        // Create a modal dynamically
        const modal = document.createElement("div");
        modal.innerHTML = `
                    <div class="p-4 fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
                        <div class="bg-white dark:bg-gray-900 rounded-2xl p-6 max-w-md w-full max-h-[80vh] overflow-y-auto">
                            <div class="flex justify-between items-center mb-4">
                                <h2 class="text-2xl font-bold text-gray-900 dark:text-white">
                                    Resume Manager
                                </h2>
                                <button id="closeImportModal" class="text-gray-500 hover:text-gray-900 dark:hover:text-white">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>

                            <div class="mb-4">
                                <button
                                    id="addNewResumeButton"
                                    class="w-full inline-flex items-center justify-center px-4 py-3
                                    bg-black text-white
                                    rounded-xl
                                    hover:bg-primary-600
                                    transition-all duration-300
                                    focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary focus:ring-offset-2"
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                    </svg>
                                    Create New Resume
                                </button>
                            </div>

                            <div class="border-t border-gray-200 dark:border-gray-700 my-4"></div>

                            <div id="resumeList" class="space-y-3">
                                <!-- Existing Resumes will be dynamically populated here -->
                            </div>
                        </div>
                    </div>
                `;

        document.body.appendChild(modal);

        const closeModalButton = modal.querySelector("#closeImportModal");
        const addNewResumeButton = modal.querySelector("#addNewResumeButton");
        const resumeListContainer = modal.querySelector("#resumeList");
        // const resumeContentTextarea = document.getElementById( // Already defined above
        //   "resumeContent"
        // ) as HTMLTextAreaElement;

        closeModalButton?.addEventListener("click", () => {
          document.body.removeChild(modal);
        });

        // Add new resume functionality
        addNewResumeButton?.addEventListener("click", () => {
          // Navigate to Dashboard's Resume Manager section
          window.location.href = "/dashboard#addResumeBtn";
        });

        // Fetch and display resumes
        const resumes = await PersistentDocumentService.loadAllResumes();

        if (resumes.length === 0) {
          resumeListContainer!.innerHTML = `
                        <div class="text-center text-gray-500 dark:text-gray-400 py-6">
                            <p>No resumes found. Create a new resume to get started.</p>
                        </div>
                    `;
          return;
        }

        // Populate resume list
        resumeListContainer!.innerHTML = resumes
          .map(
            (resume, index) => `
                    <div class="bg-gray-100 dark:bg-gray-800 rounded-xl p-4 hover:bg-gray-200 dark:hover:bg-gray-700 cursor-pointer transition-colors resume-item"
                         data-resume-index="${index}">
                        <div class="flex justify-between items-center">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                                    ${resume.name || `Resume ${index + 1}`}
                                </h3>
                                <p class="text-sm text-gray-500 dark:text-gray-400">
                                    Last updated: ${new Date(resume.lastUpdated).toLocaleDateString()}
                                </p>
                            </div>
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                            </svg>
                        </div>
                    </div>
                `
          )
          .join("");

        // Add event listeners to resume items
        document.querySelectorAll(".resume-item").forEach((item, index) => {
          item.addEventListener("click", () => {
            const resumeIndex = parseInt(
              item.getAttribute("data-resume-index") || "0",
              10
            );
            const selectedResume = resumes[resumeIndex];

            if (selectedResume && selectedResume.content) {
              resumeContentTextarea.value = selectedResume.content;
              document.body.removeChild(modal);

              // Show the file added UI and hide other elements
              const resumeFileAddedUI =
                document.getElementById("resumeFileAddedUI");
              const resumeOptionsSelector = document.getElementById(
                "resumeOptionsSelector"
              );
              const manualEntryContainer = document.getElementById(
                "manualEntryContainer"
              );

              if (resumeFileAddedUI && resumeOptionsSelector) {
                resumeFileAddedUI.classList.remove("hidden");
                resumeOptionsSelector.classList.add("hidden");
                manualEntryContainer?.classList.add("hidden");

                const resumeFileName =
                  document.getElementById("resumeFileName");
                if (resumeFileName) {
                  resumeFileName.textContent = `Resume: ${selectedResume.name || "Selected Resume"}`;
                }
              }
            }
          });
        });
      } catch (error) {
        console.error("Error importing resume:", error);
        // Show user-friendly error message
        const errorModal = document.createElement("div");
        errorModal.innerHTML = `
                    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4">
                        <div class="bg-white dark:bg-gray-900 rounded-2xl p-6 max-w-md w-full">
                            <div class="flex justify-between items-center mb-4">
                                <h2 class="text-xl font-bold text-red-600 dark:text-red-400">Error</h2>
                                <button id="closeErrorModal" class="text-gray-500 hover:text-gray-900 dark:hover:text-white">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>
                            <p class="text-gray-700 dark:text-gray-300">Failed to load resumes. Please try again later.</p>
                            <div class="mt-6 flex justify-end">
                                <button id="closeErrorModalBtn" class="px-4 py-2 bg-gray-200 dark:bg-gray-700 rounded-lg text-gray-800 dark:text-white hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors">
                                    Close
                                </button>
                            </div>
                        </div>
                    </div>
                `;
        document.body.appendChild(errorModal);

        const closeErrorModalButton =
          errorModal.querySelector("#closeErrorModal");
        const closeErrorModalBtn = errorModal.querySelector(
          "#closeErrorModalBtn"
        );

        closeErrorModalButton?.addEventListener("click", () => {
          document.body.removeChild(errorModal);
        });

        closeErrorModalBtn?.addEventListener("click", () => {
          document.body.removeChild(errorModal);
        });
      }
    });
  });
</script>
