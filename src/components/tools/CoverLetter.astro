---
interface CoverLetterTemplate {
    id: string;
    name: string;
    description: string;
    recommendedFor: string;
    color: string;
    promptModifier: string;
}

// Extend Window interface to include custom property
declare global {
    interface Window {
        __coverLetterScriptInitialized?: boolean;
    }
}

const coverLetterTemplates: CoverLetterTemplate[] = [
    { 
        id: 'professional', 
        name: 'Professional', 
        description: 'Formal and structured template for corporate roles',
        recommendedFor: 'Corporate Positions',
        color: 'indigo',
        promptModifier: "Write in a formal, professional tone with a focus on corporate achievements and structured language. Use precise, business-oriented vocabulary."
    },
    { 
        id: 'creative', 
        name: 'Creative', 
        description: 'Innovative template for creative industries',
        recommendedFor: 'Design, Marketing, Media Roles',
        color: 'emerald',
        promptModifier: "Write with a creative, engaging tone that highlights innovative thinking and unique personal brand. Use storytelling and vibrant language."
    },
    { 
        id: 'startup', 
        name: 'Startup', 
        description: 'Entrepreneurial template for tech and startup roles',
        recommendedFor: 'Tech Startups, Entrepreneurial Positions',
        color: 'orange',
        promptModifier: "Write with an entrepreneurial spirit, emphasizing adaptability, innovation, and passion for solving complex problems. Use dynamic, forward-thinking language."
    }
];

const templateData = JSON.stringify(coverLetterTemplates);
---

<div class="relative py-16 w-full">
    <div aria-hidden="true" class="absolute inset-0 grid grid-cols-2 -space-x-52 opacity-40 dark:opacity-20">
        <div class="blur-[106px] h-56 bg-gradient-to-br from-primary to-purple-400 dark:from-blue-700 dark:to-indigo-600"></div>
        <div class="blur-[106px] h-32 bg-gradient-to-r from-cyan-400 to-sky-300 dark:to-indigo-600 dark:from-emerald-500"></div>
    </div>
    <div class="relative w-full">
        <div class="container mx-auto px-3 md:px-6 lg:px-8 max-w-6xl">
            <div class="w-full mx-auto">
                <form id="coverLetterForm" class="w-full space-y-6 sm:space-y-8 bg-white dark:bg-transparent rounded-2xl p-6 sm:p-8 
                    shadow-lg border-gray-200 dark:border-gray-700/70 
                    transition-all duration-300 ease-in-out hover:shadow-xl">
                    <!-- Job Description -->
                    <div class="grid grid-cols-1 gap-3 sm:gap-6">
                        <div class="space-y-1.5 sm:space-y-2">
                            <label 
                                for="jobDescription" 
                                class="block text-sm sm:text-base font-medium text-gray-900 dark:text-white text-left"
                            >
                                Job Description <span class="text-red-600">*</span>
                            </label>
                            <textarea
                                id="jobDescription"
                                placeholder="Paste the complete job description here."
                                rows="6"
                                class="w-full p-2.5 sm:p-3 border-2 border-gray-300 dark:border-gray-700/70 rounded-xl 
                                bg-white/10 dark:bg-gray-800/20 
                                focus:ring-2 focus:ring-primary/30 focus:border-primary 
                                text-gray-900 dark:text-white 
                                transition-all duration-300
                                placeholder:text-gray-400 placeholder:text-md
                                hover:bg-white/20 dark:hover:bg-gray-800/30
                                text-md sm:text-base
                                min-h-[120px] sm:min-h-[150px]"
                                required
                            ></textarea>
                            <div class="validation-error text-red-500 text-sm mt-1"></div>
                        </div>
                    </div>

                    <!-- Resume Content -->
                    <div class="grid grid-cols-1 gap-3 sm:gap-6">
                        <div class="space-y-1.5 sm:space-y-2">
                            <label class="block text-sm sm:text-base font-medium text-gray-900 dark:text-white text-left">
                                Resume <span class="text-red-600">*</span>
                            </label>
                            
                            <!-- Resume Options Selector -->
                            <div id="resumeOptionsSelector" class="flex flex-col sm:flex-row gap-3 mt-2">
                                <button
                                    type="button"
                                    id="resumeFileUploadButton"
                                    class="flex-1 py-4 px-4 border-2 border-gray-300 dark:border-gray-700 rounded-xl
                                    bg-white/10 dark:bg-gray-800/20 hover:bg-white/20 dark:hover:bg-gray-800/30
                                    transition-all duration-300 text-center group"
                                >
                                    <div class="flex flex-col items-center justify-center space-y-2">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7 text-primary group-hover:text-primary-dark transition-colors duration-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                        </svg>
                                        <span class="block font-medium text-gray-900 dark:text-white">Upload File</span>
                                        <span class="text-xs text-gray-500 dark:text-gray-400">PDF, DOCX, TXT</span>
                                    </div>
                                </button>
                                
                                <button
                                    type="button"
                                    id="importResumeButton"
                                    class="flex-1 py-4 px-4 border-2 border-gray-300 dark:border-gray-700 rounded-xl
                                    bg-white/10 dark:bg-gray-800/20 hover:bg-white/20 dark:hover:bg-gray-800/30
                                    transition-all duration-300 text-center group"
                                >
                                    <div class="flex flex-col items-center justify-center space-y-2">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7 text-primary group-hover:text-primary-dark transition-colors duration-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
                                        </svg>
                                        <span class="block font-medium text-gray-900 dark:text-white">Resume Manager</span>
                                        <span class="text-xs text-gray-500 dark:text-gray-400">Select from saved resumes</span>
                                    </div>
                                </button>
                                
                                <button
                                    type="button"
                                    id="enterManuallyButton"
                                    class="flex-1 py-4 px-4 border-2 border-gray-300 dark:border-gray-700 rounded-xl
                                    bg-white/10 dark:bg-gray-800/20 hover:bg-white/20 dark:hover:bg-gray-800/30
                                    transition-all duration-300 text-center group"
                                >
                                    <div class="flex flex-col items-center justify-center space-y-2">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7 text-primary group-hover:text-primary-dark transition-colors duration-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 0L11.828 15H9v-2.828l8.586-8.586z" />
                                        </svg>
                                        <span class="block font-medium text-gray-900 dark:text-white">Enter Manually</span>
                                        <span class="text-xs text-gray-500 dark:text-gray-400">Type or paste your content</span>
                                    </div>
                                </button>
                            </div>
                            
                            <!-- Manual Entry Container -->
                            <div id="manualEntryContainer" class="hidden space-y-2">
                                <div class="flex justify-between items-center">
                                    <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300">Manual Entry</h4>
                                    <button type="button" id="cancelManualEntry" class="text-xs text-gray-500 hover:text-gray-700 dark:hover:text-gray-300">
                                        Cancel
                                    </button>
                                </div>
                                <textarea
                                    id="resumeContent"
                                    placeholder="Paste your current resume content here."
                                    rows="6"
                                    class="w-full p-2.5 sm:p-3 border-2 border-gray-300 dark:border-gray-700/70 rounded-xl 
                                    bg-white/10 dark:bg-gray-800/20 
                                    focus:ring-2 focus:ring-primary/30 focus:border-primary 
                                    text-gray-900 dark:text-white 
                                    transition-all duration-300
                                    placeholder:text-gray-400 placeholder:text-md
                                    hover:bg-white/20 dark:hover:bg-gray-800/30
                                    text-md sm:text-base
                                    min-h-[120px] sm:min-h-[150px]"
                                ></textarea>
                                <div class="validation-error text-red-500 text-sm mt-1"></div>
                            </div>
                            
                            <!-- File Added UI -->
                            <div id="resumeFileAddedUI" class="hidden">
                                <div class="py-3 px-4 border-2 border-gray-300 dark:border-gray-700 rounded-xl
                                        bg-white/10 dark:bg-gray-800/20 transition-all duration-300">
                                    <div class="flex items-center justify-between">
                                        <div class="flex items-center space-x-3">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                            </svg>
                                            <div>
                                                <div class="text-sm font-medium text-gray-900 dark:text-white">Resume Added</div>
                                                <div id="resumeFileName" class="text-xs text-gray-500">Document.pdf</div>
                                            </div>
                                        </div>
                                        <button 
                                            type="button" 
                                            id="changeResumeSource" 
                                            class="text-xs bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-full px-3 py-1 transition-colors duration-200"
                                        >
                                            Change
                                        </button>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Hidden file input -->
                            <input 
                                type="file" 
                                id="resumeFileInput" 
                                class="hidden"
                                accept=".pdf,.doc,.docx,.txt,.rtf"
                            />
                        </div>
                    </div>

                    <!-- Custom Instructions -->
                    <div class="grid grid-cols-1 gap-3 sm:gap-6">
                        <div class="space-y-1.5 sm:space-y-2">
                            <label 
                                for="customInstructions" 
                                class="block text-sm sm:text-base font-medium text-gray-900 dark:text-white text-left"
                            >
                                Custom Instructions <span class="text-xs sm:text-sm text-gray-500 dark:text-gray-400 ml-2">(Optional)</span>
                            </label>
                            <textarea
                                id="customInstructions"
                                placeholder="Optional instructions to refine cover letter." 
                                rows="3"
                                class="w-full p-2.5 sm:p-3 border-2 border-gray-300 dark:border-gray-700 rounded-xl 
                                bg-white/10 dark:bg-gray-800/20 
                                focus:ring-2 focus:ring-primary/30 focus:border-primary 
                                text-gray-900 dark:text-white 
                                transition-all duration-300
                                placeholder:text-gray-400 placeholder:text-md
                                hover:bg-white/20 dark:hover:bg-gray-800/30
                                text-md sm:text-base
                                min-h-[80px] sm:min-h-[100px]"
                            ></textarea>
                        </div>
                    </div>

                    <!-- Template Selection -->
                    <div class="space-y-4">
                        <h3 class="text-lg sm:text-xl font-medium text-gray-900 dark:text-white">Choose Template</h3>
                        <div class="grid grid-cols-2 sm:grid-cols-3 gap-3">
                            {coverLetterTemplates.map((template, index) => (
                                <div 
                                    class="relative group cursor-pointer"
                                >
                                    <input 
                                        type="radio" 
                                        id={`template-${template.id}`} 
                                        name="template" 
                                        value={template.id} 
                                        class="hidden peer" 
                                        required
                                        checked={index === 0}
                                    />
                                    <label 
                                        for={`template-${template.id}`} 
                                        class="block p-3 border-2 border-gray-300 dark:border-gray-700 rounded-xl 
                                        bg-white/10 dark:bg-gray-800/20 
                                        hover:bg-white/20 dark:hover:bg-gray-800/30
                                        peer-checked:border-primary peer-checked:ring-2 peer-checked:ring-primary/30
                                        transition-all duration-300 
                                        text-center space-y-2"
                                    >
                                        <span class="block text-sm font-semibold text-gray-900 dark:text-white">
                                            {template.name}
                                        </span>
                                        <span class="block text-xs text-gray-600 dark:text-gray-400">
                                            {template.description}
                                        </span>
                                    </label>
                                </div>
                            ))}
                        </div>
                    </div>

                    <!-- Generate Button -->
                    <div class="flex flex-col sm:flex-row justify-center space-y-2.5 sm:space-y-0 sm:space-x-4 mt-2 sm:mt-4">
                        <button 
                            type="submit" 
                            class="w-full sm:w-auto inline-flex h-11 sm:h-12 items-center justify-center px-4 sm:px-6 py-2 sm:py-3 
                            text-sm sm:text-base font-semibold 
                            text-white bg-black 
                            dark:text-black dark:bg-white
                            rounded-full 
                            transition-all duration-300 
                            transform hover:scale-105 active:scale-95 
                            focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 
                            dark:focus:ring-offset-gray-900
                            shadow-lg shadow-gray-500/30 hover:shadow-gray-500/40"
                        >
                            <span class="relative z-10">Generate Cover Letter</span>
                            <span class="absolute inset-0 rounded-full opacity-0 group-hover:opacity-10 bg-white transition-opacity duration-300"></span>
                        </button>
                        <button 
                            type="button"
                            id="clearForm"
                            class="w-full sm:w-auto inline-flex h-11 sm:h-12 items-center justify-center px-4 sm:px-6 py-2 sm:py-3 
                            text-sm sm:text-base font-semibold 
                            text-black bg-white 
                            dark:text-gray-900 dark:bg-gray-500
                            border border-gray-300 dark:border-gray-700
                            rounded-full 
                            transition-all duration-300 
                            transform hover:scale-105 active:scale-95 
                            focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 
                            dark:focus:ring-offset-gray-900
                            shadow-lg shadow-gray-500/30 hover:shadow-gray-500/40"
                        >
                            <span class="relative z-10">Clear</span>
                            <span class="absolute inset-0 rounded-full opacity-0 group-hover:opacity-10 bg-white transition-opacity duration-300"></span>
                        </button>
                    </div>
                </form>

                <!-- Existing Modal and other content remains the same -->
            </div>
        </div>
    </div>
</div>

<!-- Modal for Cover Letter Preview -->
<div 
    id="coverLetterModal" 
    class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4 hidden"
>
    <div class="relative w-[95%] md:w-[90%] lg:w-[80%] xl:w-[70%] max-w-4xl max-h-[75vh] sm:max-h-[80vh] bg-white dark:bg-gray-900 rounded-2xl shadow-2xl flex flex-col">
        <div class="flex-1 overflow-y-auto p-4">
            <div class="relative text-center mb-4">
                <button 
                    id="closeModal" 
                    class="absolute right-0 top-0 group p-1.5 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors duration-200"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-500 group-hover:text-gray-900 dark:group-hover:text-white transition-colors duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
                
                <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Cover Letter Generation</h2>
                <p class="text-sm text-gray-600 dark:text-gray-400 mt-2">Your personalized cover letter is being generated</p>
            </div>

            <div id="streamingContent" class="bg-gray-50 dark:bg-gray-800/50 rounded-xl p-4 min-h-[300px] relative">
                <div class="animate-pulse text-center text-gray-500 dark:text-gray-400 space-y-4">
                    <div class="flex justify-center items-center space-x-3">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-primary animate-spin" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                        </svg>
                        <h3 class="text-lg font-semibold">AI Cover Letter Optimization in Progress</h3>
                    </div>
                    <p class="text-sm">
                        Our AI is carefully analyzing your job description and resume to:
                    </p>
                    <ul class="text-xs space-y-2 max-w-md mx-auto text-left">
                        <li class="flex items-center space-x-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <span>Extract key achievements and skills</span>
                        </li>
                        <li class="flex items-center space-x-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <span>Tailor content to job description</span>
                        </li>
                        <li class="flex items-center space-x-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <span>Optimize professional narrative</span>
                        </li>
                    </ul>
                </div>
            </div>

            <div class="mt-4 flex justify-center space-x-4">
                <button 
                    id="downloadButton" 
                    class="inline-flex items-center justify-center px-4 py-2 
                    text-sm font-semibold 
                    text-white bg-black 
                    dark:text-black dark:bg-white
                    rounded-full 
                    transition-all duration-300 
                    transform hover:scale-105 active:scale-95 
                    focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 
                    dark:focus:ring-offset-gray-900"
                >
                    Download Cover Letter
                </button>
                <button 
                    id="copyButton"
                    class="inline-flex items-center justify-center px-4 py-2 
                    text-sm font-semibold 
                    text-black bg-white 
                    border border-gray-300 dark:border-gray-700
                    rounded-full 
                    transition-all duration-300 
                    transform hover:scale-105 active:scale-95 
                    focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
                >
                    Copy to Clipboard
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Upgrade Modal -->
<div 
    id="upgradeModal" 
    class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4 hidden"
>
    <div class="bg-white dark:bg-gray-900 rounded-2xl p-8 max-w-md w-full text-center">
        <h2 class="text-2xl font-bold mb-4 text-gray-900 dark:text-white">Usage Limit Reached</h2>
        <p class="text-gray-600 dark:text-gray-400 mb-6">
            You've reached the maximum number of cover letter generations for your current plan.
        </p>
        <div class="flex justify-center space-x-4">
            <button id="upgradeButton" class="bg-black dark:bg-white text-white dark:text-black px-6 py-2 rounded-full hover:bg-primary-600 transition">
                Upgrade to Pro
            </button>
            <button id="closeUpgradeModal" class="bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white px-6 py-2 rounded-full hover:bg-gray-300 dark:hover:bg-gray-600 transition">
                Close
            </button>
        </div>
    </div>
</div>

<script>
    import { TierManagementService } from '../../lib/tierManagement';
    import { authService } from '../../lib/auth';
    import { PersistentDocumentService } from '../../lib/persistentDocumentService';

    document.addEventListener('DOMContentLoaded', async () => {
        const form = document.getElementById("coverLetterForm");
        const resultContainer = document.getElementById("coverLetterResult");
        const coverLetterContentInput = document.getElementById('resumeContent') as HTMLTextAreaElement;

        // Check for stored job data
        const storedJob = localStorage.getItem('currentJob');
        if (storedJob) {
            const jobData = JSON.parse(storedJob);
            // Pre-fill the job description
            const jobDescriptionInput = document.getElementById('jobDescription') as HTMLTextAreaElement;
            if (jobDescriptionInput) jobDescriptionInput.value = jobData.jobDescription || '';
            // Clear the stored data as it's no longer needed
            localStorage.removeItem('currentJob');
        }

        // Load existing cover letter
        const existingCoverLetter = await PersistentDocumentService.loadDocument('coverLetter');
        if (existingCoverLetter && coverLetterContentInput) {
            coverLetterContentInput.value = existingCoverLetter;
        }

        // Add save functionality to form submission
        form?.addEventListener('submit', async (e) => {
            const coverLetterContentInput = document.getElementById('resumeContent') as HTMLTextAreaElement;
            if (coverLetterContentInput) {
                await PersistentDocumentService.saveDocument(coverLetterContentInput.value, 'coverLetter');
            }
        });

        const modal = document.getElementById('coverLetterModal');

        if (!form || !modal) {
            console.error("Required elements not found");
            return;
        }

        const streamingContent = document.getElementById('streamingContent');
        const closeButton = document.getElementById('closeModal');
        const downloadButton = document.getElementById('downloadButton');
        const copyButton = document.getElementById('copyButton');
        const resumeButton = document.getElementById('resumeButton');

        // Function to play click sound and add visual feedback
        function handleButtonClick(button: HTMLButtonElement) {
            // Play sound
            // Temporary visual feedback
            button.classList.add('ring-2', 'ring-primary', 'ring-offset-2');
            setTimeout(() => {
                button.classList.remove('ring-2', 'ring-primary', 'ring-offset-2');
            }, 300);
        }

        async function checkCoverLetterAccess() {
            try {
                const user = await authService.getCurrentUser();
                if (!user) {
                    // Show login modal or redirect to login
                    const loginModal = document.createElement('div');
                    loginModal.innerHTML = `
                        <div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
                            <div class="bg-white dark:bg-gray-900 rounded-2xl p-8 max-w-md w-full text-center">
                                <h2 class="text-2xl font-bold mb-4 text-gray-900 dark:text-white">Login Required</h2>
                                <p class="text-gray-600 dark:text-gray-400 mb-6">
                                    Please log in to generate a cover letter.
                                </p>
                                <div class="flex justify-center space-x-4">
                                    <button id="loginButton" class="bg-black dark:bg-white text-white dark:text-black px-6 py-2 rounded-full hover:bg-primary-600 transition">
                                        Login
                                    </button>
                                    <button id="closeLoginModal" class="bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white px-6 py-2 rounded-full hover:bg-gray-300 dark:hover:bg-gray-600 transition">
                                        Close
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
                    document.body.appendChild(loginModal);

                    const loginButton = loginModal.querySelector('#loginButton');
                    const closeButton = loginModal.querySelector('#closeLoginModal');

                    loginButton?.addEventListener('click', () => {
                        // Redirect to login page
                        window.location.href = '/login';
                    });

                    closeButton?.addEventListener('click', () => {
                        document.body.removeChild(loginModal);
                    });

                    return { canAccess: false, userId: null };
                }

                // Check feature access
                const hasAccess = await TierManagementService.checkFeatureAccess(user.uid, 'coverLetterGeneration');
                
                if (!hasAccess) {
                    // Show upgrade modal
                    const upgradeModal = document.createElement('div');
                    upgradeModal.innerHTML = `
                        <div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
                            <div class="bg-white dark:bg-gray-900 rounded-2xl p-8 max-w-md w-full text-center">
                                <h2 class="text-2xl font-bold mb-4 text-gray-900 dark:text-white">Usage Limit Reached</h2>
                                <p class="text-gray-600 dark:text-gray-400 mb-6">
                                    You've reached the maximum number of cover letter generations for your current plan.
                                </p>
                                <div class="flex justify-center space-x-4">
                                    <button id="upgradeButton" class="bg-black dark:bg-white text-white dark:text-black px-6 py-2 rounded-full hover:bg-primary-600 transition">
                                        Upgrade to Pro
                                    </button>
                                    <button id="closeUpgradeModal" class="bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white px-6 py-2 rounded-full hover:bg-gray-300 dark:hover:bg-gray-600 transition">
                                        Close
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
                    document.body.appendChild(upgradeModal);

                    const upgradeButton = upgradeModal.querySelector('#upgradeButton');
                    const closeButton = upgradeModal.querySelector('#closeUpgradeModal');

                    upgradeButton?.addEventListener('click', () => {
                        // Redirect to upgrade page
                        window.location.href = '/pricing';
                    });

                    closeButton?.addEventListener('click', () => {
                        document.body.removeChild(upgradeModal);
                    });

                    return { canAccess: false, userId: user.uid };
                }

                return { canAccess: true, userId: user.uid };
            } catch (error) {
                console.error('Error checking cover letter access:', error);
                return { canAccess: false, userId: null };
            }
        }

        form.addEventListener("submit", async (event) => {
            event.preventDefault();

            // Check tier status before generation
            const { canAccess, userId } = await checkCoverLetterAccess();
            
            if (!canAccess || !userId) {
                return; // Stop generation if access is denied
            }

            // Input validation function
            function validateInput(input: HTMLTextAreaElement, minLength: number = 10): boolean {
                const value = input.value.trim();
                const isValid = value.length >= minLength;
                
                // Get or create error message element
                let errorMessageEl = input.nextElementSibling as HTMLElement | null;
                if (!errorMessageEl || !errorMessageEl.classList.contains('validation-error')) {
                    errorMessageEl = document.createElement('div');
                    errorMessageEl.classList.add('validation-error', 'text-red-500', 'text-sm', 'mt-1');
                    input.parentNode?.insertBefore(errorMessageEl, input.nextSibling);
                }

                // Toggle error state and message
                input.classList.toggle("border-red-500", !isValid);
                input.classList.toggle("border-gray-200", isValid);
                
                if (!isValid) {
                    // Customize error message based on input
                    let errorMessage = '';
                    if (input.id === 'jobDescription') {
                        errorMessage = `Job description must be at least ${minLength} characters long.`;
                    } else if (input.id === 'resumeContent') {
                        errorMessage = `Resume content must be at least ${minLength} characters long.`;
                    } else {
                        errorMessage = `Input must be at least ${minLength} characters long.`;
                    }
                    
                    errorMessageEl.textContent = errorMessage;
                    errorMessageEl.style.display = 'block';
                } else {
                    // Hide error message if valid
                    if (errorMessageEl) {
                        errorMessageEl.textContent = '';
                        errorMessageEl.style.display = 'none';
                    }
                }
                
                return isValid;
            }

            // Validate inputs with specific length requirements
            const jobDescription = document.getElementById("jobDescription") as HTMLTextAreaElement;
            const resumeContent = document.getElementById("resumeContent") as HTMLTextAreaElement;

            // Validate all inputs and collect validation results
            const jobDescriptionValid = validateInput(jobDescription, 20);
            
            // Check if resume content is empty
            const resumeOptionsSelector = document.getElementById("resumeOptionsSelector");
            const resumeFileAddedUI = document.getElementById("resumeFileAddedUI");
            const manualEntryContainer = document.getElementById("manualEntryContainer");
            
            let resumeContentValid = true;
            
            if (resumeContent.value.trim().length < 50) {
                // If the options selector is visible, show an error
                if (resumeOptionsSelector && !resumeOptionsSelector.classList.contains("hidden") && 
                    resumeFileAddedUI && resumeFileAddedUI.classList.contains("hidden")) {
                    // Show error message
                    const errorMessage = document.createElement("div");
                    errorMessage.id = "resumeErrorMessage";
                    errorMessage.className = "text-red-500 text-sm mt-2";
                    errorMessage.textContent = "Please select a resume option or enter your resume manually.";
                    
                    // Remove any existing error message
                    const existingError = document.getElementById("resumeErrorMessage");
                    if (existingError) {
                        existingError.remove();
                    }
                    
                    // Add error message after options selector
                    resumeOptionsSelector.parentNode?.insertBefore(errorMessage, resumeOptionsSelector.nextSibling);
                    
                    // Add error highlighting to the options
                    resumeOptionsSelector.querySelectorAll("button").forEach(button => {
                        button.classList.add("border-red-500");
                    });
                    
                    resumeContentValid = false;
                } else if (manualEntryContainer && !manualEntryContainer.classList.contains("hidden")) {
                    // If manual entry is visible, validate the textarea
                    resumeContentValid = validateInput(resumeContent, 50);
                } else if (resumeFileAddedUI && !resumeFileAddedUI.classList.contains("hidden")) {
                    // If file is added, content should be valid
                    resumeContentValid = true;
                }
            }

            // Check if all validations pass
            if (!jobDescriptionValid || !resumeContentValid) {
                // Optional: Scroll to the first invalid input
                if (!jobDescriptionValid) {
                    jobDescription.scrollIntoView({ behavior: 'smooth', block: 'center' });
                } else {
                    const targetElement = manualEntryContainer && !manualEntryContainer.classList.contains("hidden")
                        ? resumeContent
                        : resumeOptionsSelector;
                    targetElement?.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
                return;
            }

            // Proceed with existing cover letter generation logic
            // Show modal
            modal?.classList.remove('hidden');

            // Ensure streaming content shows loading state
            if (streamingContent) {
                streamingContent.innerHTML = `
                    <div class="animate-pulse text-center text-gray-500 dark:text-gray-400 space-y-4">
                        <div class="flex justify-center items-center space-x-3">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-primary animate-spin" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                            </svg>
                            <h3 class="text-lg font-semibold">AI Cover Letter Optimization in Progress</h3>
                        </div>
                        <p class="text-sm">
                            Our AI is carefully analyzing your job description and resume to:
                        </p>
                        <ul class="text-xs space-y-2 max-w-md mx-auto text-left">
                            <li class="flex items-center space-x-2">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span>Extract key achievements and skills</span>
                            </li>
                            <li class="flex items-center space-x-2">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span>Tailor content to job description</span>
                            </li>
                            <li class="flex items-center space-x-2">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span>Optimize professional narrative</span>
                            </li>
                        </ul>
                    </div>
                `;
            }

            // More robust element selection
            const customInstructions = document.querySelector("#customInstructions") as HTMLTextAreaElement | null;
            const selectedTemplate = (document.querySelector('input[name="template"]:checked') as HTMLInputElement)?.value || 'professional';

            // Validate inputs
            if (!jobDescription || !resumeContent) {
                console.error("Required input fields are missing");
                return;
            }

            let streamingText = "";

            try {
                // Get DeepSeek API key from environment
                const DEEPSEEK_API_KEY = import.meta.env.PUBLIC_DEEPSEEK_API_KEY;
                if (!DEEPSEEK_API_KEY) {
                    throw new Error('DeepSeek API key is not configured');
                }

                // Prepare messages for DeepSeek API
                const messages = [
                    {
                        role: 'system',
                        content: `Generate a professional cover letter based on the following job description and resume. Follow these guidelines:

1. Format:
   - Use plain text without markup or special formatting strictly
   - Standard sections: Greeting, Opening Paragraph, Body Paragraphs, Closing Paragraph
   - Use standard business letter formatting
   - Avoid tables, columns, or complex layouts
   - Do NOT include any explanatory text at the end of the cover letter
   - Return ONLY the cover letter text without any additional commentary

2. Content:
   - Address the letter to the hiring manager (or "Dear Hiring Manager" if name unknown)
   - Tailor the content to match specific job requirements
   - Highlight relevant skills and experiences from the resume
   - Use keywords from the job description
   - Demonstrate enthusiasm and fit for the role
   - Dont lie at all and stick to truth from the resume

3. Style:
   - Maintain professional and engaging language
   - Be specific and results-oriented
   - Show how your skills solve the employer's needs
   - Keep the tone conversational yet professional
   - Limit to one page

4. Template Specifications:
   ${(() => {
     switch(selectedTemplate) {
       case 'professional':
         return `- Tone: Formal and polished
- Language: Corporate and precise
- Structure: Clear, concise paragraphs
- Emphasis: Professional achievements and skills
- Avoid overly casual language or personal anecdotes`;
       
       case 'creative':
         return `- Tone: Engaging and innovative
- Language: Dynamic and passionate
- Structure: More narrative-driven paragraphs
- Emphasis: Unique personal brand and creative problem-solving
- Use storytelling techniques to highlight professional journey`;
       
       case 'startup':
         return `- Tone: Contemporary and forward-thinking
- Language: Tech-savvy and adaptable
- Structure: Concise, impact-driven sections
- Emphasis: Recent achievements, technological skills
- Incorporate industry-specific jargon and current trends`;
       
       default:
         return `- Default to a professional, balanced approach
- Maintain clarity and professionalism
- Adapt tone to match the industry and role`;
     }
   })()}

Additional Context:
- Template Style: ${selectedTemplate}
- Custom Instructions: ${customInstructions?.value || 'None'}`
                    },
                    {
                        role: 'user',
                        content: `Job Description:\n${jobDescription.value}\n\nResume:\n${resumeContent.value}`
                    }
                ];

                // Make request to DeepSeek API
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${import.meta.env.PUBLIC_OPENAI_API_KEY}`
                    },
                    body: JSON.stringify({
                        model: 'gpt-4o-mini',
                        messages: messages,
                        stream: true,
                        max_tokens: 3000,
                        temperature: 0.5,
                        top_p: 1,
                    })
                });

                // Check if the response is ok
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`API request failed: ${response.status} ${response.statusText}. ${errorText}`);
                }

                if (!streamingContent) {
                    throw new Error('Streaming content element not found');
                }

                // Handle streaming response
                const reader = response.body?.getReader();
                const decoder = new TextDecoder();

                // Clear any previous content but keep loading state
                streamingContent.innerHTML = `
                    <div class="animate-pulse text-center text-gray-500 dark:text-gray-400 space-y-4">
                        <div class="flex justify-center items-center space-x-3">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-primary animate-spin" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                            </svg>
                            <h3 class="text-lg font-semibold">AI Cover Letter Optimization in Progress</h3>
                        </div>
                        <p class="text-sm">
                            Our AI is carefully analyzing your job description and resume to:
                        </p>
                        <ul class="text-xs space-y-2 max-w-md mx-auto text-left">
                            <li class="flex items-center space-x-2">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span>Extract key achievements and skills</span>
                            </li>
                            <li class="flex items-center space-x-2">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span>Tailor content to job description</span>
                            </li>
                            <li class="flex items-center space-x-2">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span>Optimize professional narrative</span>
                            </li>
                        </ul>
                    </div>
                `;

                while (true) {
                    const { done, value } = await reader!.read();
                    if (done) {
                        // Final update with full text
                        if (streamingContent) {
                            streamingContent.innerHTML = `
                                <div class="text-sm text-gray-900 dark:text-white whitespace-pre-wrap text-left p-4 bg-gray-50 dark:bg-gray-800/50 rounded-xl">
                                    ${streamingText}
                                </div>
                            `;
                            
                            // Retrieve current user and track usage AFTER streaming is done
                            const currentUser = await authService.getCurrentUser();
                            if (currentUser) {
                                // Track successful cover letter generation
                                await TierManagementService.trackCoverLetterGeneration(currentUser.uid);
                            }
                        }
                        break;
                    }
                    
                    const chunk = decoder.decode(value);
                    const lines = chunk.split('\n');
                    
                    for (const line of lines) {
                        if (line.startsWith('data: ')) {
                            try {
                                const jsonData = JSON.parse(line.slice(6));
                                if (jsonData.choices && jsonData.choices[0].delta.content) {
                                    const content = jsonData.choices[0].delta.content;
                                    streamingText += content;
                                    
                                    // Check if we have substantial content to replace loading screen
                                    if (streamingText.trim().length > 50) {
                                        streamingContent.innerHTML = `
                                            <div class="text-sm text-gray-900 dark:text-white whitespace-pre-wrap text-left p-4 bg-gray-50 dark:bg-gray-800/50 rounded-xl">
                                                ${streamingText}
                                            </div>
                                        `;
                                    } else {
                                        // Keep loading state with minimal content
                                        const textContainer = streamingContent.querySelector('ul') || streamingContent;
                                        textContainer.innerHTML = `
                                            <div class="animate-pulse text-center text-gray-500 dark:text-gray-400 space-y-4">
                                                <div class="flex justify-center items-center space-x-3">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-primary animate-spin" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                                                    </svg>
                                                    <h3 class="text-lg font-semibold">AI Cover Letter Optimization in Progress</h3>
                                                </div>
                                            </div>
                                        `;
                                    }
                                }
                            } catch (parseError) {
                                console.warn('Error parsing stream data:', parseError);
                            }
                        }
                    }
                }

                // Final update with full text
                if (streamingContent) {
                    streamingContent.innerHTML = `
                        <div class="text-sm text-gray-900 dark:text-white whitespace-pre-wrap text-left p-4 bg-gray-50 dark:bg-gray-800/50 rounded-xl">
                            ${streamingText}
                        </div>
                    `;
                }
            } catch (error) {
                console.error("Cover Letter generation error:", error);
                if (streamingContent) {
                    streamingContent.innerHTML = `
                        <div class="text-red-500">
                            <p class="font-semibold">Error generating cover letter</p>
                            <p class="text-sm mt-2">${error}</p>
                        </div>
                    `;
                }
            }
        });

        // Event Handlers for Modal Buttons
        downloadButton?.addEventListener('click', () => {
            handleButtonClick(downloadButton as HTMLButtonElement);
            const content = streamingContent?.textContent || '';
            const blob = new Blob([content], { type: "text/plain" });
            const url = URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "cover-letter.txt";
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        });

        copyButton?.addEventListener('click', () => {
            handleButtonClick(copyButton as HTMLButtonElement);
            const content = streamingContent?.textContent || '';
            navigator.clipboard.writeText(content);
            
            // Change button color to indicate copied
            copyButton.classList.remove("bg-gray-700", "dark:bg-gray-300");
            copyButton.classList.add("bg-green-500", "dark:bg-green-500");
            copyButton.textContent = "Copied!";
            
            // Revert back after 2 seconds
            setTimeout(() => {
                copyButton.classList.remove("bg-green-500", "dark:bg-green-500");
                copyButton.classList.add("bg-gray-700", "dark:bg-gray-300");
                copyButton.textContent = "Copy";
            }, 2000);
        });

        resumeButton?.addEventListener('click', () => {
            handleButtonClick(resumeButton as HTMLButtonElement);
            window.location.href = "/resume";
        });

        closeButton?.addEventListener('click', () => {
            if (modal) {
                modal.classList.add('hidden');
            }
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const clearButton = document.getElementById('clearForm');
        const jobDescription = document.getElementById('jobDescription') as HTMLTextAreaElement | null;
        const resumeContent = document.getElementById('resumeContent') as HTMLTextAreaElement | null;
        const customInstructions = document.getElementById('customInstructions') as HTMLTextAreaElement | null;
        
        // New UI elements handlers
        const enterManuallyButton = document.getElementById('enterManuallyButton');
        const cancelManualEntry = document.getElementById('cancelManualEntry');
        const changeResumeSource = document.getElementById('changeResumeSource');
        const resumeOptionsSelector = document.getElementById('resumeOptionsSelector');
        const manualEntryContainer = document.getElementById('manualEntryContainer');
        const resumeFileAddedUI = document.getElementById('resumeFileAddedUI');
        
        // Enter manually button handler
        enterManuallyButton?.addEventListener('click', () => {
            if (resumeOptionsSelector && manualEntryContainer) {
                resumeOptionsSelector.classList.add('hidden');
                manualEntryContainer.classList.remove('hidden');
                resumeFileAddedUI?.classList.add('hidden');
            }
        });
        
        // Cancel manual entry button handler
        cancelManualEntry?.addEventListener('click', () => {
            if (resumeOptionsSelector && manualEntryContainer) {
                resumeOptionsSelector.classList.remove('hidden');
                manualEntryContainer.classList.add('hidden');
            }
        });
        
        // Change resume source button handler
        changeResumeSource?.addEventListener('click', () => {
            if (resumeOptionsSelector && resumeFileAddedUI) {
                resumeOptionsSelector.classList.remove('hidden');
                resumeFileAddedUI.classList.add('hidden');
                manualEntryContainer?.classList.add('hidden');
            }
        });

        if (clearButton && jobDescription && resumeContent) {
            clearButton.addEventListener('click', (e) => {
                e.preventDefault(); // Prevent form submission
                
                // Clear all text areas
                jobDescription.value = '';
                resumeContent.value = '';
                
                // Clear custom instructions if it exists
                if (customInstructions) {
                    customInstructions.value = '';
                }

                // Reset any template selections if needed
                const selectedTemplate = document.querySelector('input[name="template"]:checked') as HTMLInputElement | null;
                if (selectedTemplate) {
                    selectedTemplate.checked = false;
                }
            });
        }
    });

    document.addEventListener('DOMContentLoaded', () => {
    const resumeContent = document.getElementById('resumeContent') as HTMLTextAreaElement | null;
    if (resumeContent) {
        resumeContent.value = ''; // Clear the field on page load
    }
});
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const resumeFileUploadButton = document.getElementById('resumeFileUploadButton');
        const resumeFileInput = document.getElementById('resumeFileInput') as HTMLInputElement;
        const resumeContentTextarea = document.getElementById('resumeContent') as HTMLTextAreaElement;

        // Add file upload button event listener
        resumeFileUploadButton?.addEventListener('click', async (e) => {
            // Prevent any form submission
            e.preventDefault();
            e.stopPropagation();
            
            // Trigger file input click
            resumeFileInput?.click();
            
            return false;
        });

        // Handle file selection
        resumeFileInput?.addEventListener('change', async (event) => {
            // Prevent default form submission
            event.preventDefault();
            
            const file = (event.target as HTMLInputElement).files?.[0];
            
            if (!file) {
                console.error('No file selected');
                return;
            }

            // Supported file types
            const supportedTypes = [
                'application/pdf', 
                'application/msword', 
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 
                'text/plain', 
                'text/rtf', 
                'application/rtf'
            ];

            if (!supportedTypes.includes(file.type)) {
                alert('Unsupported file type. Please upload a PDF, DOC, DOCX, TXT, or RTF file.');
                return;
            }

            // Convert file to base64
            const fileReader = new FileReader();
            fileReader.readAsDataURL(file);
            
            fileReader.onload = async () => {
                const base64File = fileReader.result as string;
                const base64Data = base64File.split(',')[1]; // Remove data URL prefix

                try {
                    // Send to server-side API
                    const response = await fetch('/.netlify/functions/upload-resume', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            fileBase64: base64Data,
                            fileName: file.name,
                            fileType: file.type
                        })
                    });

                    // Parse response
                    const result = await response.json();

                    // Check for error in response
                    if (!response.ok) {
                        throw new Error(result.error || 'Unknown server error');
                    }

                    if (result.success) {
                        // Populate cover letter content textarea
                        const coverLetterContent = result.data.text;
                        resumeContentTextarea.value = coverLetterContent;
                        
                        // Optional: Trigger any validation or UI updates
                        resumeContentTextarea.dispatchEvent(new Event('input'));
                        
                        // Show the file added UI and hide other elements
                        const resumeFileAddedUI = document.getElementById('resumeFileAddedUI');
                        const resumeOptionsSelector = document.getElementById('resumeOptionsSelector');
                        const manualEntryContainer = document.getElementById('manualEntryContainer');
                        
                        if (resumeFileAddedUI && resumeOptionsSelector) {
                            resumeFileAddedUI.classList.remove('hidden');
                            resumeOptionsSelector.classList.add('hidden');
                            manualEntryContainer?.classList.add('hidden');
                            
                            const resumeFileName = document.getElementById('resumeFileName');
                            if (resumeFileName) {
                                resumeFileName.textContent = `${file.name}`;
                            }
                        }
                    } else {
                        // Handle error response
                        console.error('Cover letter upload failed:', result);
                        alert(`Failed to upload cover letter: ${result.error || 'Unknown error'}`);
                    }
                } catch (error) {
                    // Network or parsing errors
                    console.error('Cover letter upload error:', error);
                    alert(`Error uploading cover letter: ${error instanceof Error ? error.message : 'Unknown error'}`);
                }
            };
        });
    });
</script>

<script>
    import { authService } from '../../lib/auth';
    import { PersistentDocumentService } from '../../lib/persistentDocumentService';
    document.addEventListener('DOMContentLoaded', () => {
        const importResumeButton = document.getElementById('importResumeButton');
        const resumeContentTextarea = document.getElementById('resumeContent') as HTMLTextAreaElement;

        if (!importResumeButton || !resumeContentTextarea) {
            console.error('Required elements for resume import not found');
            return;
        }

        importResumeButton.addEventListener('click', async () => {
            try {
                const user = await authService.getCurrentUser();
                if (!user) {
                    // Redirect to login or show login modal
                    return;
                }

                // Create a modal dynamically
                const modal = document.createElement('div');
                modal.innerHTML = `
                    <div class="p-4 fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
                        <div class="bg-white dark:bg-gray-900 rounded-2xl p-6 max-w-md w-full max-h-[80vh] overflow-y-auto">
                            <div class="flex justify-between items-center mb-4">
                                <h2 class="text-2xl font-bold text-gray-900 dark:text-white">
                                    Resume Manager
                                </h2>
                                <button id="closeImportModal" class="text-gray-500 hover:text-gray-900 dark:hover:text-white">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>

                            <div class="mb-4">
                                <button 
                                    id="addNewResumeButton"
                                    class="w-full inline-flex items-center justify-center px-4 py-3 
                                    bg-black text-white 
                                    rounded-xl 
                                    hover:bg-primary-600 
                                    transition-all duration-300 
                                    focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                    </svg>
                                    Create New Resume
                                </button>
                            </div>

                            <div class="border-t border-gray-200 dark:border-gray-700 my-4"></div>

                            <div id="resumeList" class="space-y-3">
                                <!-- Existing Resumes will be dynamically populated here -->
                            </div>
                        </div>
                    </div>
                `;

                document.body.appendChild(modal);

                const closeModalButton = modal.querySelector('#closeImportModal');
                const addNewResumeButton = modal.querySelector('#addNewResumeButton');
                const resumeListContainer = modal.querySelector('#resumeList');

                closeModalButton?.addEventListener('click', () => {
                    document.body.removeChild(modal);
                });

                // Add new resume functionality
                addNewResumeButton?.addEventListener('click', () => {
                    // Navigate to Dashboard's Resume Manager section
                    window.location.href = '/dashboard#addResumeBtn';
                });

                // Fetch and display resumes
                const resumes = await PersistentDocumentService.loadAllResumes();
                
                if (resumes.length === 0) {
                    resumeListContainer!.innerHTML = `
                        <div class="text-center text-gray-500 dark:text-gray-400 py-6">
                            <p>No resumes found. Create a new resume to get started.</p>
                        </div>
                    `;
                    return;
                }

                // Populate resume list
                resumeListContainer!.innerHTML = resumes.map((resume, index) => `
                    <div class="bg-gray-100 dark:bg-gray-800 rounded-xl p-4 hover:bg-gray-200 dark:hover:bg-gray-700 cursor-pointer transition-colors resume-item" 
                         data-resume-index="${index}">
                        <div class="flex justify-between items-center">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                                    ${resume.name || `Resume ${index + 1}`}
                                </h3>
                                <p class="text-sm text-gray-500 dark:text-gray-400">
                                    Last updated: ${new Date(resume.lastUpdated).toLocaleDateString()}
                                </p>
                            </div>
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                        </div>
                    </div>
                `).join('');

                // Add click event to resume items
                const resumeItems = modal.querySelectorAll('.resume-item');
                resumeItems.forEach(item => {
                    item.addEventListener('click', () => {
                        const index = item.getAttribute('data-resume-index');
                        const selectedResume = resumes[Number(index)];
                        
                        // Populate resume content textarea
                        resumeContentTextarea.value = selectedResume.content || '';
                        
                        // Close modal
                        document.body.removeChild(modal);
                    });
                });
            } catch (error) {
                console.error('Error importing resume:', error);
                // Show user-friendly error message
                const errorModal = document.createElement('div');
                errorModal.innerHTML = `
                    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
                        <div class="bg-white dark:bg-gray-900 rounded-2xl p-6 max-w-md w-full text-center">
                            <h2 class="text-2xl font-bold text-red-600 mb-4">
                                Import Error
                            </h2>
                            <p class="text-gray-600 dark:text-gray-400 mb-6">
                                Unable to import resumes. Please try again later.
                            </p>
                            <button id="closeErrorModal" class="bg-primary text-white px-4 py-2 rounded-full">
                                Close
                            </button>
                        </div>
                    </div>
                `;
                document.body.appendChild(errorModal);

                const closeErrorModalButton = errorModal.querySelector('#closeErrorModal');
                closeErrorModalButton?.addEventListener('click', () => {
                    document.body.removeChild(errorModal);
                });
            }
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const textareas = document.querySelectorAll('.typing-animation');
        
        textareas.forEach(textarea => {
            textarea.addEventListener('focus', (e) => {
                // Type guard to ensure e.target is an HTMLTextAreaElement
                const target = e.target as HTMLTextAreaElement | null;
                if (!target) return;

                const placeholder = target.getAttribute('data-placeholder');
                if (!target.value) {
                    target.setAttribute('placeholder', placeholder || '');
                    
                    let index = 0;
                    const typeText = () => {
                        if (placeholder && index < placeholder.length) {
                            target.setAttribute('placeholder', placeholder.slice(0, index + 1) + '|');
                            index++;
                            setTimeout(typeText, 50);
                        } else {
                            target.setAttribute('placeholder', placeholder || '');
                        }
                    };
                    
                    typeText();
                }
            });

            textarea.addEventListener('blur', (e) => {
                // Type guard to ensure e.target is an HTMLTextAreaElement
                const target = e.target as HTMLTextAreaElement | null;
                if (!target) return;

                if (!target.value) {
                    // Use nullish coalescing to provide an empty string fallback
                    target.setAttribute('placeholder', '');
                }
            });
        });
    });
</script>

<style>
    textarea.border-red-500 {
        border-color: rgb(239 68 68);
    }

    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: .5; }
    }

    .animate-pulse {
        animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }

    @keyframes typing {
        from { width: 0 }
        to { width: 100% }
    }
    @keyframes blink-caret {
        from, to { border-color: transparent }
        50% { border-color: theme('colors.white') }
    }
    .typing-animation:focus::placeholder {
        animation: 
            typing 2s steps(30, end),
            blink-caret .75s step-end infinite;
        overflow: hidden;
        white-space: nowrap;
        border-right: .15em solid;
        color: theme('colors.gray.700');
        opacity: 1;
    }
</style>
