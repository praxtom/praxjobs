---
interface CoverLetterTemplate {
  id: string;
  name: string;
  description: string;
  recommendedFor: string;
  color: string;
  promptModifier: string;
}

// Extend Window interface to include custom property
declare global {
  interface Window {
    __coverLetterScriptInitialized?: boolean;
  }
}

const coverLetterTemplates: CoverLetterTemplate[] = [
  {
    id: "professional",
    name: "Professional",
    description: "Formal and structured template for corporate roles",
    recommendedFor: "Corporate Positions",
    color: "indigo",
    promptModifier:
      "Write in a formal, professional tone with a focus on corporate achievements and structured language. Use precise, business-oriented vocabulary.",
  },
  {
    id: "creative",
    name: "Creative",
    description: "Innovative template for creative industries",
    recommendedFor: "Design, Marketing, Media Roles",
    color: "emerald",
    promptModifier:
      "Write with a creative, engaging tone that highlights innovative thinking and unique personal brand. Use storytelling and vibrant language.",
  },
  {
    id: "startup",
    name: "Startup",
    description: "Entrepreneurial template for tech and startup roles",
    recommendedFor: "Tech Startups, Entrepreneurial Positions",
    color: "orange",
    promptModifier:
      "Write with an entrepreneurial spirit, emphasizing adaptability, innovation, and passion for solving complex problems. Use dynamic, forward-thinking language.",
  },
];

const templateData = JSON.stringify(coverLetterTemplates);
---

<div class="relative py-16 w-full">
  <div
    aria-hidden="true"
    class="absolute inset-0 grid grid-cols-2 -space-x-52 opacity-40 dark:opacity-20"
  >
    <div
      class="blur-[106px] h-56 bg-gradient-to-br from-primary to-purple-400 dark:from-blue-700 dark:to-indigo-600"
    >
    </div>
    <div
      class="blur-[106px] h-32 bg-gradient-to-r from-cyan-400 to-sky-300 dark:to-indigo-600 dark:from-emerald-500"
    >
    </div>
  </div>
  <div class="relative w-full">
    <div class="container mx-auto px-3 md:px-6 lg:px-8 max-w-6xl">
      <div class="w-full mx-auto">
        <form
          id="coverLetterForm"
          class="w-full space-y-6 sm:space-y-8 bg-white dark:bg-gray-900/80 backdrop-blur-md rounded-3xl p-4 sm:p-8
                    shadow-xl border-gray-100 border dark:border-gray-700/50
                    transition-all duration-300 ease-in-out hover:shadow-2xl"
        >
          <!-- Job Description -->
          <div class="grid grid-cols-1 gap-3 sm:gap-6">
            <div class="space-y-1.5 sm:space-y-2">
              <label
                for="jobDescription"
                class="block text-left text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Job Description <span class="text-red-600">*</span>
              </label>
              <textarea
                id="jobDescription"
                placeholder="Paste the complete job description here."
                rows="6"
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-700/70 bg-white dark:bg-gray-800/30 rounded-xl
                                dark:text-gray-100 focus:border-primary dark:focus:border-primary focus:ring-1 focus:ring-primary
                                outline-none text-md transition-colors duration-200 resize-y"
                required></textarea>
              <div class="validation-error text-red-500 text-sm mt-1"></div>
            </div>
          </div>

          <!-- Resume Content -->
          <div class="grid grid-cols-1 gap-3 sm:gap-6">
            <div class="space-y-1.5 sm:space-y-2">
              <label
                class="block text-left text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Resume <span class="text-red-600">*</span>
              </label>

              <!-- Resume Options Selector -->
              <div
                id="resumeOptionsSelector"
                class="flex flex-col sm:flex-row gap-3 mt-2"
              >
                <button
                  type="button"
                  id="resumeFileUploadButton"
                  class="flex-1 py-4 px-4 border-2 border-gray-300 dark:border-gray-700 rounded-xl
                                    bg-white/10 dark:bg-gray-800/20 hover:bg-white/20 dark:hover:bg-gray-800/30
                                    transition-all duration-300 text-center group"
                >
                  <div
                    class="flex flex-col items-center justify-center space-y-2"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-7 w-7 text-primary group-hover:text-primary-dark transition-colors duration-300"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                      ></path>
                    </svg>
                    <span
                      class="block font-medium text-gray-900 dark:text-white"
                      >Upload File</span
                    >
                    <span class="text-xs text-gray-500 dark:text-gray-400"
                      >PDF, DOCX, TXT</span
                    >
                  </div>
                </button>

                <button
                  type="button"
                  id="importResumeButton"
                  class="flex-1 py-4 px-4 border-2 border-gray-300 dark:border-gray-700 rounded-xl
                                    bg-white/10 dark:bg-gray-800/20 hover:bg-white/20 dark:hover:bg-gray-800/30
                                    transition-all duration-300 text-center group"
                >
                  <div
                    class="flex flex-col items-center justify-center space-y-2"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-7 w-7 text-primary group-hover:text-primary-dark transition-colors duration-300"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4"
                      ></path>
                    </svg>
                    <span
                      class="block font-medium text-gray-900 dark:text-white"
                      >Resume Manager</span
                    >
                    <span class="text-xs text-gray-500 dark:text-gray-400"
                      >Select from saved resumes</span
                    >
                  </div>
                </button>

                <button
                  type="button"
                  id="enterManuallyButton"
                  class="flex-1 py-4 px-4 border-2 border-gray-300 dark:border-gray-700 rounded-xl
                                    bg-white/10 dark:bg-gray-800/20 hover:bg-white/20 dark:hover:bg-gray-800/30
                                    transition-all duration-300 text-center group"
                >
                  <div
                    class="flex flex-col items-center justify-center space-y-2"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-7 w-7 text-primary group-hover:text-primary-dark transition-colors duration-300"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 0L11.828 15H9v-2.828l8.586-8.586z"
                      ></path>
                    </svg>
                    <span
                      class="block font-medium text-gray-900 dark:text-white"
                      >Enter Manually</span
                    >
                    <span class="text-xs text-gray-500 dark:text-gray-400"
                      >Type or paste your content</span
                    >
                  </div>
                </button>
              </div>

              <!-- Manual Entry Container -->
              <div id="manualEntryContainer" class="hidden space-y-2">
                <div class="flex justify-between items-center">
                  <h4
                    class="text-sm font-medium text-gray-700 dark:text-gray-300"
                  >
                    Manual Entry
                  </h4>
                  <button
                    type="button"
                    id="cancelManualEntry"
                    class="text-xs text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
                  >
                    Cancel
                  </button>
                </div>
                <textarea
                  id="resumeContent"
                  placeholder="Paste your current resume content here."
                  rows="6"
                  class="w-full px-4 py-3 border border-gray-300 dark:border-gray-700/70 bg-white dark:bg-gray-800/30 rounded-xl
                                    dark:text-gray-100 focus:border-primary dark:focus:border-primary focus:ring-1 focus:ring-primary
                                    outline-none text-md transition-colors duration-200 resize-y"
                ></textarea>
                <div class="validation-error text-red-500 text-sm mt-1"></div>
              </div>

              <!-- Loader UI -->
              <div
                id="uploadLoader"
                class="hidden fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 z-50"
              >
                <div
                  class="loader animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-gray-300 shadow-lg"
                  style="border-top-color: #007aff;"
                >
                </div>
              </div>

              <!-- File Added UI -->
              <div id="resumeFileAddedUI" class="hidden">
                <div
                  class="py-3 px-4 border-2 border-gray-300 dark:border-gray-700 rounded-xl
                                        bg-white/10 dark:bg-gray-800/20 transition-all duration-300"
                >
                  <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-6 w-6 text-green-500"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                        ></path>
                      </svg>
                      <div>
                        <div
                          class="text-sm font-medium text-gray-900 dark:text-white"
                        >
                          Resume Added
                        </div>
                        <div id="resumeFileName" class="text-xs text-gray-500">
                          Document.pdf
                        </div>
                      </div>
                    </div>
                    <button
                      type="button"
                      id="changeResumeSource"
                      class="text-xs bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-full px-3 py-1 transition-colors duration-200"
                    >
                      Change
                    </button>
                  </div>
                </div>
              </div>

              <!-- Hidden file input -->
              <input
                type="file"
                id="resumeFileInput"
                class="hidden"
                accept=".pdf,.doc,.docx,.txt,.rtf"
              />
            </div>
          </div>

          <!-- Custom Instructions -->
          <div class="grid grid-cols-1 gap-3 sm:gap-6">
            <div class="space-y-1.5 sm:space-y-2">
              <label
                for="customInstructions"
                class="block text-left text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Custom Instructions <span
                  class="text-xs sm:text-sm text-gray-500 dark:text-gray-400 ml-2"
                  >(Optional)</span
                >
              </label>
              <textarea
                id="customInstructions"
                placeholder="Optional instructions to refine cover letter."
                rows="3"
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-700/70 bg-white dark:bg-gray-800/30 rounded-xl
                                dark:text-gray-100 focus:border-primary dark:focus:border-primary focus:ring-1 focus:ring-primary
                                outline-none text-md transition-colors duration-200 resize-y"
              ></textarea>
            </div>
          </div>

          <!-- Template Selection -->
          <div class="space-y-4">
            <h3
              class="text-lg sm:text-xl font-medium text-gray-900 dark:text-white"
            >
              Choose Template
            </h3>
            <div class="grid grid-cols-2 sm:grid-cols-3 gap-3">
              {
                coverLetterTemplates.map((template, index) => (
                  <div class="relative group cursor-pointer">
                    <input
                      type="radio"
                      id={`template-${template.id}`}
                      name="template"
                      value={template.id}
                      class="hidden peer"
                      required
                      checked={index === 0}
                    />
                    <label
                      for={`template-${template.id}`}
                      class="block p-3 border-2 border-gray-300 dark:border-gray-700 rounded-xl
                                        bg-white/10 dark:bg-gray-800/20
                                        hover:bg-white/20 dark:hover:bg-gray-800/30
                                        peer-checked:border-primary peer-checked:ring-2 peer-checked:ring-primary/30
                                        transition-all duration-300
                                        text-center space-y-2"
                    >
                      <span class="block text-sm font-semibold text-gray-900 dark:text-white">
                        {template.name}
                      </span>
                      <span class="block text-xs text-gray-600 dark:text-gray-400">
                        {template.description}
                      </span>
                    </label>
                  </div>
                ))
              }
            </div>
          </div>

          <!-- Generate Button -->
          <div
            class="flex flex-col sm:flex-row justify-center items-center space-y-2.5 sm:space-y-0 sm:space-x-4 pt-4"
          >
            <button
              type="submit"
              class="w-full sm:w-auto inline-flex h-11 sm:h-12 items-center justify-center px-6 sm:px-8 py-2 sm:py-3
                                text-sm sm:text-base font-semibold
                                text-white bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700
                                dark:text-white dark:bg-gradient-to-r dark:from-blue-500 dark:to-indigo-500 dark:hover:from-blue-600 dark:hover:to-indigo-600
                                rounded-full
                                transition-all duration-300 ease-in-out
                                transform hover:scale-[1.03] active:scale-95
                                focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900
                                shadow-lg hover:shadow-xl"
            >
              <svg
                id="generateIcon"
                class="w-5 h-5 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
                ><path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M13 10V3L4 14h7v7l9-11h-7z"></path></svg
              >
              <svg
                id="generateSpinner"
                class="animate-spin -ml-1 mr-3 h-5 w-5 text-white hidden"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  class="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"></circle>
                <path
                  class="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
              <span id="generateButtonText">Generate Cover Letter</span>
            </button>
            <button
              type="button"
              id="clearForm"
              class="w-full sm:w-auto inline-flex h-11 sm:h-12 items-center justify-center px-6 sm:px-8 py-2 sm:py-3
                                text-sm sm:text-base font-semibold
                                text-gray-700 bg-gray-100 hover:bg-gray-200
                                dark:text-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600
                                border border-transparent
                                rounded-full
                                transition-all duration-300 ease-in-out
                                transform hover:scale-[1.03] active:scale-95
                                focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 dark:focus:ring-offset-gray-900
                                shadow-md hover:shadow-lg"
            >
              <svg
                class="w-5 h-5 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
                ><path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                ></path></svg
              >
              Clear
            </button>
          </div>
        </form>

        <!-- Existing Modal and other content remains the same -->
      </div>
    </div>
  </div>
</div>

<!-- Modal for Cover Letter Preview - Structure updated -->
<div
  id="coverLetterModal"
  class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4 hidden"
>
  <!-- Main modal container - kept relative for positioning children -->
  <div class="relative w-[95%] max-w-4xl max-h-[85vh] flex flex-col">
    <!-- Close button - positioned absolutely top-right of the container -->
    <button
      id="closeModal"
      class="absolute -top-2 -right-2 z-20 group p-1.5 bg-gray-700 hover:bg-gray-600 rounded-full transition-colors duration-200"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-5 w-5 text-white"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>

    <!-- Content "Page" Area -->
    <div
      class="flex-1 overflow-y-auto p-8 bg-gray-100 dark:bg-gray-900 rounded-sm shadow-lg"
    >
      <div
        id="streamingContent"
        class="min-h-[300px] relative text-base font-serif text-gray-900 dark:text-white leading-relaxed tracking-normal whitespace-pre-wrap"
      >
        <!-- Initial loading state -->
        <div
          class="animate-pulse text-center text-gray-500 dark:text-gray-400 space-y-4 font-sans"
        >
          <div class="flex justify-center items-center space-x-3">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-8 w-8 text-primary animate-spin"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
              ></path>
            </svg>
            <h3 class="text-lg font-semibold">
              AI Cover Letter Optimization in Progress
            </h3>
          </div>
          <p class="text-sm">
            Our AI is carefully analyzing your job description and resume to:
          </p>
          <ul class="text-xs space-y-2 max-w-md mx-auto text-left">
            <li class="flex items-center space-x-2">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-4 w-4 text-primary"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span>Extract key achievements and skills</span>
            </li>
            <li class="flex items-center space-x-2">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-4 w-4 text-primary"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span>Tailor content to job description</span>
            </li>
            <li class="flex items-center space-x-2">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-4 w-4 text-primary"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span>Optimize professional narrative</span>
            </li>
          </ul>
        </div>
      </div>
    </div>

    <!-- Action Buttons Area - Placed below the content area -->
    <div
      id="coverLetterActionButtons"
      class="flex flex-row justify-center items-center p-4 space-x-3 opacity-0 transition-all duration-500 ease-in-out transform translate-y-4 bg-transparent"
    >
      <button
        id="downloadButton"
        class="inline-flex items-center justify-center px-4 py-2
                text-sm font-semibold bg-gray-200 dark:bg-gray-700
                text-gray-900 dark:text-white hover:bg-gray-300
                dark:hover:bg-gray-600 rounded-full transition-colors duration-300"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 sm:mr-2"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"
          ></path>
        </svg>
        <span class="hidden sm:inline">Download</span>
      </button>
      <button
        id="copyButton"
        class="inline-flex items-center justify-center px-4 py-2
                text-sm font-semibold bg-gray-200 dark:bg-gray-700
                text-gray-900 dark:text-white hover:bg-gray-300
                dark:hover:bg-gray-600 rounded-full transition-colors duration-300"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 sm:mr-2"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"
          ></path>
        </svg>
        <span class="hidden sm:inline">Copy</span>
      </button>
      {/* Removed Save to Manager and Create Resume buttons for Cover Letter */}
    </div>
  </div>
</div>

<!-- Upgrade Modal -->
<div
  id="upgradeModal"
  class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4 hidden"
>
  <div
    class="bg-white dark:bg-gray-900 rounded-2xl p-8 max-w-md w-full text-center"
  >
    <h2 class="text-2xl font-bold mb-4 text-gray-900 dark:text-white">
      Usage Limit Reached
    </h2>
    <p class="text-gray-600 dark:text-gray-400 mb-6">
      You've reached the maximum number of cover letter generations for your
      current plan.
    </p>
    <div class="flex justify-center space-x-4">
      <button
        id="upgradeButton"
        class="bg-black dark:bg-white text-white dark:text-black px-6 py-2 rounded-full hover:bg-primary-600 transition"
      >
        Upgrade to Pro
      </button>
      <button
        id="closeUpgradeModal"
        class="bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white px-6 py-2 rounded-full hover:bg-gray-300 dark:hover:bg-gray-600 transition"
      >
        Close
      </button>
    </div>
  </div>
</div>

<script>
  import { TierManagementService } from "../../lib/tierManagement";
  import { authService } from "../../lib/auth";
  import { PersistentDocumentService } from "../../lib/persistentDocumentService";

  document.addEventListener("DOMContentLoaded", async () => {
    const form = document.getElementById("coverLetterForm");
    // const resultContainer = document.getElementById("coverLetterResult"); // This element doesn't seem to exist or be used
    const coverLetterContentInput = document.getElementById(
      "resumeContent"
    ) as HTMLTextAreaElement; // Assuming this is used for cover letter input too?

    // Check for stored job data
    const storedJob = localStorage.getItem("currentJob");
    if (storedJob) {
      const jobData = JSON.parse(storedJob);
      // Pre-fill the job description
      const jobDescriptionInput = document.getElementById(
        "jobDescription"
      ) as HTMLTextAreaElement;
      if (jobDescriptionInput)
        jobDescriptionInput.value = jobData.jobDescription || "";
      // Clear the stored data as it's no longer needed
      localStorage.removeItem("currentJob");
    }

    // Load existing cover letter (if applicable, might need adjustment)
    // const existingCoverLetter = await PersistentDocumentService.loadDocument("coverLetter");
    // if (existingCoverLetter && coverLetterContentInput) {
    //   coverLetterContentInput.value = existingCoverLetter;
    // }

    // Add save functionality to form submission (if applicable)
    // form?.addEventListener("submit", async (e) => {
    //   if (coverLetterContentInput) {
    //     await PersistentDocumentService.saveDocument(coverLetterContentInput.value, "coverLetter");
    //   }
    // });

    const modal = document.getElementById("coverLetterModal");

    if (!form || !modal) {
      // console.error("Required form or modal elements not found"); // Keep minimal for prod
      return;
    }

    const streamingContent = document.getElementById("streamingContent");
    const closeButton = document.getElementById("closeModal");
    const downloadButton = document.getElementById("downloadButton");
    const copyButton = document.getElementById("copyButton");
    const coverLetterActionButtons = document.getElementById(
      "coverLetterActionButtons"
    ); // Get the action buttons container

    // Function to play click sound and add visual feedback
    function handleButtonClick(button: HTMLButtonElement) {
      // Play sound
      // Temporary visual feedback
      button.classList.add("ring-2", "ring-primary", "ring-offset-2");
      setTimeout(() => {
        button.classList.remove("ring-2", "ring-primary", "ring-offset-2");
      }, 300);
    }

    async function checkCoverLetterAccess() {
      try {
        const user = await authService.getCurrentUser();
        if (!user) {
          // Show login modal or redirect to login
          const loginModal = document.createElement("div");
          loginModal.innerHTML = `
                        <div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
                            <div class="bg-white dark:bg-gray-900 rounded-2xl p-8 max-w-md w-full text-center">
                                <h2 class="text-2xl font-bold mb-4 text-gray-900 dark:text-white">Login Required</h2>
                                <p class="text-gray-600 dark:text-gray-400 mb-6">
                                    Please log in to generate a cover letter.
                                </p>
                                <div class="flex justify-center space-x-4">
                                    <button id="loginButton" class="bg-black dark:bg-white text-white dark:text-black px-6 py-2 rounded-full hover:bg-primary-600 transition">
                                        Login
                                    </button>
                                    <button id="closeLoginModal" class="bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white px-6 py-2 rounded-full hover:bg-gray-300 dark:hover:bg-gray-600 transition">
                                        Close
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
          document.body.appendChild(loginModal);

          const loginButton = loginModal.querySelector("#loginButton");
          const closeLoginModalButton =
            loginModal.querySelector("#closeLoginModal"); // Corrected ID

          loginButton?.addEventListener("click", () => {
            // Redirect to login page
            window.location.href = "/login";
          });

          closeLoginModalButton?.addEventListener("click", () => {
            document.body.removeChild(loginModal);
          });

          return { canAccess: false, userId: null };
        }

        // Check feature access
        const hasAccess = await TierManagementService.checkFeatureAccess(
          user.uid,
          "coverLetterGeneration"
        );

        if (!hasAccess) {
          // Show upgrade modal
          const upgradeModal = document.getElementById("upgradeModal"); // Get existing upgrade modal
          const upgradeButton = document.getElementById("upgradeButton");
          const closeUpgradeModalButton =
            document.getElementById("closeUpgradeModal");

          if (upgradeModal) {
            upgradeModal.classList.remove("hidden"); // Show it
          }

          upgradeButton?.addEventListener("click", () => {
            // Redirect to upgrade page
            window.location.href = "/pricing";
          });

          closeUpgradeModalButton?.addEventListener("click", () => {
            if (upgradeModal) {
              upgradeModal.classList.add("hidden"); // Hide it
            }
          });

          return { canAccess: false, userId: user.uid };
        }

        return { canAccess: true, userId: user.uid };
      } catch (error) {
        // console.error("Error checking cover letter access:", error); // Removed for prod
        return { canAccess: false, userId: null };
      }
    }

    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      // Check tier status before generation
      const { canAccess, userId } = await checkCoverLetterAccess();

      if (!canAccess || !userId) {
        return; // Stop generation if access is denied
      }

      // Input validation function
      function validateInput(
        input: HTMLTextAreaElement,
        minLength: number = 10
      ): boolean {
        const value = input.value.trim();
        const isValid = value.length >= minLength;

        // Get or create error message element
        let errorMessageEl = input.nextElementSibling as HTMLElement | null;
        if (
          !errorMessageEl ||
          !errorMessageEl.classList.contains("validation-error")
        ) {
          errorMessageEl = document.createElement("div");
          errorMessageEl.classList.add(
            "validation-error",
            "text-red-500",
            "text-sm",
            "mt-1"
          );
          input.parentNode?.insertBefore(errorMessageEl, input.nextSibling);
        }

        // Toggle error state and message
        input.classList.toggle("border-red-500", !isValid);
        input.classList.toggle("border-gray-200", isValid);

        if (!isValid) {
          // Customize error message based on input
          let errorMessage = "";
          if (input.id === "jobDescription") {
            errorMessage = `Job description must be at least ${minLength} characters long.`;
          } else if (input.id === "resumeContent") {
            errorMessage = `Resume content must be at least ${minLength} characters long.`;
          } else {
            errorMessage = `Input must be at least ${minLength} characters long.`;
          }

          errorMessageEl.textContent = errorMessage;
          errorMessageEl.style.display = "block";
        } else {
          // Hide error message if valid
          if (errorMessageEl) {
            errorMessageEl.textContent = "";
            errorMessageEl.style.display = "none";
          }
        }

        return isValid;
      }

      // Validate inputs with specific length requirements
      const jobDescription = document.getElementById(
        "jobDescription"
      ) as HTMLTextAreaElement;
      const resumeContent = document.getElementById(
        "resumeContent"
      ) as HTMLTextAreaElement;

      // Validate all inputs and collect validation results
      const jobDescriptionValid = validateInput(jobDescription, 20);

      // Check if resume content is empty
      const resumeOptionsSelector = document.getElementById(
        "resumeOptionsSelector"
      );
      const resumeFileAddedUI = document.getElementById("resumeFileAddedUI");
      const manualEntryContainer = document.getElementById(
        "manualEntryContainer"
      );

      let resumeContentValid = true;

      if (resumeContent.value.trim().length < 50) {
        // If the options selector is visible, show an error
        if (
          resumeOptionsSelector &&
          !resumeOptionsSelector.classList.contains("hidden") &&
          resumeFileAddedUI &&
          resumeFileAddedUI.classList.contains("hidden")
        ) {
          // Show error message
          const errorMessage = document.createElement("div");
          errorMessage.id = "resumeErrorMessage";
          errorMessage.className = "text-red-500 text-sm mt-2";
          errorMessage.textContent =
            "Please select a resume option or enter your resume manually.";

          // Remove any existing error message
          const existingError = document.getElementById("resumeErrorMessage");
          if (existingError) {
            existingError.remove();
          }

          // Add error message after options selector
          resumeOptionsSelector.parentNode?.insertBefore(
            errorMessage,
            resumeOptionsSelector.nextSibling
          );

          // Add error highlighting to the options
          resumeOptionsSelector.querySelectorAll("button").forEach((button) => {
            button.classList.add("border-red-500");
          });

          resumeContentValid = false;
        } else if (
          manualEntryContainer &&
          !manualEntryContainer.classList.contains("hidden")
        ) {
          // If manual entry is visible, validate the textarea
          resumeContentValid = validateInput(resumeContent, 50);
        } else if (
          resumeFileAddedUI &&
          !resumeFileAddedUI.classList.contains("hidden")
        ) {
          // If file is added, content should be valid
          resumeContentValid = true;
        }
      }

      // Check if all validations pass
      if (!jobDescriptionValid || !resumeContentValid) {
        // Optional: Scroll to the first invalid input
        if (!jobDescriptionValid) {
          jobDescription.scrollIntoView({
            behavior: "smooth",
            block: "center",
          });
        } else {
          const targetElement =
            manualEntryContainer &&
            !manualEntryContainer.classList.contains("hidden")
              ? resumeContent
              : resumeOptionsSelector;
          targetElement?.scrollIntoView({
            behavior: "smooth",
            block: "center",
          });
        }
        return;
      }

      // Proceed with existing cover letter generation logic
      // Show modal
      modal?.classList.remove("hidden");

      // Ensure streaming content shows loading state
      if (streamingContent) {
        streamingContent.innerHTML = `
                    <div class="animate-pulse text-center text-gray-500 dark:text-gray-400 space-y-4 font-sans">
                        <div class="flex justify-center items-center space-x-3">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-primary animate-spin" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                            </svg>
                            <h3 class="text-lg font-semibold">AI Cover Letter Optimization in Progress</h3>
                        </div>
                        <p class="text-sm">
                            Our AI is carefully analyzing your job description and resume to:
                        </p>
                        <ul class="text-xs space-y-2 max-w-md mx-auto text-left">
                            <li class="flex items-center space-x-2">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span>Extract key achievements and skills</span>
                            </li>
                            <li class="flex items-center space-x-2">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span>Tailor content to job description</span>
                            </li>
                            <li class="flex items-center space-x-2">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span>Optimize professional narrative</span>
                            </li>
                        </ul>
                    </div>
                `;
      }

      // More robust element selection
      const customInstructionsInput = document.querySelector(
        // Renamed variable
        "#customInstructions"
      ) as HTMLTextAreaElement | null;
      const selectedTemplate =
        (
          document.querySelector(
            'input[name="template"]:checked'
          ) as HTMLInputElement
        )?.value || "professional";

      // Validate inputs
      // if (!jobDescription || !resumeContent) { // Removed console.error for prod
      //   // console.error("Required input fields are missing");
      //   return;
      // }

      let streamingText = "";

      try {
        const messages = [
          {
            role: "system",
            content: `Generate a professional cover letter based on the following job description and resume. Follow these guidelines:

1. Format:
   - Use plain text without markup or special formatting strictly
   - Standard sections: Greeting, Opening Paragraph, Body Paragraphs, Closing Paragraph
   - Use standard business letter formatting
   - Avoid tables, columns, or complex layouts
   - Do NOT include any explanatory text at the end of the cover letter
   - Return ONLY the cover letter text without any additional commentary

2. Content:
   - Address the letter to the hiring manager (or "Dear Hiring Manager" if name unknown)
   - Tailor the content to match specific job requirements
   - Highlight relevant skills and experiences from the resume
   - Use keywords from the job description
   - Demonstrate enthusiasm and fit for the role
   - Dont lie at all and stick to truth from the resume

3. Style:
   - Maintain professional and engaging language
   - Be specific and results-oriented
   - Show how your skills solve the employer's needs
   - Keep the tone conversational yet professional
   - Limit to one page

4. Template Specifications:
   ${(() => {
     switch (selectedTemplate) {
       case "professional":
         return `- Tone: Formal and polished
- Language: Corporate and precise
- Structure: Clear, concise paragraphs
- Emphasis: Professional achievements and skills
- Avoid overly casual language or personal anecdotes`;

       case "creative":
         return `- Tone: Engaging and innovative
- Language: Dynamic and passionate
- Structure: More narrative-driven paragraphs
- Emphasis: Unique personal brand and creative problem-solving
- Use storytelling techniques to highlight professional journey`;

       case "startup":
         return `- Tone: Contemporary and forward-thinking
- Language: Tech-savvy and adaptable
- Structure: Concise, impact-driven sections
- Emphasis: Recent achievements, technological skills
- Incorporate industry-specific jargon and current trends`;

       default:
         return `- Default to a professional, balanced approach
- Maintain clarity and professionalism
- Adapt tone to match the industry and role`;
     }
   })()}

Additional Context:
- Template Style: ${selectedTemplate}
- Custom Instructions: ${customInstructionsInput?.value || "None"}`, // Used renamed variable
          },
          {
            role: "user",
            content: `Job Description:\n${jobDescription.value}\n\nResume:\n${resumeContent.value}`,
          },
        ];

        // Make request to DeepSeek API
        const response = await fetch(
          "https://api.deepseek.com/v1/chat/completions",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${import.meta.env.PUBLIC_DEEPSEEK_API_KEY}`,
            },
            body: JSON.stringify({
              model: "deepseek-chat",
              messages: messages,
              stream: true,
              max_tokens: 3000,
              temperature: 0.5,
              top_p: 1,
            }),
          }
        );

        // Check if the response is ok
        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(
            `API request failed: ${response.status} ${response.statusText}. ${errorText}`
          );
        }

        if (!streamingContent) {
          throw new Error("Streaming content element not found");
        }

        // Handle streaming response
        const reader = response.body?.getReader();
        const decoder = new TextDecoder();

        // Clear loading state and prepare for text
        streamingContent.innerHTML = ""; // Clear loading pulse

        while (true) {
          const { done, value } = await reader!.read();
          if (done) {
            // Final update with full text (already done progressively)
            // Retrieve current user and track usage AFTER streaming is done
            const currentUser = await authService.getCurrentUser();
            if (currentUser) {
              // Track successful cover letter generation
              await TierManagementService.trackCoverLetterGeneration(
                currentUser.uid
              );
            }
            break;
          }

          const chunk = decoder.decode(value);
          const lines = chunk.split("\n");

          for (const line of lines) {
            if (line.startsWith("data: ")) {
              try {
                const jsonData = JSON.parse(line.slice(6));
                if (jsonData.choices && jsonData.choices[0].delta.content) {
                  const content = jsonData.choices[0].delta.content;
                  streamingText += content;
                  // Update content progressively
                  streamingContent.innerHTML = streamingText; // Directly set the text
                }
              } catch (parseError) {
                // console.warn("Error parsing stream data:", parseError); // Removed for prod
              }
            }
          }
        }

        // Show action buttons after streaming is complete
        if (coverLetterActionButtons) {
          coverLetterActionButtons.classList.remove(
            "opacity-0",
            "translate-y-4"
          );
          coverLetterActionButtons.classList.add(
            "opacity-100",
            "translate-y-0"
          );
        }
      } catch (error) {
        console.error("Cover Letter generation error:", error); // Keep critical error
        if (streamingContent) {
          streamingContent.innerHTML = `
                        <div class="text-red-500">
                            <p class="font-semibold">Error generating cover letter</p>
                            <p class="text-sm mt-2">${error}</p>
                        </div>
                    `;
        }
        // Optionally hide action buttons on error
        if (coverLetterActionButtons) {
          coverLetterActionButtons.classList.add("opacity-0", "translate-y-4");
          coverLetterActionButtons.classList.remove(
            "opacity-100",
            "translate-y-0"
          );
        }
      }
    });

    // Event Handlers for Modal Buttons
    downloadButton?.addEventListener("click", () => {
      handleButtonClick(downloadButton as HTMLButtonElement);
      const content = streamingContent?.textContent || "";
      const blob = new Blob([content], { type: "text/plain" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "cover-letter.txt";
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    });

    copyButton?.addEventListener("click", () => {
      handleButtonClick(copyButton as HTMLButtonElement);
      const content = streamingContent?.textContent || "";
      navigator.clipboard.writeText(content);

      // Change button color to indicate copied
      copyButton.classList.remove("bg-gray-700", "dark:bg-gray-300");
      copyButton.classList.add("bg-green-500", "dark:bg-green-500");
      copyButton.textContent = "Copied!";

      // Revert back after 2 seconds
      setTimeout(() => {
        copyButton.classList.remove("bg-green-500", "dark:bg-green-500");
        copyButton.classList.add("bg-gray-700", "dark:bg-gray-300");
        // Restore original content (icon + text)
        copyButton.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 sm:mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4" />
                    </svg>
                    <span class="hidden sm:inline">Copy</span>
                `;
      }, 2000);
    });

    closeButton?.addEventListener("click", () => {
      if (modal) {
        modal.classList.add("hidden");
      }
    });

    // Close modal when clicking outside
    modal.addEventListener("click", (event) => {
      const modalDialog = modal.querySelector(".relative.w-\\[95\\%]"); // Target the main dialog
      if (modalDialog && !modalDialog.contains(event.target as Node)) {
        modal.classList.add("hidden");
      }
    });
  });

  document.addEventListener("DOMContentLoaded", () => {
    const clearButton = document.getElementById("clearForm");
    const jobDescription = document.getElementById(
      "jobDescription"
    ) as HTMLTextAreaElement | null;
    const resumeContent = document.getElementById(
      "resumeContent"
    ) as HTMLTextAreaElement | null;
    const customInstructions = document.getElementById(
      "customInstructions"
    ) as HTMLTextAreaElement | null;

    // New UI elements handlers
    const enterManuallyButton = document.getElementById("enterManuallyButton");
    const cancelManualEntry = document.getElementById("cancelManualEntry");
    const changeResumeSource = document.getElementById("changeResumeSource");
    const resumeOptionsSelector = document.getElementById(
      "resumeOptionsSelector"
    );
    const manualEntryContainer = document.getElementById(
      "manualEntryContainer"
    );
    const resumeFileAddedUI = document.getElementById("resumeFileAddedUI");

    // Enter manually button handler
    enterManuallyButton?.addEventListener("click", () => {
      if (resumeOptionsSelector && manualEntryContainer) {
        resumeOptionsSelector.classList.add("hidden");
        manualEntryContainer.classList.remove("hidden");
        resumeFileAddedUI?.classList.add("hidden");
      }
    });

    // Cancel manual entry button handler
    cancelManualEntry?.addEventListener("click", () => {
      if (resumeOptionsSelector && manualEntryContainer) {
        resumeOptionsSelector.classList.remove("hidden");
        manualEntryContainer.classList.add("hidden");
      }
    });

    // Change resume source button handler
    changeResumeSource?.addEventListener("click", () => {
      if (resumeOptionsSelector && resumeFileAddedUI) {
        resumeOptionsSelector.classList.remove("hidden");
        resumeFileAddedUI.classList.add("hidden");
        manualEntryContainer?.classList.add("hidden");
      }
    });

    if (clearButton && jobDescription && resumeContent) {
      clearButton.addEventListener("click", (e) => {
        e.preventDefault(); // Prevent form submission

        // Clear all text areas
        jobDescription.value = "";
        resumeContent.value = "";

        // Clear custom instructions if it exists
        if (customInstructions) {
          customInstructions.value = "";
        }

        // Reset any template selections if needed
        const selectedTemplate = document.querySelector(
          'input[name="template"]:checked'
        ) as HTMLInputElement | null;
        if (selectedTemplate) {
          selectedTemplate.checked = false;
          // Optionally check the default one again
          const defaultTemplate = document.getElementById(
            "template-professional"
          ) as HTMLInputElement | null;
          if (defaultTemplate) defaultTemplate.checked = true;
        }
      });
    }

    // Clear resume content on initial load for cover letter page
    if (resumeContent && window.location.pathname.includes("/cover-letter")) {
      resumeContent.value = "";
    }
  });

  document.addEventListener("DOMContentLoaded", () => {
    const resumeFileUploadButton = document.getElementById(
      "resumeFileUploadButton"
    );
    const resumeFileInput = document.getElementById(
      "resumeFileInput"
    ) as HTMLInputElement;
    const resumeContentTextarea = document.getElementById(
      "resumeContent"
    ) as HTMLTextAreaElement;
    const uploadLoader = document.getElementById("uploadLoader"); // Get loader element

    // Add file upload button event listener
    resumeFileUploadButton?.addEventListener("click", async (e) => {
      // Prevent any form submission
      e.preventDefault();
      e.stopPropagation();

      // Trigger file input click
      resumeFileInput?.click();

      return false;
    });

    // Handle file selection
    resumeFileInput?.addEventListener("change", async (event) => {
      // Prevent default form submission
      event.preventDefault();

      const file = (event.target as HTMLInputElement).files?.[0];

      if (!file) {
        // console.error("No file selected"); // Removed for prod
        return;
      }

      // Supported file types
      const supportedTypes = [
        "application/pdf",
        "application/msword",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "text/plain",
        "text/rtf",
        "application/rtf",
      ];

      if (!supportedTypes.includes(file.type)) {
        alert(
          "Unsupported file type. Please upload a PDF, DOC, DOCX, TXT, or RTF file."
        );
        return;
      }

      // Show loader before starting upload
      uploadLoader?.classList.remove("hidden");

      // Convert file to base64
      const fileReader = new FileReader();
      fileReader.readAsDataURL(file);

      fileReader.onload = async () => {
        const base64File = fileReader.result as string;
        const base64Data = base64File.split(",")[1]; // Remove data URL prefix

        try {
          // Get current user and ID token for Authorization header
          const user = await authService.getCurrentUser();
          if (!user)
            throw new Error("You must be logged in to upload a resume.");
          const idToken = await user.getIdToken();
          // Send to server-side API
          const response = await fetch("/.netlify/functions/upload-resume", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${idToken}`,
            },
            body: JSON.stringify({
              fileBase64: base64Data,
              fileName: file.name,
              fileType: file.type,
            }),
          });

          // Parse response
          const result = await response.json();

          // Check for error in response
          if (!response.ok) {
            throw new Error(result.error || "Unknown server error");
          }

          if (result.success) {
            // Populate resume content textarea
            const resumeText = result.data.text; // Use 'resumeText' for clarity
            resumeContentTextarea.value = resumeText;

            // Optional: Trigger any validation or UI updates
            resumeContentTextarea.dispatchEvent(new Event("input"));

            // Show the file added UI and hide other elements
            const resumeFileAddedUI =
              document.getElementById("resumeFileAddedUI");
            const resumeOptionsSelector = document.getElementById(
              "resumeOptionsSelector"
            );
            const manualEntryContainer = document.getElementById(
              "manualEntryContainer"
            );

            if (resumeFileAddedUI && resumeOptionsSelector) {
              resumeFileAddedUI.classList.remove("hidden");
              resumeOptionsSelector.classList.add("hidden");
              manualEntryContainer?.classList.add("hidden");

              const resumeFileName = document.getElementById("resumeFileName");
              if (resumeFileName) {
                resumeFileName.textContent = `${file.name}`;
              }
            }
          } else {
            // Handle error response
            // console.error("Resume upload failed:", result); // Removed for prod
            alert(
              `Failed to upload resume: ${result.error || "Unknown error"}`
            );
          }
        } catch (error) {
          // Network or parsing errors
          // console.error("Resume upload error:", error); // Removed for prod
          alert(
            `Error uploading resume: ${error instanceof Error ? error.message : "Unknown error"}`
          );
        } finally {
          // Hide loader regardless of success or failure
          uploadLoader?.classList.add("hidden");
          // Reset file input value to allow re-uploading the same file
          resumeFileInput.value = "";
        }
      };

      fileReader.onerror = () => {
        // console.error("Error reading file"); // Removed for prod
        alert("Error reading file.");
        uploadLoader?.classList.add("hidden");
        resumeFileInput.value = "";
      };
    });
  });

  document.addEventListener("DOMContentLoaded", () => {
    const importResumeButton = document.getElementById("importResumeButton");
    const resumeContentTextarea = document.getElementById(
      "resumeContent"
    ) as HTMLTextAreaElement;

    if (!importResumeButton || !resumeContentTextarea) {
      // console.error("Required elements for resume import not found"); // Removed for prod
      return;
    }

    importResumeButton.addEventListener("click", async () => {
      try {
        const user = await authService.getCurrentUser();
        if (!user) {
          // Redirect to login or show login modal
          return;
        }

        // Create a modal dynamically
        const modal = document.createElement("div");
        modal.innerHTML = `
                    <div class="p-4 fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
                        <div class="bg-white dark:bg-gray-900 rounded-2xl p-6 max-w-md w-full max-h-[80vh] overflow-y-auto">
                            <div class="flex justify-between items-center mb-4">
                                <h2 class="text-2xl font-bold text-gray-900 dark:text-white">
                                    Resume Manager
                                </h2>
                                <button id="closeImportModal" class="text-gray-500 hover:text-gray-900 dark:hover:text-white">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>

                            <div class="mb-4">
                                <button
                                    id="addNewResumeButton"
                                    class="w-full inline-flex items-center justify-center px-4 py-3
                                    bg-black text-white
                                    rounded-xl
                                    hover:bg-primary-600
                                    transition-all duration-300
                                    focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                    </svg>
                                    Create New Resume
                                </button>
                            </div>

                            <div class="border-t border-gray-200 dark:border-gray-700 my-4"></div>

                            <div id="resumeList" class="space-y-3">
                                <!-- Existing Resumes will be dynamically populated here -->
                            </div>
                        </div>
                    </div>
                `;

        document.body.appendChild(modal);

        const closeModalButton = modal.querySelector("#closeImportModal");
        const addNewResumeButton = modal.querySelector("#addNewResumeButton");
        const resumeListContainer = modal.querySelector("#resumeList");

        closeModalButton?.addEventListener("click", () => {
          document.body.removeChild(modal);
        });

        // Add new resume functionality
        addNewResumeButton?.addEventListener("click", () => {
          // Navigate to Dashboard's Resume Manager section
          window.location.href = "/dashboard#addResumeBtn";
        });

        // Fetch and display resumes
        const resumes = await PersistentDocumentService.loadAllResumes();

        if (resumes.length === 0) {
          resumeListContainer!.innerHTML = `
                        <div class="text-center text-gray-500 dark:text-gray-400 py-6">
                            <p>No resumes found. Create a new resume to get started.</p>
                        </div>
                    `;
          return;
        }

        // Populate resume list
        resumeListContainer!.innerHTML = resumes
          .map(
            (resume, index) => `
                    <div class="bg-gray-100 dark:bg-gray-800 rounded-xl p-4 hover:bg-gray-200 dark:hover:bg-gray-700 cursor-pointer transition-colors resume-item"
                         data-resume-index="${index}">
                        <div class="flex justify-between items-center">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                                    ${resume.name || `Resume ${index + 1}`}
                                </h3>
                                <p class="text-sm text-gray-500 dark:text-gray-400">
                                    Last updated: ${new Date(resume.lastUpdated).toLocaleDateString()}
                                </p>
                            </div>
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                        </div>
                    </div>
                `
          )
          .join("");

        // Add click event to resume items
        const resumeItems = modal.querySelectorAll(".resume-item");
        resumeItems.forEach((item) => {
          item.addEventListener("click", () => {
            const index = item.getAttribute("data-resume-index");
            const selectedResume = resumes[Number(index)];

            // Populate resume content textarea
            resumeContentTextarea.value = selectedResume.content || "";

            // Show the file added UI and hide other elements
            const resumeFileAddedUI =
              document.getElementById("resumeFileAddedUI");
            const resumeOptionsSelector = document.getElementById(
              "resumeOptionsSelector"
            );
            const manualEntryContainer = document.getElementById(
              "manualEntryContainer"
            );

            if (resumeFileAddedUI && resumeOptionsSelector) {
              resumeFileAddedUI.classList.remove("hidden");
              resumeOptionsSelector.classList.add("hidden");
              manualEntryContainer?.classList.add("hidden");

              const resumeFileName = document.getElementById("resumeFileName");
              if (resumeFileName) {
                resumeFileName.textContent = `${selectedResume.name || "Imported Resume"}`;
              }
            }

            // Close modal
            document.body.removeChild(modal);
          });
        });
      } catch (error) {
        // console.error("Error importing resume:", error); // Keep minimal for prod
        // Show user-friendly error message
        const errorModal = document.createElement("div");
        errorModal.innerHTML = `
                    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
                        <div class="bg-white dark:bg-gray-900 rounded-2xl p-6 max-w-md w-full text-center">
                            <h2 class="text-2xl font-bold text-red-600 mb-4">
                                Import Error
                            </h2>
                            <p class="text-gray-600 dark:text-gray-400 mb-6">
                                Unable to import resumes. Please try again later.
                            </p>
                            <button id="closeErrorModal" class="bg-primary text-white px-4 py-2 rounded-full">
                                Close
                            </button>
                        </div>
                    </div>
                `;
        document.body.appendChild(errorModal);

        const closeErrorModalButton =
          errorModal.querySelector("#closeErrorModal");
        closeErrorModalButton?.addEventListener("click", () => {
          document.body.removeChild(errorModal);
        });
      }
    });
  });

  document.addEventListener("DOMContentLoaded", () => {
    const textareas = document.querySelectorAll(".typing-animation");

    textareas.forEach((textarea) => {
      textarea.addEventListener("focus", (e) => {
        // Type guard to ensure e.target is an HTMLTextAreaElement
        const target = e.target as HTMLTextAreaElement | null;
        if (!target) return;

        const placeholder = target.getAttribute("data-placeholder");
        if (!target.value) {
          target.setAttribute("placeholder", placeholder || "");
          let index = 0;
          const typeText = () => {
            if (placeholder && index < placeholder.length) {
              target.setAttribute(
                "placeholder",
                placeholder.slice(0, index + 1) + "|"
              );
              index++;
              setTimeout(typeText, 50);
            } else {
              target.setAttribute("placeholder", placeholder || "");
            }
          };

          typeText();
        }
      });

      textarea.addEventListener("blur", (e) => {
        const target = e.target as HTMLTextAreaElement | null;
        if (!target) return;

        if (!target.value) {
          target.setAttribute("placeholder", "");
        }
      });
    });
  });

  const coverLetterFileUploadButton = document.getElementById(
    "resumeFileUploadButton"
  );
  const uploadLoader = document.getElementById("uploadLoader");
  const coverLetterFileAddedUI = document.getElementById(
    "coverLetterFileAddedUI"
  );

  coverLetterFileUploadButton?.addEventListener("click", async () => {
    if (uploadLoader?.classList.contains("hidden")) {
      uploadLoader?.classList.remove("hidden"); // Show loader

      await new Promise((resolve) => setTimeout(resolve, 3000));
      uploadLoader?.classList.add("hidden");

      const targetUI =
        document.getElementById("coverLetterFileAddedUI") ??
        document.getElementById("resumeFileAddedUI");
      targetUI?.classList.remove("hidden");
    }
  });
</script>

<style>
  textarea.border-red-500 {
    border-color: rgb(239 68 68);
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }

  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  @keyframes typing {
    from {
      width: 0;
    }
    to {
      width: 100%;
    }
  }
  @keyframes blink-caret {
    from,
    to {
      border-color: transparent;
    }
    50% {
      border-color: theme("colors.white");
    }
  }
  .typing-animation:focus::placeholder {
    animation:
      typing 2s steps(30, end),
      blink-caret 0.75s step-end infinite;
    overflow: hidden;
    white-space: nowrap;
    border-right: 0.15em solid;
    color: theme("colors.gray.700");
    opacity: 1;
  }
</style>
