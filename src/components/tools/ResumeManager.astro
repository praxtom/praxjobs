---
import Container from "../Container.astro";
---

<section>
  <Container>
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <!-- Tips and Information Panel -->
      <div class="lg:col-span-1 space-y-6">
        <!-- Resume Hub Information -->
        <div
          class="bg-white border dark:bg-gray-900 rounded-2xl shadow-lg p-6 border-gray-200 dark:border-gray-900"
        >
          <div class="flex items-center space-x-4 mb-4">
            <div class="bg-gray-100 dark:bg-gray-700 p-3 rounded-xl">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-8 w-8 text-gray-600 dark:text-gray-300"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                ></path>
              </svg>
            </div>
            <h2 class="text-2xl font-bold text-gray-800 dark:text-white">
              Resume Hub
            </h2>
          </div>

          <p class="text-gray-600 dark:text-gray-300 mb-4">
            Centralize and manage all your professional documents in one secure
            place.
          </p>

          <div class="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700">
            <button
              id="addResumeBtn"
              class="w-full flex items-center justify-center space-x-2 px-4 py-3 bg-gray-800 text-white dark:bg-white dark:text-black rounded-xl
                                   hover:bg-gray-700 dark:hover:bg-gray-200 transition-all duration-300
                                   focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fill-rule="evenodd"
                  d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
                  clip-rule="evenodd"></path>
              </svg>
              <span>Manually Add Resume</span>
            </button>
            <button
              id="resumeUploadButton"
              class="w-full flex items-center justify-center space-x-2 px-4 py-3 bg-gray-800 text-white dark:bg-white dark:text-black rounded-xl
                                   hover:bg-gray-700 dark:hover:bg-gray-200 transition-all duration-300
                                   focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 mt-4"
            >
              <!-- File upload icon -->
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-5 w-5"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                  ></path>
                </svg>
              </svg>
              <span>Import</span>
            </button>
            <input id="resumeFileInput" type="file" class="hidden" />
            <div
              id="resumeUploadLoading"
              class="hidden text-gray-600 dark:text-gray-300 text-sm mt-2"
            >
              Uploading...
            </div>
          </div>
        </div>

        <!-- Quick Tips Section -->
        <div
          class="bg-white dark:bg-gray-900 rounded-2xl shadow-lg p-6 border border-gray-200 dark:border-gray-900 hidden sm:block"
        >
          <h4 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">
            Resume Tips
          </h4>
          <div class="space-y-3">
            <div class="flex items-start space-x-3">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5 text-blue-500 flex-shrink-0"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                ></path>
              </svg>
              <p class="text-sm text-gray-600 dark:text-gray-300">
                Tailor resumes for different jobs
              </p>
            </div>
            <div class="flex items-start space-x-3">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5 text-blue-500 flex-shrink-0"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <p class="text-sm text-gray-600 dark:text-gray-300">
                Update skills regularly
              </p>
            </div>
          </div>
        </div>
      </div>
      <!-- Resume List Panel -->
      <div class="lg:col-span-2 space-y-6">
        <div class="bg-transparent rounded-2xl sm:p-0">
          <div id="resumesList" class="grid gap-4 w-full"></div>
        </div>
      </div>
    </div>
  </Container>

  <!-- Resume Modal -->
  <div
    id="resumeModal"
    class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden items-center justify-center p-4 overflow-y-auto transition-opacity duration-300"
  >
    <div
      class="bg-white dark:bg-gray-800/90 rounded-3xl w-full max-w-4xl mx-auto shadow-2xl border border-gray-100
               dark:border-gray-700/50 transform transition-all duration-300 ease-in-out scale-95 opacity-0
               max-h-[90vh] flex flex-col transition-transform duration-300 scale-100 opacity-100"
      id="resumeModalContent"
    >
      <div
        class="flex items-center justify-between p-6 border-b border-gray-100 dark:border-gray-700"
      >
        <h3
          class="text-2xl font-bold text-black dark:text-white"
          id="modalTitle"
        >
          Add New Resume
        </h3>
        <button
          id="closeModalBtn"
          class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 transition-colors"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-8 w-8"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <div class="flex-grow overflow-y-auto p-6 space-y-6">
        <form id="resumeForm" class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label
                class="block text-sm font-medium text-gray-600 dark:text-gray-300 mb-2"
              >
                Resume Name
              </label>
              <input
                type="text"
                id="resumeName"
                class="w-full px-4 py-3 rounded-xl bg-gray-100 dark:bg-gray-700
                                   border border-transparent focus:border-blue-500 focus:ring
                                   focus:ring-blue-500/20 transition-all duration-300"
                required
                placeholder="e.g., Software Engineer Resume"
              />
            </div>
          </div>
          <div>
            <label
              class="block text-sm font-medium text-gray-600 dark:text-gray-300 mb-2"
            >
              Resume Content
            </label>
            <textarea
              id="resumeContent"
              rows="15"
              class="w-full px-4 py-3 rounded-xl bg-gray-100 dark:bg-gray-700
                               border border-transparent focus:border-blue-500 focus:ring
                               focus:ring-blue-500/20 transition-all duration-300 resize-y"
              required
              placeholder="Paste your resume content here..."></textarea>
          </div>
        </form>
      </div>

      <div
        class="p-6 border-t border-gray-100 dark:border-gray-700 flex justify-end space-x-4"
      >
        <button
          type="button"
          id="cancelResumeBtn"
          class="px-6 py-3 text-sm text-gray-600 dark:text-gray-300
                       hover:bg-gray-100 dark:hover:bg-gray-700 rounded-xl transition-colors"
        >
          Cancel
        </button>
        <button
          type="submit"
          form="resumeForm"
          class="px-6 py-3 text-sm bg-black text-white dark:bg-white dark:text-black
                       rounded-xl hover:bg-gray-800 dark:hover:bg-gray-200
                       transition-all duration-300 transform hover:scale-105
                       focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        >
          Save Resume
        </button>
      </div>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div
    id="deleteConfirmModal"
    class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden items-center justify-center p-4 overflow-y-auto transition-opacity duration-300"
  >
    <div
      class="bg-white dark:bg-gray-800/90 rounded-3xl w-full max-w-md mx-auto shadow-2xl border border-gray-100
               dark:border-gray-700/50 transform transition-all duration-300 ease-in-out scale-95 opacity-0
               flex flex-col p-6 text-center"
      id="deleteConfirmModalContent"
    >
      <div class="mb-4">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-16 w-16 mx-auto text-red-500 mb-4"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
          ></path>
        </svg>
        <h3 class="text-xl font-bold text-gray-800 dark:text-white mb-2">
          Delete Resume
        </h3>
        <p class="text-gray-600 dark:text-gray-300 mb-6">
          Are you sure you want to delete this resume? This action cannot be
          undone.
        </p>
      </div>
      <div class="flex justify-center space-x-4">
        <button
          id="cancelDeleteBtn"
          class="px-6 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
        >
          Cancel
        </button>
        <button
          id="confirmDeleteBtn"
          class="px-6 py-2 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors"
        >
          Delete
        </button>
      </div>
    </div>
  </div>

  <script>
    import { PersistentDocumentService } from "../../lib/persistentDocumentService";

    interface Resume {
      id: string;
      name: string;
      content: string;
      lastUpdated: number;
      userId?: string;
      createdAt: number;
    }

    let resumes: Resume[] = [];
    let editingResumeId: string | null = null;
    let currentResumeIdToDelete: string | null = null;
    // Pagination state variables
    let currentPage = 1;
    let itemsPerPage = 3;
    let totalPages = 1;

    async function loadResumes() {
      try {
        resumes = await PersistentDocumentService.loadAllResumes();
        // Calculate total pages
        totalPages = Math.ceil(resumes.length / itemsPerPage);
        // Ensure current page is valid
        if (currentPage > totalPages && totalPages > 0) {
          currentPage = totalPages;
        }
        renderResumeList(resumes);
      } catch (error) {
        console.error("Failed to load resumes:", error);
        alert("Failed to load resumes. Please try again.");
      }
    }

    function renderResumeList(resumes: Resume[]) {
      const resumesList = document.getElementById("resumesList");
      if (!resumesList) return;

      // Clear existing content
      resumesList.innerHTML = "";

      if (resumes.length === 0) {
        resumesList.innerHTML = `
                <div class="bg-white dark:bg-gray-900 rounded-xl p-4 border border-gray-200 dark:border-gray-900 flex items-center justify-center text-gray-500 dark:text-gray-300 w-full mx-auto">
                    No resumes added yet
                </div>
            `;
        return;
      }

      // Get resumes for current page
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = Math.min(startIndex + itemsPerPage, resumes.length);
      const currentResumes = resumes.slice(startIndex, endIndex);

      // Render resumes for current page
      currentResumes.forEach((resume) => {
        const resumeCard = createResumeCard(resume);
        resumesList.appendChild(resumeCard);
      });

      // Add pagination controls if needed
      if (resumes.length > itemsPerPage) {
        const paginationContainer = document.createElement("div");
        paginationContainer.className =
          "flex justify-center items-center mt-6 space-x-2";

        // Previous page button
        const prevButton = document.createElement("button");
        prevButton.className = `
                    px-3 py-1.5 
                    bg-gray-100 dark:bg-gray-700 
                    text-gray-700 dark:text-gray-300 
                    rounded-lg
                    flex items-center gap-1.5 
                    text-sm 
                    ${currentPage === 1 ? "opacity-50 cursor-not-allowed" : "hover:bg-gray-200 dark:hover:bg-gray-600 cursor-pointer"}
                    transition-colors 
                    focus:outline-none 
                    focus:ring-2 focus:ring-primary/30
                `;
        prevButton.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                    Previous
                `;
        prevButton.disabled = currentPage === 1;
        prevButton.addEventListener("click", () => {
          if (currentPage > 1) {
            currentPage--;
            renderResumeList(resumes);
          }
        });

        // Page indicator
        const pageIndicator = document.createElement("div");
        pageIndicator.className = "text-sm text-gray-700 dark:text-gray-300";
        pageIndicator.textContent = `Page ${currentPage} of ${totalPages}`;

        // Next page button
        const nextButton = document.createElement("button");
        nextButton.className = `
                    px-3 py-1.5 
                    bg-gray-100 dark:bg-gray-700 
                    text-gray-700 dark:text-gray-300 
                    rounded-lg
                    flex items-center gap-1.5 
                    text-sm 
                    ${currentPage === totalPages ? "opacity-50 cursor-not-allowed" : "hover:bg-gray-200 dark:hover:bg-gray-600 cursor-pointer"}
                    transition-colors 
                    focus:outline-none 
                    focus:ring-2 focus:ring-primary/30
                `;
        nextButton.innerHTML = `
                    Next
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                `;
        nextButton.disabled = currentPage === totalPages;
        nextButton.addEventListener("click", () => {
          if (currentPage < totalPages) {
            currentPage++;
            renderResumeList(resumes);
          }
        });

        // Append pagination controls
        paginationContainer.appendChild(prevButton);
        paginationContainer.appendChild(pageIndicator);
        paginationContainer.appendChild(nextButton);
        resumesList.appendChild(paginationContainer);
      }
    }

    // Utility function to generate a consistent color based on a string
    function stringToColor(str: string): string {
      const colors = [
        "bg-blue-500",
        "bg-green-500",
        "bg-purple-500",
        "bg-pink-500",
        "bg-indigo-500",
        "bg-teal-500",
        "bg-orange-500",
        "bg-red-500",
        "bg-cyan-500",
      ];

      // Use a simple hash to consistently map the string to a color
      let hash = 0;
      for (let i = 0; i < str.length; i++) {
        hash = str.charCodeAt(i) + ((hash << 5) - hash);
      }

      return colors[Math.abs(hash) % colors.length];
    }

    function createResumeCard(resume: Resume) {
      const card = document.createElement("div");
      card.className = `
            relative bg-white dark:bg-gray-800/50 
            backdrop-blur-xl 
            border border-gray-200/50 dark:border-gray-700/30 
            rounded-2xl 
            p-6 
            flex flex-col 
            transition-all duration-300 
            shadow-md dark:shadow-gray-800/20 
            h-full 

        `;
      card.setAttribute("data-resume-id", resume.id);

      // Resume name and initial
      const initialContainer = document.createElement("div");
      initialContainer.className = "flex items-center space-x-4 mb-2";

      const initialCircle = document.createElement("div");
      initialCircle.className = `
            w-12 h-12 rounded-full 
            flex items-center justify-center 
            text-white
            ${stringToColor(resume.name)}
        `;

      // Professional document/resume icon SVG
      const documentIcon = document.createElementNS(
        "http://www.w3.org/2000/svg",
        "svg"
      );
      documentIcon.setAttribute("xmlns", "http://www.w3.org/2000/svg");
      documentIcon.setAttribute("class", "h-6 w-6");
      documentIcon.setAttribute("fill", "none");
      documentIcon.setAttribute("viewBox", "0 0 24 24");
      documentIcon.setAttribute("stroke", "currentColor");
      documentIcon.setAttribute("stroke-width", "1.5");

      const documentPath = document.createElementNS(
        "http://www.w3.org/2000/svg",
        "path"
      );
      documentPath.setAttribute("stroke-linecap", "round");
      documentPath.setAttribute("stroke-linejoin", "round");
      documentPath.setAttribute(
        "d",
        "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
      );

      documentIcon.appendChild(documentPath);
      initialCircle.appendChild(documentIcon);

      const nameElement = document.createElement("h3");
      nameElement.className =
        "text-lg font-semibold text-gray-900 dark:text-white";
      nameElement.textContent = resume.name;

      initialContainer.appendChild(initialCircle);
      initialContainer.appendChild(nameElement);

      // Added on date
      const dateContainer = document.createElement("div");
      dateContainer.className =
        "text-sm text-gray-500 dark:text-gray-400 flex items-center space-x-2";

      const calendarIcon = document.createElementNS(
        "http://www.w3.org/2000/svg",
        "svg"
      );
      calendarIcon.setAttribute("xmlns", "http://www.w3.org/2000/svg");
      calendarIcon.setAttribute("class", "h-4 w-4");
      calendarIcon.setAttribute("fill", "none");
      calendarIcon.setAttribute("viewBox", "0 0 24 24");
      calendarIcon.setAttribute("stroke", "currentColor");

      const calendarPath = document.createElementNS(
        "http://www.w3.org/2000/svg",
        "path"
      );
      calendarPath.setAttribute("stroke-linecap", "round");
      calendarPath.setAttribute("stroke-linejoin", "round");
      calendarPath.setAttribute("stroke-width", "2");
      calendarPath.setAttribute(
        "d",
        "M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
      );

      calendarIcon.appendChild(calendarPath);

      const dateElement = document.createElement("span");
      const addedDate = resume.createdAt
        ? new Date(resume.createdAt).toLocaleDateString()
        : "Unknown";
      dateElement.textContent = `Added on ${addedDate}`;

      dateContainer.appendChild(calendarIcon);
      dateContainer.appendChild(dateElement);

      // Action buttons container
      const actionContainer = document.createElement("div");
      actionContainer.className = "flex justify-end space-x-2 mt-auto";

      // Edit button
      const editButton = document.createElement("button");
      editButton.className = `
            edit-resume-btn 
            px-3 py-1.5 
            bg-gray-100 dark:bg-gray-700 
            text-gray-700 dark:text-gray-300 
            rounded-full 
            flex items-center gap-1.5 
            text-sm 
            hover:bg-gray-200 dark:hover:bg-gray-600 
            transition-colors 
            focus:outline-none 
            focus:ring-2 focus:ring-primary/30
        `;
      editButton.setAttribute("data-id", resume.id);
      editButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
            </svg>
            Edit
        `;

      // Delete button
      const deleteButton = document.createElement("button");
      deleteButton.className = `
            delete-resume-btn 
            px-3 py-1.5 
            bg-red-50 dark:bg-red-900/20 
            text-red-600 dark:text-red-400 
            rounded-full 
            flex items-center gap-1.5 
            text-sm 
            hover:bg-red-100 dark:hover:bg-red-900/30 
            transition-colors 
            focus:outline-none 
            focus:ring-2 focus:ring-red-300/30
        `;
      deleteButton.setAttribute("data-id", resume.id);
      deleteButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
            Delete
        `;

      actionContainer.appendChild(editButton);
      actionContainer.appendChild(deleteButton);

      // Append all elements
      card.appendChild(initialContainer);
      card.appendChild(dateContainer);
      card.appendChild(actionContainer);

      return card;
    }

    function showDeleteConfirmModal(resumeId: string) {
      const deleteConfirmModal = document.getElementById("deleteConfirmModal");
      if (deleteConfirmModal) {
        // Store the current resume ID
        currentResumeIdToDelete = resumeId;

        // Show modal
        deleteConfirmModal.classList.remove("hidden");
        deleteConfirmModal.classList.add("flex");

        // Animate modal in
        setTimeout(() => {
          const deleteConfirmModalContent =
            deleteConfirmModal.querySelector(".bg-white");
          if (deleteConfirmModalContent) {
            deleteConfirmModalContent.classList.remove("scale-95", "opacity-0");
            deleteConfirmModalContent.classList.add("scale-100", "opacity-100");
          }
        }, 10);
      }
    }

    function hideDeleteConfirmModal() {
      const deleteConfirmModal = document.getElementById("deleteConfirmModal");
      if (deleteConfirmModal) {
        const deleteConfirmModalContent =
          deleteConfirmModal.querySelector(".bg-white");

        // Animate modal out
        if (deleteConfirmModalContent) {
          deleteConfirmModalContent.classList.add("scale-95", "opacity-0");
          deleteConfirmModalContent.classList.remove(
            "scale-100",
            "opacity-100"
          );
        }

        // Hide modal after animation
        setTimeout(() => {
          deleteConfirmModal.classList.remove("flex");
          deleteConfirmModal.classList.add("hidden");

          // Reset the current resume ID
          currentResumeIdToDelete = null;
        }, 300);
      }
    }

    async function confirmDeleteResume() {
      if (currentResumeIdToDelete) {
        try {
          await PersistentDocumentService.deleteResume(currentResumeIdToDelete);

          // Check if we need to adjust the current page after deletion
          if (
            resumes.length % itemsPerPage === 1 &&
            currentPage === totalPages &&
            currentPage > 1
          ) {
            currentPage--;
          }

          await loadResumes();
        } catch (error) {
          console.error("Failed to delete resume:", error);
          alert("Failed to delete resume. Please try again.");
        } finally {
          // Always hide the modal
          hideDeleteConfirmModal();
        }
      }
    }

    async function openResume(id: string) {
      const resume = resumes.find((r) => r.id === id);
      if (!resume) return;

      // Set editing state before showing modal
      editingResumeId = id;

      // Get form elements
      const form = document.getElementById("resumeForm") as HTMLFormElement;
      const nameInput = document.getElementById(
        "resumeName"
      ) as HTMLInputElement;
      const contentInput = document.getElementById(
        "resumeContent"
      ) as HTMLTextAreaElement;
      const submitButton = document.querySelector(
        'button[type="submit"]'
      ) as HTMLButtonElement;

      // Reset form first
      if (form) form.reset();

      // Populate form fields
      if (nameInput) {
        nameInput.value = resume.name;
        nameInput.readOnly = false;
      }

      if (contentInput) {
        contentInput.value = resume.content;
        contentInput.readOnly = false;
      }

      // Update submit button
      if (submitButton) {
        submitButton.style.display = "block";
        submitButton.textContent = "Save Changes";
      }

      // Show modal after setting up form
      showModal();
    }

    async function handleResumeSubmit(event: Event) {
      event.preventDefault();

      const nameInput = document.getElementById(
        "resumeName"
      ) as HTMLInputElement;
      const contentInput = document.getElementById(
        "resumeContent"
      ) as HTMLTextAreaElement;

      const resumeData = {
        name: nameInput.value.trim(),
        content: contentInput.value.trim(),
        lastUpdated: Date.now(),
        createdAt: Date.now(),
      };

      if (!resumeData.name || !resumeData.content) {
        alert("Please fill in both name and content fields.");
        return;
      }

      try {
        let result;
        if (editingResumeId) {
          // Updating existing resume
          result = await PersistentDocumentService.updateResume(
            editingResumeId,
            {
              name: resumeData.name,
              content: resumeData.content,
              lastUpdated: resumeData.lastUpdated,
            }
          );
        } else {
          // Adding new resume
          result = await PersistentDocumentService.createResume(resumeData);

          // Immediately open the newly added resume for editing
          editingResumeId = result.id;

          // Navigate to the last page if a new resume is added
          const newTotalPages = Math.ceil((resumes.length + 1) / itemsPerPage);
          if (newTotalPages > totalPages) {
            currentPage = newTotalPages;
          }
        }

        // Reset form and close modal
        nameInput.value = "";
        contentInput.value = "";
        editingResumeId = null;

        // Reload resumes to reflect changes
        await loadResumes();

        // Close the modal
        hideModal();
      } catch (error) {
        console.error("Failed to save resume:", error);
        alert("Failed to save resume. Please try again.");
      }
    }

    function showModal() {
      const modal = document.getElementById("resumeModal");
      const modalContent = document.getElementById("resumeModalContent");
      const modalTitle = document.getElementById("modalTitle");

      if (modal && modalContent && modalTitle) {
        modal.classList.remove("hidden");
        modal.classList.add("flex");

        // Allow the flex display to take effect before adding animations
        setTimeout(() => {
          modalContent.classList.remove("scale-95", "opacity-0");
          modalContent.classList.add("scale-100", "opacity-100");
        }, 10);

        modalTitle.textContent = editingResumeId
          ? "Edit Resume"
          : "Add New Resume";
      }
    }

    function hideModal() {
      const modal = document.getElementById("resumeModal");
      const modalContent = document.getElementById("resumeModalContent");
      const form = document.getElementById("resumeForm") as HTMLFormElement;

      if (modal && modalContent) {
        // Start hiding animation
        modalContent.classList.add("scale-95", "opacity-0");
        modalContent.classList.remove("scale-100", "opacity-100");

        // Wait for animation to complete before hiding modal
        setTimeout(() => {
          modal.classList.remove("flex");
          modal.classList.add("hidden");

          // Reset form and editing state
          if (form) form.reset();
          editingResumeId = null;

          const submitButton = document.querySelector(
            'button[type="submit"]'
          ) as HTMLButtonElement;
          if (submitButton) {
            submitButton.textContent = "Add Resume";
          }
        }, 300);
      }
    }

    async function handleResumeFileUpload(event: Event) {
      const fileInput = event.target as HTMLInputElement;
      const file = fileInput.files?.[0];

      if (!file) {
        console.error("No file selected");
        return;
      }

      // Create loading state
      const loadingIndicator = document.getElementById("resumeUploadLoading");
      const uploadButton = document.getElementById("resumeUploadButton");

      if (loadingIndicator) loadingIndicator.classList.remove("hidden");
      if (uploadButton) {
        (uploadButton as HTMLButtonElement).disabled = true;
      }

      try {
        // Convert file to base64
        const fileReader = new FileReader();
        fileReader.readAsDataURL(file);

        fileReader.onload = async () => {
          const base64File = fileReader.result as string;
          const base64Data = base64File.split(",")[1]; // Remove data URL prefix

          try {
            // Generate a unique file name
            const originalFileName = file.name.replace(/\.[^/.]+$/, ""); // Remove file extension
            const fileExtension = file.name.split(".").pop(); // Get file extension
            const randomString = Math.random().toString(36).substring(2, 5); // Random 3-letter string
            const finalFileName = `${originalFileName}_${randomString}.${fileExtension}`;

            // Send to server-side API
            const response = await fetch("/.netlify/functions/upload-resume", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                fileBase64: base64Data,
                fileName: finalFileName,
                fileType: file.type,
              }),
            });

            // Parse response
            const result = await response.json();

            // Check for error in response
            if (!response.ok) {
              throw new Error(result.error || "Unknown server error");
            }

            if (result.success) {
              // Integrate with existing resume creation logic
              const resumeData = result.data;
              const resumeName = finalFileName.replace(/\.[^/.]+$/, ""); // Remove file extension
              const resumeContent = resumeData.text;

              // Use existing resume submission logic
              const nameInput = document.getElementById(
                "resumeName"
              ) as HTMLInputElement;
              const contentInput = document.getElementById(
                "resumeContent"
              ) as HTMLTextAreaElement;

              if (nameInput && contentInput) {
                nameInput.value = resumeName;
                contentInput.value = resumeContent;

                // Explicitly trigger resume submission
                const submitEvent = new Event("submit", {
                  bubbles: true,
                });
                const form = document.getElementById("resumeForm");
                if (form) {
                  form.dispatchEvent(submitEvent);
                } else {
                  console.error("Resume form not found");
                }
              }
            } else {
              // Handle error response
              console.error("Resume upload failed:", result);
              alert(
                `Failed to upload resume: ${result.error || "Unknown error"}`
              );
            }
          } catch (error) {
            // Network or parsing errors
            console.error("Resume upload error:", error);
            alert(
              `Error uploading resume: ${error instanceof Error ? error.message : "Unknown error"}`
            );
          }
        };
      } catch (error) {
        console.error("Resume upload error:", error);
        alert("An error occurred while uploading the resume");
      } finally {
        if (loadingIndicator) loadingIndicator.classList.add("hidden");
        if (uploadButton) {
          (uploadButton as HTMLButtonElement).disabled = false;
        }
        // Clear the file input value to allow re-uploading the same file
        fileInput.value = "";
      }
    }

    // Function to check if a file already exists in Firebase
    async function checkIfFileExistsInFirebase(
      fileName: string
    ): Promise<boolean> {
      try {
        // Replace this with your Firebase logic to check if the file exists
        const response = await fetch(
          `/api/check-file-exists?fileName=${fileName}`
        );
        const result = await response.json();
        return result.exists;
      } catch (error) {
        console.error("Error checking file existence in Firebase:", error);
        return false;
      }
    }

    // Add event listeners
    document.addEventListener("DOMContentLoaded", () => {
      loadResumes();

      const resumeForm = document.getElementById("resumeForm");
      if (resumeForm) {
        resumeForm.addEventListener("submit", handleResumeSubmit);
      }

      const addResumeBtn = document.getElementById("addResumeBtn");
      if (addResumeBtn) {
        addResumeBtn.addEventListener("click", () => {
          editingResumeId = null;
          const submitButton = document.querySelector(
            'button[type="submit"]'
          ) as HTMLButtonElement;
          if (submitButton) {
            submitButton.textContent = "Add Resume";
          }
          showModal();
        });
      }

      const uploadResumeBtn = document.getElementById("resumeUploadButton");
      if (uploadResumeBtn) {
        uploadResumeBtn.addEventListener("click", () => {
          const fileInput = document.getElementById(
            "resumeFileInput"
          ) as HTMLInputElement;
          if (fileInput) fileInput.click();
        });
      }

      const fileInput = document.getElementById("resumeFileInput");
      if (fileInput) {
        fileInput.addEventListener("change", handleResumeFileUpload);
      }

      const closeModalBtn = document.getElementById("closeModalBtn");
      if (closeModalBtn) {
        closeModalBtn.addEventListener("click", hideModal);
      }

      const cancelResumeBtn = document.getElementById("cancelResumeBtn");
      if (cancelResumeBtn) {
        cancelResumeBtn.addEventListener("click", hideModal);
      }

      const cancelDeleteBtn = document.getElementById("cancelDeleteBtn");
      if (cancelDeleteBtn) {
        cancelDeleteBtn.onclick = () => hideDeleteConfirmModal();
      }

      const confirmDeleteBtn = document.getElementById("confirmDeleteBtn");
      if (confirmDeleteBtn) {
        confirmDeleteBtn.onclick = () => confirmDeleteResume();
      }

      // Event delegation for resume list actions
      const resumesList = document.getElementById("resumesList");
      if (resumesList) {
        resumesList.addEventListener("click", async (event) => {
          const target = event.target as HTMLElement;

          // Delete resume handler
          const deleteButton = target.closest(".delete-resume-btn");
          if (deleteButton) {
            event.preventDefault();
            event.stopPropagation();

            const resumeId = deleteButton.getAttribute("data-id");
            if (resumeId) {
              showDeleteConfirmModal(resumeId);
            }
            return;
          }

          // Edit resume handler
          const editButton = target.closest(".edit-resume-btn");
          if (editButton) {
            event.preventDefault();
            event.stopPropagation();

            const resumeId = editButton.getAttribute("data-id");
            if (resumeId) {
              // Find the specific resume
              const resume = resumes.find((r) => r.id === resumeId);
              if (resume) {
                // Populate modal with resume data
                editingResumeId = resumeId;

                const nameInput = document.getElementById(
                  "resumeName"
                ) as HTMLInputElement;
                const contentInput = document.getElementById(
                  "resumeContent"
                ) as HTMLTextAreaElement;
                const submitButton = document.querySelector(
                  'button[type="submit"]'
                ) as HTMLButtonElement;

                if (nameInput && contentInput && submitButton) {
                  nameInput.value = resume.name;
                  contentInput.value = resume.content;
                  submitButton.textContent = "Update Resume";
                }

                showModal();
              }
            }
          }
        });
      }
    });
  </script>
</section>
