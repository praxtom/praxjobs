<section class="relative py-16 sm:py-24 lg:py-32 bg-white dark:bg-gray-950">
  {/* Background Gradient Elements */}
  <div
    aria-hidden="true"
    class="absolute inset-0 grid grid-cols-2 -space-x-52 opacity-0 dark:opacity-0 transition-opacity duration-300 ease-in-out"
  >
    <div
      class="blur-[106px] h-56 bg-gradient-to-br from-primary to-purple-400 dark:from-blue-700 dark:to-indigo-600 opacity-40 dark:opacity-20"
    >
    </div>
    <div
      class="blur-[106px] h-32 bg-gradient-to-r from-cyan-400 to-sky-300 dark:to-indigo-600 dark:from-emerald-500 opacity-40 dark:opacity-20"
    >
    </div>
  </div>

  {/* Main Content Container */}
  <div class="relative w-full">
    <div class="container mx-auto px-3 md:px-6 lg:px-8 max-w-6xl">
      {/* Form Wrapper */}
      <div class="w-full mx-auto">
        <form
          id="resumeForm"
          class="w-full space-y-6 sm:space-y-8 bg-white dark:bg-gray-900/80 backdrop-blur-md rounded-3xl p-4 sm:p-8
                    shadow-xl border-gray-100 border dark:border-gray-700/50
                    transition-all duration-300 ease-in-out hover:shadow-2xl"
        >
          {/* Job Description Section */}
          <div class="grid grid-cols-1 gap-3 sm:gap-6">
            <div class="space-y-1.5 sm:space-y-2">
              <label
                for="jobDescription"
                class="block text-left text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Job Description <span class="text-red-600"> *</span>
              </label>
              <textarea
                id="jobDescription"
                placeholder="Paste the complete job description here."
                rows="6"
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-700/70 bg-white dark:bg-gray-800/30 rounded-xl
                                dark:text-gray-100 focus:border-primary dark:focus:border-primary focus:ring-1 focus:ring-primary
                                outline-none text-md transition-colors duration-200 resize-y"
                required></textarea>
            </div>
          </div>

          {/* Resume Input Section */}
          <div class="grid grid-cols-1 gap-3 sm:gap-6">
            <div class="space-y-1.5 sm:space-y-2">
              <label
                class="block text-left text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Resume <span class="text-red-600">*</span>
              </label>
              <input type="file" id="resumeFileInput" class="hidden" />

              {/* Resume Options Selector */}
              <div
                id="resumeOptionsSelector"
                class="flex flex-col sm:flex-row gap-3 mt-2"
              >
                <button
                  type="button"
                  id="resumeFileUploadButton"
                  class="flex-1 py-4 px-4 border-2 border-gray-300 dark:border-gray-700 rounded-xl
              bg-white/10 dark:bg-gray-800/20 hover:bg-white/20 dark:hover:bg-gray-800/30
              transition-all duration-300 text-center group"
                >
                  <div
                    class="flex flex-col items-center justify-center space-y-2"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-7 w-7 text-primary group-hover:text-primary-dark transition-colors duration-300"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                      ></path>
                    </svg>
                    <span
                      class="block font-medium text-gray-900 dark:text-white"
                      >Upload File</span
                    >
                    <span class="text-xs text-gray-500 dark:text-gray-400"
                      >PDF, DOCX, TXT</span
                    >
                  </div>
                </button>

                <button
                  type="button"
                  id="importResumeButton"
                  class="flex-1 py-4 px-4 border-2 border-gray-300 dark:border-gray-700 rounded-xl
              bg-white/10 dark:bg-gray-800/20 hover:bg-white/20 dark:hover:bg-gray-800/30
              transition-all duration-300 text-center group"
                >
                  <div
                    class="flex flex-col items-center justify-center space-y-2"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-7 w-7 text-primary group-hover:text-primary-dark transition-colors duration-300"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4"
                      ></path>
                    </svg>
                    <span
                      class="block font-medium text-gray-900 dark:text-white"
                      >Resume Manager</span
                    >
                    <span class="text-xs text-gray-500 dark:text-gray-400"
                      >Select from saved resumes</span
                    >
                  </div>
                </button>

                <button
                  type="button"
                  id="enterManuallyButton"
                  class="flex-1 py-4 px-4 border-2 border-gray-300 dark:border-gray-700 rounded-xl
              bg-white/10 dark:bg-gray-800/20 hover:bg-white/20 dark:hover:bg-gray-800/30
              transition-all duration-300 text-center group"
                >
                  <div
                    class="flex flex-col items-center justify-center space-y-2"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-7 w-7 text-primary group-hover:text-primary-dark transition-colors duration-300"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 0L11.828 15H9v-2.828l8.586-8.586z"
                      ></path>
                    </svg>
                    <span
                      class="block font-medium text-gray-900 dark:text-white"
                      >Enter Manually</span
                    >
                    <span class="text-xs text-gray-500 dark:text-gray-400"
                      >Paste or type resume</span
                    >
                  </div>
                </button>
              </div>

              {/* Loader UI */}
              <div
                id="uploadLoader"
                class="hidden fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 z-50"
              >
                <div
                  class="loader animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-gray-300 shadow-lg"
                  style="border-top-color: #007aff;"
                >
                </div>
              </div>
              {/* Loader specific style - kept close for context */}
              <style is:inline>
                .loader {
                  border-radius: 50%;
                  animation: spin 1s linear infinite;
                }
                @keyframes spin {
                  0% {
                    transform: rotate(0deg);
                  }
                  100% {
                    transform: rotate(360deg);
                  }
                }
              </style>

              {/* File Added UI */}
              <div
                id="resumeFileAddedUI"
                class="hidden w-full p-6 border-2 border-gray-300 dark:border-gray-700 rounded-xl bg-white/10 dark:bg-gray-800/20 transition-all duration-300"
              >
                <div class="flex items-center justify-between">
                  <div class="flex items-center space-x-3">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-6 w-6 text-green-500"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                      ></path>
                    </svg>
                    <div>
                      <div
                        class="text-sm font-medium text-gray-900 dark:text-white"
                      >
                        Resume Added
                      </div>
                      <div id="resumeFileName" class="text-xs text-gray-500">
                        Document.pdf
                      </div>
                    </div>
                  </div>
                  <button
                    type="button"
                    id="changeResumeSource"
                    class="text-xs bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-full px-3 py-1 transition-colors duration-200"
                    >Change</button
                  >
                </div>
              </div>

              {/* Manual Entry UI */}
              <div id="manualEntryContainer" class="hidden w-full">
                <textarea
                  id="resumeContent"
                  name="resumeContent"
                  rows="8"
                  placeholder="Paste or type your resume here..."
                  class="w-full px-4 py-3 border border-gray-300 dark:border-gray-700/70 bg-white dark:bg-gray-800/30 rounded-xl
                            dark:text-gray-100 focus:border-primary dark:focus:border-primary focus:ring-1 focus:ring-primary
                            outline-none text-md transition-colors duration-200 resize-y"
                  required></textarea>
                <div class="flex justify-end mt-2">
                  <button
                    type="button"
                    id="cancelManualEntry"
                    class="text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors"
                  >
                    Back to options
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* Custom Instructions Section */}
          <div class="grid grid-cols-1 gap-3 sm:gap-6">
            <div class="space-y-1.5 sm:space-y-2">
              <label
                for="customInstructions"
                class="block text-left text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Custom Instructions <span
                  class="text-xs sm:text-sm text-gray-500 dark:text-gray-400 ml-2"
                  >(Optional)</span
                >
              </label>
              <textarea
                id="customInstructions"
                placeholder="Optional instructions to help stand out."
                rows="3"
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-700/70 bg-white dark:bg-gray-800/30 rounded-xl
                        dark:text-gray-100 focus:border-primary dark:focus:border-primary focus:ring-1 focus:ring-primary
                        outline-none text-md transition-colors duration-200 resize-y"
              ></textarea>
            </div>
          </div>

          {/* Action Buttons Section */}
          <div
            class="flex flex-col sm:flex-row justify-center items-center space-y-2.5 sm:space-y-0 sm:space-x-4 pt-4"
          >
            <button
              type="submit"
              class="w-full sm:w-auto inline-flex h-11 sm:h-12 items-center justify-center px-6 sm:px-8 py-2 sm:py-3
                        text-sm sm:text-base font-semibold
                        text-white bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700
                        dark:text-white dark:bg-gradient-to-r dark:from-blue-500 dark:to-indigo-500 dark:hover:from-blue-600 dark:hover:to-indigo-600
                        rounded-full
                        transition-all duration-300 ease-in-out
                        transform hover:scale-[1.03] active:scale-95
                        focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900
                        shadow-lg hover:shadow-xl"
            >
              <svg
                id="generateIcon"
                class="w-5 h-5 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
                ><path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M13 10V3L4 14h7v7l9-11h-7z"></path></svg
              >
              <svg
                id="generateSpinner"
                class="animate-spin -ml-1 mr-3 h-5 w-5 text-white hidden"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  class="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"></circle>
                <path
                  class="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
              <span id="generateButtonText">Generate Resume</span>
            </button>
            <button
              type="button"
              id="clearForm"
              class="w-full sm:w-auto inline-flex h-11 sm:h-12 items-center justify-center px-6 sm:px-8 py-2 sm:py-3
                        text-sm sm:text-base font-semibold
                        text-gray-700 bg-gray-100 hover:bg-gray-200
                        dark:text-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600
                        border border-transparent
                        rounded-full
                        transition-all duration-300 ease-in-out
                        transform hover:scale-[1.03] active:scale-95
                        focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 dark:focus:ring-offset-gray-900
                        shadow-md hover:shadow-lg"
            >
              <svg
                class="w-5 h-5 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
                ><path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                ></path></svg
              >
              Clear
            </button>
          </div>
        </form>
      </div>

      {/* Result Placeholders */}
      <div id="resumeResult" class="mt-6"></div>
      <div id="tierInfo"></div>
    </div>
  </div>
</section>

<style>
  /* General Styles */
  textarea.border-red-500,
  input.border-red-500,
  button.border-red-500 {
    border-color: rgb(239 68 68);
  }
  #resumeOptionsSelector button.border-red-500:hover {
    border-color: rgb(239 68 68);
    background-color: rgba(239, 68, 68, 0.05);
  }
  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  /* Removed typing animation styles as per comment in original */
  /* @keyframes typing { ... } */
  /* @keyframes blink-caret { ... } */
</style>

<script>
  // Imports
  import { TierManagementService } from "../../lib/tierManagement";
  import { authService } from "../../lib/auth";
  import { PersistentDocumentService } from "../../lib/persistentDocumentService";

  // Encapsulate all logic within a single DOMContentLoaded listener
  document.addEventListener("DOMContentLoaded", () => {
    // --- 1. Get DOM Element References ---
    const form = document.getElementById(
      "resumeForm"
    ) as HTMLFormElement | null;
    const resultContainer = document.getElementById("resumeResult");
    const jobDescriptionInput = document.getElementById(
      "jobDescription"
    ) as HTMLTextAreaElement | null;
    const resumeContentTextarea = document.getElementById(
      "resumeContent"
    ) as HTMLTextAreaElement | null;
    const customInstructionsInput = document.getElementById(
      "customInstructions"
    ) as HTMLTextAreaElement | null;
    const resumeFileInput = document.getElementById(
      "resumeFileInput"
    ) as HTMLInputElement | null;
    const resumeOptionsSelector = document.getElementById(
      "resumeOptionsSelector"
    );
    const resumeFileUploadButton = document.getElementById(
      "resumeFileUploadButton"
    );
    const importResumeButton = document.getElementById("importResumeButton");
    const enterManuallyButton = document.getElementById("enterManuallyButton");
    const uploadLoader = document.getElementById("uploadLoader");
    const resumeFileAddedUI = document.getElementById("resumeFileAddedUI");
    const resumeFileNameEl = document.getElementById("resumeFileName");
    const manualEntryContainer = document.getElementById(
      "manualEntryContainer"
    );
    const cancelManualEntryButton =
      document.getElementById("cancelManualEntry");
    const changeResumeSourceButton =
      document.getElementById("changeResumeSource");
    const clearButton = document.getElementById("clearForm");
    // Note: Generate button elements (icon, spinner, text) are referenced within the submit handler

    // Early exit if essential elements are missing
    if (
      !form ||
      !resultContainer ||
      !jobDescriptionInput ||
      !resumeContentTextarea ||
      !resumeFileInput
    ) {
      console.error(
        "Essential form elements not found. Initialization aborted."
      );
      return;
    }

    // --- 2. Define Helper Functions ---

    // Input validation function
    function validateInput(
      input: HTMLTextAreaElement,
      minLength: number = 10
    ): boolean {
      const value = input.value.trim();
      const isValid = value.length >= minLength;
      let errorMessageEl = input.nextElementSibling as HTMLElement | null;

      if (
        !errorMessageEl ||
        !errorMessageEl.classList.contains("validation-error")
      ) {
        errorMessageEl = document.createElement("div");
        errorMessageEl.classList.add(
          "validation-error",
          "text-red-500",
          "text-sm",
          "mt-1"
        );
        input.parentNode?.insertBefore(errorMessageEl, input.nextSibling);
      }

      input.classList.toggle("border-red-500", !isValid);
      input.classList.toggle("border-gray-200", isValid); // Assuming default is gray-200

      if (!isValid) {
        let errorMessage = "";
        if (input.id === "jobDescription") {
          errorMessage = `Job description must be at least ${minLength} characters long.`;
        } else if (input.id === "resumeContent") {
          errorMessage = `Existing resume content must be at least ${minLength} characters long.`;
        } else {
          errorMessage = `Input must be at least ${minLength} characters long.`;
        }
        errorMessageEl.textContent = errorMessage;
        errorMessageEl.style.display = "block";
      } else {
        errorMessageEl.textContent = "";
        errorMessageEl.style.display = "none";
      }
      return isValid;
    }

    // Check if user can generate a resume
    async function checkResumeAccess(): Promise<{
      canAccess: boolean;
      userId: string | null;
    }> {
      try {
        const user = await authService.getCurrentUser();
        if (!user) {
          // Consider showing login prompt/redirect here
          return { canAccess: false, userId: null };
        }

        const hasAccess = await TierManagementService.checkFeatureAccess(
          user.uid,
          "resumeGeneration"
        );

        if (!hasAccess) {
          // Show upgrade modal
          const upgradeModal = document.createElement("div");
          upgradeModal.innerHTML = `
            <div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
                <div class="bg-white dark:bg-gray-900 rounded-2xl p-8 max-w-md w-full text-center">
                    <h2 class="text-2xl font-bold mb-4 text-gray-900 dark:text-white">Usage Limit Reached</h2>
                    <p class="text-gray-600 dark:text-gray-400 mb-6">
                        You've reached the maximum number of resume generations for your current plan.
                    </p>
                    <div class="flex justify-center space-x-4">
                        <button id="upgradeButton" class="bg-black dark:bg-white text-white dark:text-black px-6 py-2 rounded-full hover:bg-primary-600 transition">
                            Upgrade to Pro
                        </button>
                        <button id="closeUpgradeModal" class="bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white px-6 py-2 rounded-full hover:bg-gray-300 dark:hover:bg-gray-600 transition">
                            Close
                        </button>
                    </div>
                </div>
            </div>`;
          document.body.appendChild(upgradeModal);

          upgradeModal
            .querySelector("#upgradeButton")
            ?.addEventListener("click", () => {
              window.location.href = "/pricing";
            });
          upgradeModal
            .querySelector("#closeUpgradeModal")
            ?.addEventListener("click", () => {
              document.body.removeChild(upgradeModal);
            });

          return { canAccess: false, userId: user.uid };
        }
        return { canAccess: true, userId: user.uid };
      } catch (error) {
        // console.error("Error checking resume access:", error); // Keep minimal for prod
        return { canAccess: false, userId: null };
      }
    }

    // Handle button click visual feedback
    function handleButtonClick(button: HTMLButtonElement) {
      const clickSound = new Audio(
        "data:audio/wav;base64,UklGRhQCAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhgAEAAA=="
      ); // Tiny WAV sound
      clickSound.volume = 0.2;
      try {
        clickSound.currentTime = 0;
        clickSound.play();
      } catch (error) {
        /* Ignore sound errors */
      }

      button.classList.add("ring-2", "ring-primary", "ring-offset-2");
      setTimeout(() => {
        button.classList.remove("ring-2", "ring-primary", "ring-offset-2");
      }, 300);
    }

    // --- 3. Initial Setup Logic ---
    const storedJob = localStorage.getItem("currentJob");
    if (storedJob && jobDescriptionInput) {
      try {
        const jobData = JSON.parse(storedJob);
        jobDescriptionInput.value = jobData.jobDescription || "";
        localStorage.removeItem("currentJob");
      } catch (e) {
        console.warn("Could not parse stored job data.");
        localStorage.removeItem("currentJob");
      }
    }

    // --- 4. Event Listener Setup ---

    // Main Form Submission
    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      const { canAccess, userId } = await checkResumeAccess();
      if (!canAccess || !userId) return;

      // Re-fetch elements within handler scope if needed, or use module-scoped ones
      const currentJobDesc = jobDescriptionInput!;
      const currentResumeContent = resumeContentTextarea!;
      const currentCustomInstructions = customInstructionsInput!;

      // --- Validation ---
      const jobDescriptionValid = validateInput(currentJobDesc, 20);
      let resumeContentValid = true;

      // Check if resume content is provided (either via file/manual/import)
      if (currentResumeContent.value.trim().length < 50) {
        if (
          resumeOptionsSelector &&
          !resumeOptionsSelector.classList.contains("hidden") &&
          resumeFileAddedUI &&
          resumeFileAddedUI.classList.contains("hidden")
        ) {
          // Show error message for selecting an option
          const existingError = document.getElementById("resumeErrorMessage");
          if (existingError) existingError.remove();
          const errorMessage = document.createElement("div");
          errorMessage.id = "resumeErrorMessage";
          errorMessage.className = "text-red-500 text-sm mt-2";
          errorMessage.textContent =
            "Please select a resume option or enter your resume manually.";
          resumeOptionsSelector.parentNode?.insertBefore(
            errorMessage,
            resumeOptionsSelector.nextSibling
          );
          resumeOptionsSelector.querySelectorAll("button").forEach((button) => {
            button.classList.add("border-red-500");
          });
          resumeContentValid = false;
        } else if (
          manualEntryContainer &&
          !manualEntryContainer.classList.contains("hidden")
        ) {
          // Validate manual entry textarea
          resumeContentValid = validateInput(currentResumeContent, 50);
        } else if (
          resumeFileAddedUI &&
          !resumeFileAddedUI.classList.contains("hidden")
        ) {
          // File added UI is shown, assume content is valid (already populated)
          resumeContentValid = true;
          // Clear any previous option selection errors
          const existingError = document.getElementById("resumeErrorMessage");
          if (existingError) existingError.remove();
          resumeOptionsSelector
            ?.querySelectorAll("button")
            .forEach((button) => {
              button.classList.remove("border-red-500");
            });
        }
      } else {
        // Content is present, clear any previous option selection errors
        const existingError = document.getElementById("resumeErrorMessage");
        if (existingError) existingError.remove();
        resumeOptionsSelector?.querySelectorAll("button").forEach((button) => {
          button.classList.remove("border-red-500");
        });
      }

      if (!jobDescriptionValid || !resumeContentValid) {
        // Scroll to first invalid input
        const firstInvalid = !jobDescriptionValid
          ? currentJobDesc
          : manualEntryContainer &&
              !manualEntryContainer.classList.contains("hidden")
            ? currentResumeContent
            : resumeOptionsSelector;
        firstInvalid?.scrollIntoView({ behavior: "smooth", block: "center" });
        return;
      }

      // --- Modal Creation & Display ---
      const modal = document.createElement("div");
      modal.innerHTML = `
        <div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4">
            <div class="relative w-[95%] max-w-6xl max-h-[85vh] flex rounded-md flex-col">
                <button id="closeModal" class="absolute -top-2 -right-2 z-20 group p-1.5 bg-gray-700 hover:bg-gray-600 rounded-full transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                </button>
                <div class="flex-1 overflow-y-auto p-4 md:p-8 bg-gray-100 dark:bg-gray-900 rounded-md shadow-lg">
                    <div id="streamingContent" class="min-h-[300px] relative text-base font-serif text-gray-900 dark:text-white leading-relaxed tracking-normal whitespace-pre-wrap">
                        <div class="animate-pulse text-center text-gray-500 dark:text-gray-400 space-y-4 font-sans">
                             <div class="flex justify-center items-center space-x-3"><svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-primary animate-spin" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" /></svg><h3 class="text-lg font-semibold">AI Resume Optimization in Progress</h3></div>
                             <p class="text-sm">Our AI is carefully analyzing your job description and existing resume to:</p>
                             <ul class="text-xs space-y-2 max-w-md mx-auto text-left">
                                <li class="flex items-center space-x-2"><svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg><span>Extract key skills and achievements</span></li>
                                <li class="flex items-center space-x-2"><svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg><span>Optimize for Applicant Tracking Systems (ATS)</span></li>
                                <li class="flex items-center space-x-2"><svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg><span>Align resume with job description keywords</span></li>
                                <li class="flex items-center space-x-2"><svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg><span>Highlight your most impactful experiences</span></li>
                             </ul>
                             <p class="text-xs text-gray-400 italic">Powered by advanced AI language models to boost your job application</p>
                        </div>
                    </div>
                </div>
                <div id="resumeActionButtons" class="flex flex-row justify-center items-center p-4 space-x-3 opacity-0 transition-all duration-500 ease-in-out transform translate-y-4 bg-transparent">
                    <button id="copyButton" class="inline-flex items-center justify-center px-4 py-4 text-sm font-semibold bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white hover:bg-gray-300 dark:hover:bg-gray-600 rounded-full transition-colors duration-300"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 sm:mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" /></svg><span class="hidden sm:inline">Copy</span></button>
                    <button id="downloadButton" class="inline-flex items-center justify-center px-4 py-4 text-sm font-semibold bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white hover:bg-gray-300 dark:hover:bg-gray-600 rounded-full transition-colors duration-300"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 sm:mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" /></svg><span class="hidden sm:inline">Download</span></button>
                    <button id="saveResumeButton" class="inline-flex items-center justify-center px-4 py-4 text-sm font-semibold bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white hover:bg-gray-300 dark:hover:bg-gray-600 rounded-full transition-colors duration-300">Resume Manager</button>
                    <button id="coverLetterButton" class="inline-flex items-center justify-center px-4 py-4 text-sm font-semibold text-white bg-black dark:bg-white dark:text-black hover:bg-primary-600 rounded-full transition-colors duration-300">Cover Letter</button>
                </div>
            </div>
        </div>`;
      document.body.appendChild(modal);

      // Get modal elements
      const closeModalButton = modal.querySelector("#closeModal");
      const streamingContentEl = modal.querySelector("#streamingContent");
      const downloadButton = modal.querySelector(
        "#downloadButton"
      ) as HTMLButtonElement | null;
      const saveResumeButton = modal.querySelector(
        "#saveResumeButton"
      ) as HTMLButtonElement | null;
      const copyButton = modal.querySelector(
        "#copyButton"
      ) as HTMLButtonElement | null;
      const coverLetterButton = modal.querySelector(
        "#coverLetterButton"
      ) as HTMLButtonElement | null;
      const resumeActionButtons = modal.querySelector("#resumeActionButtons");

      if (
        !closeModalButton ||
        !streamingContentEl ||
        !downloadButton ||
        !saveResumeButton ||
        !copyButton ||
        !coverLetterButton ||
        !resumeActionButtons
      ) {
        console.error("Modal elements not found");
        modal.remove(); // Clean up broken modal
        return;
      }

      // Modal close listeners
      closeModalButton.addEventListener("click", () => modal.remove());
      modal.addEventListener("click", (event) => {
        const modalDialog = modal.querySelector(".relative.w-\\[95\\%]");
        if (modalDialog && !modalDialog.contains(event.target as Node)) {
          modal.remove();
        }
      });

      // --- API Call Preparation ---
      const messages = [
        {
          role: "system",
          content: `Generate a professional, ATS-optimized resume by tailoring the provided resume content to match the given job description. Follow these strict guidelines:

1. **Output Requirements (IMPORTANT):**
   - **Return ONLY the revised resume text in plain text format.**
   - **Do NOT include explanations, comments, or markdown.**
   - **Do NOT remove any experiences, achievements, or sections from the original resume.**
   - Resume format (always in this order):
     1. Professional Summary
     2. Work Experience
     3. Skills
     4. Education
     5. Projects

2. **General Formatting:**
   - Output must be **plain text only** (no markdown, bold, italics, or special formatting).
   - Use **standard punctuation and capitalization**.
   - Maintain **structured sections** with clear separations.

3. **Content Optimization:**
   - **Align resume wording closely with the job description while preserving original content.**
   - **Keep all metrics, achievements, and experiences intact.**
   - **Do NOT add, fabricate, or exaggerate skills or experiences.**
   - Use the **STAR method (Situation, Task, Action, Result)**—focus on **Action & Result** for impact.

4. **Writing Style:**
   - Use **clear, action-driven language**.
   - Prioritize **specific, measurable impact**.
   - Avoid generic statements—highlight **tangible contributions**.

5. **ATS Compliance (CRITICAL):**
   - Ensure **a single-column format** with clear section breaks.
   - Avoid **tables, images, columns, or complex formatting**.
   - **Integrate keywords naturally** into bullet points (no keyword stuffing).
   - Use **simple, professional language** for clarity and readability.

6. **Additional Custom Instructions:**
 `,
        },
        {
          role: "user",
          content: `Job Description:\n${currentJobDesc.value?.trim() || "No job description provided."}\n\nExisting Resume:\n${currentResumeContent.value?.trim() || "No resume content provided."}`,
        },
      ];

      // --- API Fetch & Streaming ---
      try {
        const response = await fetch(
          "https://api.groq.com/openai/v1/chat/completions",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${import.meta.env.GROQ_API_KEY}`,
            },
            body: JSON.stringify({
              model: "llama-3.3-70b-specdec",
              messages: messages,
              stream: true,
              max_tokens: 3000,
              temperature: 0.3,
              top_p: 1,
            }),
          }
        );

        if (!response.ok || !response.body) {
          const errorText = await response.text();
          throw new Error(
            `API request failed: ${response.status} ${response.statusText}. ${errorText}`
          );
        }

        let streamingText = "";
        const reader = response.body.getReader();
        const decoder = new TextDecoder();

        while (true) {
          const { done, value } = await reader.read();
          if (done) break;

          const chunk = decoder.decode(value);
          const lines = chunk.split("\n").filter((line) => line.trim() !== "");

          for (const line of lines) {
            if (line.startsWith("data: ")) {
              try {
                const jsonData = JSON.parse(line.slice(6));
                if (jsonData.choices && jsonData.choices[0].delta.content) {
                  const content = jsonData.choices[0].delta.content;
                  streamingText += content;
                  streamingContentEl.innerHTML = streamingText; // Update content directly
                }
              } catch (parseError) {
                /* Ignore parsing errors */
              }
            }
          }
        }

        // --- Post-Streaming Actions ---
        // Track usage
        const currentUser = await authService.getCurrentUser();
        if (currentUser) {
          await TierManagementService.trackResumeGeneration(currentUser.uid);
        }

        // Show action buttons
        resumeActionButtons.classList.remove("opacity-0", "translate-y-4");
        resumeActionButtons.classList.add("opacity-100", "translate-y-0");

        // --- Modal Button Event Listeners ---
        downloadButton.addEventListener("click", () => {
          handleButtonClick(downloadButton);
          const blob = new Blob([streamingText], { type: "text/plain" });
          const url = URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.href = url;
          a.download = "generated-resume.txt";
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
        });

        saveResumeButton.addEventListener("click", async () => {
          handleButtonClick(saveResumeButton);
          try {
            const user = await authService.getCurrentUser();
            if (!user) return; // Should ideally prompt login

            const resumeName = prompt(
              "Enter a name for this resume:",
              `Resume1`
            );
            if (!resumeName) return;

            await PersistentDocumentService.createResume({
              name: resumeName,
              content: streamingText,
              userId: user.uid,
            });

            // Show success modal
            const successModal = document.createElement("div");
            successModal.innerHTML = `<div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm"><div class="bg-white dark:bg-gray-900 rounded-2xl p-6 max-w-md w-full text-center"><svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-green-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg><h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">Resume Saved</h2><p class="text-gray-600 dark:text-gray-400 mb-6">Your resume has been successfully saved to the Resume Manager.</p><button id="closeSuccessModal" class="bg-black dark:bg-white text-white dark:text-black px-4 py-2 rounded-full">Close</button></div></div>`;
            document.body.appendChild(successModal);
            successModal
              .querySelector("#closeSuccessModal")
              ?.addEventListener("click", () => successModal.remove());
          } catch (error) {
            // Show error modal
            const errorModal = document.createElement("div");
            errorModal.innerHTML = `<div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm"><div class="bg-white dark:bg-gray-900 rounded-2xl p-6 max-w-md w-full text-center"><h2 class="text-2xl font-bold text-red-600 mb-4">Save Error</h2><p class="text-gray-600 dark:text-gray-400 mb-6">Unable to save resume. Please try again later.</p><button id="closeErrorModal" class="bg-primary text-white px-4 py-2 rounded-full">Close</button></div></div>`;
            document.body.appendChild(errorModal);
            errorModal
              .querySelector("#closeErrorModal")
              ?.addEventListener("click", () => errorModal.remove());
          }
        });

        copyButton.addEventListener("click", () => {
          handleButtonClick(copyButton);
          navigator.clipboard.writeText(streamingText).then(() => {
            const originalText =
              copyButton.querySelector("span")?.textContent || "Copy";
            const svg = copyButton.innerHTML.match(/<svg.*<\/svg>/)?.[0] || "";
            copyButton.innerHTML = `${svg}<span class="hidden sm:inline">Copied!</span>`;
            copyButton.classList.replace("bg-gray-200", "bg-green-500");
            copyButton.classList.replace(
              "dark:bg-gray-700",
              "dark:bg-green-600"
            );
            setTimeout(() => {
              copyButton.innerHTML = `${svg}<span class="hidden sm:inline">${originalText}</span>`;
              copyButton.classList.replace("bg-green-500", "bg-gray-200");
              copyButton.classList.replace(
                "dark:bg-green-600",
                "dark:bg-gray-700"
              );
            }, 2000);
          });
        });

        coverLetterButton.addEventListener("click", () => {
          handleButtonClick(coverLetterButton);
          window.location.href = "/cover-letter";
        });
      } catch (error) {
        console.error("Resume generation failed:", error);
        streamingContentEl.innerHTML = `<p class="text-red-500">Error generating resume: ${error instanceof Error ? error.message : "Unknown error"}</p>`;
        // Optionally hide action buttons on error
        resumeActionButtons.classList.add("hidden");
      }
    }); // End of form submit listener

    // Resume Import Modal Logic
    importResumeButton?.addEventListener("click", async () => {
      try {
        const user = await authService.getCurrentUser();
        if (!user) return; // Prompt login?

        const modal = document.createElement("div");
        modal.innerHTML = `
          <div class="p-4 fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
              <div class="bg-white dark:bg-gray-900 rounded-2xl p-6 max-w-md w-full max-h-[80vh] overflow-y-auto">
                  <div class="flex justify-between items-center mb-4">
                      <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Resume Manager</h2>
                      <button id="closeImportModal" class="text-gray-500 hover:text-gray-900 dark:hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg></button>
                  </div>
                  <div class="mb-4"><button id="addNewResumeButton" class="w-full inline-flex items-center justify-center px-4 py-3 bg-black text-white rounded-xl hover:bg-primary-600 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" /></svg>Create New Resume</button></div>
                  <div class="border-t border-gray-200 dark:border-gray-700 my-4"></div>
                  <div id="resumeList" class="space-y-3"></div>
              </div>
          </div>`;
        document.body.appendChild(modal);

        const closeModalButton = modal.querySelector("#closeImportModal");
        const addNewResumeButton = modal.querySelector("#addNewResumeButton");
        const resumeListContainer = modal.querySelector("#resumeList");

        closeModalButton?.addEventListener("click", () => modal.remove());
        addNewResumeButton?.addEventListener("click", () => {
          window.location.href = "/dashboard#addResumeBtn";
        });

        const resumes = await PersistentDocumentService.loadAllResumes();

        if (!resumeListContainer) return; // Should not happen

        if (resumes.length === 0) {
          resumeListContainer.innerHTML = `<div class="text-center text-gray-500 dark:text-gray-400 py-6"><p>No resumes found. Create a new resume to get started.</p></div>`;
        } else {
          resumeListContainer.innerHTML = resumes
            .map(
              (resume, index) => `
            <div class="bg-gray-100 dark:bg-gray-800 rounded-xl p-4 hover:bg-gray-200 dark:hover:bg-gray-700 cursor-pointer transition-colors resume-item" data-resume-index="${index}">
                <div class="flex justify-between items-center">
                    <div><h3 class="text-lg font-semibold text-gray-900 dark:text-white">${resume.name || `Resume ${index + 1}`}</h3><p class="text-sm text-gray-500 dark:text-gray-400">Last updated: ${new Date(resume.lastUpdated).toLocaleDateString()}</p></div>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                </div>
            </div>`
            )
            .join("");

          modal.querySelectorAll(".resume-item").forEach((item) => {
            item.addEventListener("click", () => {
              const index = parseInt(
                item.getAttribute("data-resume-index") || "0",
                10
              );
              const selectedResume = resumes[index];
              if (resumeContentTextarea) {
                resumeContentTextarea.value = selectedResume.content || "";
                // Show manual entry UI after import
                resumeOptionsSelector?.classList.add("hidden");
                manualEntryContainer?.classList.remove("hidden");
                resumeFileAddedUI?.classList.add("hidden");
              }
              modal.remove();
            });
          });
        }
      } catch (error) {
        // Show error modal for import
        const errorModal = document.createElement("div");
        errorModal.innerHTML = `<div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm"><div class="bg-white dark:bg-gray-900 rounded-2xl p-6 max-w-md w-full text-center"><h2 class="text-2xl font-bold text-red-600 mb-4">Import Error</h2><p class="text-gray-600 dark:text-gray-400 mb-6">Unable to import resumes. Please try again later.</p><button id="closeErrorModal" class="bg-primary text-white px-4 py-2 rounded-full">Close</button></div></div>`;
        document.body.appendChild(errorModal);
        errorModal
          .querySelector("#closeErrorModal")
          ?.addEventListener("click", () => errorModal.remove());
      }
    }); // End of importResumeButton listener

    // File Upload Logic
    resumeFileUploadButton?.addEventListener("click", (e) => {
      e.preventDefault();
      uploadLoader?.classList.remove("hidden");
      resumeFileInput?.click(); // Trigger hidden file input
    });

    resumeFileInput.addEventListener("change", async (event) => {
      event.preventDefault();
      const file = (event.target as HTMLInputElement).files?.[0];
      if (!file) {
        uploadLoader?.classList.add("hidden");
        return;
      }

      const supportedTypes = [
        "application/pdf",
        "application/msword",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "text/plain",
        "text/rtf",
        "application/rtf",
      ];
      if (!supportedTypes.includes(file.type)) {
        alert(
          "Unsupported file type. Please upload a PDF, DOC, DOCX, TXT, or RTF file."
        );
        uploadLoader?.classList.add("hidden");
        (event.target as HTMLInputElement).value = ""; // Reset file input
        return;
      }

      const fileReader = new FileReader();
      fileReader.readAsDataURL(file);
      fileReader.onload = async () => {
        const base64File = fileReader.result as string;
        const base64Data = base64File.split(",")[1];

        try {
          // Get current user and ID token for Authorization header
          const user = await authService.getCurrentUser();
          if (!user)
            throw new Error("You must be logged in to upload a resume.");
          const idToken = await user.getIdToken();

          // Get custom instructions value
          const customInstructions = customInstructionsInput?.value || "";

          const response = await fetch("/.netlify/functions/upload-resume", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${idToken}`,
            },
            body: JSON.stringify({
              fileBase64: base64Data,
              fileName: file.name,
              fileType: file.type,
              customInstructions,
            }),
          });
          const result = await response.json();

          if (!response.ok)
            throw new Error(result.error || "Unknown server error");

          if (result.success && resumeContentTextarea) {
            resumeContentTextarea.value = result.data.text;
            resumeContentTextarea.dispatchEvent(new Event("input")); // Trigger potential listeners

            // Update UI: Show file added, hide options/manual
            resumeFileAddedUI?.classList.remove("hidden");
            resumeOptionsSelector?.classList.add("hidden");
            manualEntryContainer?.classList.add("hidden");
            if (resumeFileNameEl) resumeFileNameEl.textContent = file.name;

            // Clear any validation errors on options
            const existingError = document.getElementById("resumeErrorMessage");
            if (existingError) existingError.remove();
            resumeOptionsSelector
              ?.querySelectorAll("button")
              .forEach((button) => {
                button.classList.remove("border-red-500");
              });
          } else {
            throw new Error(result.error || "Upload failed");
          }
        } catch (error) {
          alert(
            `Error uploading resume: ${error instanceof Error ? error.message : "Unknown error"}`
          );
        } finally {
          uploadLoader?.classList.add("hidden");
          (event.target as HTMLInputElement).value = ""; // Reset file input
        }
      };
      fileReader.onerror = () => {
        alert("Error reading file.");
        uploadLoader?.classList.add("hidden");
        (event.target as HTMLInputElement).value = ""; // Reset file input
      };
    }); // End of resumeFileInput listener

    // UI Interaction Logic (Toggles for Resume Input)
    enterManuallyButton?.addEventListener("click", () => {
      resumeOptionsSelector?.classList.add("hidden");
      manualEntryContainer?.classList.remove("hidden");
      resumeFileAddedUI?.classList.add("hidden");
    });

    cancelManualEntryButton?.addEventListener("click", () => {
      resumeOptionsSelector?.classList.remove("hidden");
      manualEntryContainer?.classList.add("hidden");
      // Don't hide file added UI here, only manual entry cancels back to options
    });

    changeResumeSourceButton?.addEventListener("click", () => {
      resumeOptionsSelector?.classList.remove("hidden");
      resumeFileAddedUI?.classList.add("hidden");
      manualEntryContainer?.classList.add("hidden"); // Ensure manual is hidden too
      if (resumeContentTextarea) resumeContentTextarea.value = ""; // Clear content when changing source
      if (resumeFileInput) resumeFileInput.value = ""; // Clear file input value
    });

    // Clear Form Button
    clearButton?.addEventListener("click", (e) => {
      e.preventDefault();
      if (jobDescriptionInput) jobDescriptionInput.value = "";
      if (resumeContentTextarea) resumeContentTextarea.value = "";
      if (customInstructionsInput) customInstructionsInput.value = "";
      if (resumeFileInput) resumeFileInput.value = ""; // Clear file input

      // Reset UI to initial state (show options, hide others)
      resumeOptionsSelector?.classList.remove("hidden");
      manualEntryContainer?.classList.add("hidden");
      resumeFileAddedUI?.classList.add("hidden");

      // Clear validation states
      jobDescriptionInput?.classList.remove("border-red-500");
      resumeContentTextarea?.classList.remove("border-red-500");
      resumeOptionsSelector
        ?.querySelectorAll("button")
        .forEach((btn) => btn.classList.remove("border-red-500"));
      document
        .querySelectorAll(".validation-error")
        .forEach((el) => el.remove());
      const resumeErrorMsg = document.getElementById("resumeErrorMessage");
      if (resumeErrorMsg) resumeErrorMsg.remove();
    });
  });
</script>
