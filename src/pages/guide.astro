---
import Layout from "../layouts/Layout.astro";
import Container from "../components/Container.astro";
const url = new URL(Astro.request.url);
const initialQuery = url.searchParams.get("query") || "";
// Read the new parameters
const lastQ = url.searchParams.get("lastQ") || "";
const lastA = url.searchParams.get("lastA") || "";

const promptSuggestions = [
  "What are some good career paths for someone with my skills?",
  "How can I improve my networking skills?",
  "What are the latest trends in the job market?",
  "Can you help me identify my strengths and weaknesses?",
  "What are some strategies for dealing with workplace stress?",
];
---

<script define:vars={{ initialQuery, lastQ, lastA }}>
  // Inject initialQuery safely using JSON.stringify to handle special characters
  window.initialQuery = JSON.parse(JSON.stringify(initialQuery));
  // Inject the new parameters
  window.lastQ = JSON.parse(JSON.stringify(lastQ));
  window.lastA = JSON.parse(JSON.stringify(lastA));
</script>

<Layout
  title="AI Career Advisor | Get Personalized Career Guidance"
  description="Get personalized career advice and guidance with our AI-powered career advisor. Discuss your career aspirations, skills, and concerns and receive actionable suggestions and resources."
  image="/images/og-image.jpg"
  type="website"
  canonical="/guide"
  ogTitle="AI Career Advisor | Personalized Career Guidance"
  ogDescription="Discuss your career and get personalized advice with our AI career advisor. Receive actionable suggestions and resources to help you achieve your career goals."
>
  {/* Make main a flex column that takes at least screen height */}
  <main class="relative min-h-screen dark:bg-gray-950 pt-16 flex flex-col">
    {/* Background Gradient Effect */}
    <div
      aria-hidden="true"
      class="absolute inset-0 grid grid-cols-2 -space-x-52 opacity-40 dark:opacity-20 pointer-events-none"
    >
      <div
        class="blur-[106px] h-56 bg-gradient-to-br from-primary to-purple-400 dark:from-blue-700"
      >
      </div>
      <div
        class="blur-[106px] h-32 bg-gradient-to-r from-cyan-400 to-sky-300 dark:to-indigo-600"
      >
      </div>
    </div>

    <Container>
      {/* Page Header - This will take its natural height */}
      <div class="relative pt-24 space-y-12 z-10">
        {/* Added z-10 to ensure header is above gradient */}
        <div class="w-full text-center mx-auto">
          <h1
            class="text-gray-900 dark:text-white font-bold text-4xl md:text-5xl lg:text-6xl xl:text-7xl"
          >
            <span class="text-primary dark:text-white">AI Career Advisor</span>
          </h1>
          <p
            class="mt-6 text-gray-700 dark:text-gray-300 text-lg max-w-3xl mx-auto"
          >
            Discuss your career goals and challenges with our AI career advisor.
            Get personalized guidance, actionable suggestions, and relevant
            resources to help you succeed.
          </p>

          {/* Stats */}
          <div
            class="hidden py-6 mt-10 border-y border-gray-100 dark:border-gray-800 sm:flex justify-between"
          >
            <div class="text-left">
              <h6 class="text-lg font-semibold text-gray-700 dark:text-white">
                Personalized Advice
              </h6>
              <p class="mt-2 text-gray-500">Tailored to your needs</p>
            </div>
            <div class="text-left">
              <h6 class="text-lg font-semibold text-gray-700 dark:text-white">
                Actionable Insights
              </h6>
              <p class="mt-2 text-gray-500">
                Specific suggestions and resources
              </p>
            </div>
            <div class="text-left">
              <h6 class="text-lg font-semibold text-gray-700 dark:text-white">
                Conversational Guidance
              </h6>
              <p class="mt-2 text-gray-500">Engage in a helpful dialogue</p>
            </div>
          </div>
        </div>
      </div>
    </Container>

    {/* Chat Interface Section - This will take remaining vertical space */}
    {/* Added flex-1 flex flex-col overflow-hidden, added padding bottom */}
    <section
      id="chat-interface"
      class="relative w-full flex-1 flex flex-col overflow-hidden py-8 sm:py-12 z-10 min-h-0"
      style="max-height: 80vh;"
    >
      {/* Added z-10 */}
      {
        /* Container for chat elements - Make it fill the section and establish flex context */
      }
      {/* Added flex-1 min-h-0 */}
      <div
        class="w-full max-w-6xl mx-auto bg-white dark:bg-gray-800/50 backdrop-blur-sm rounded-2xl shadow-lg p-4 md:p-6 border border-gray-200 dark:border-gray-700/50 flex flex-col gap-y-4 sm:gap-y-6 flex-1 min-h-0"
      >
        {/* Adjusted gap */}
        {/* Prompt Suggestions Section - Added flex-shrink-0 */}
        <div
          id="prompt-suggestions"
          class="hidden md:block bg-white dark:bg-gray-800/60 p-4 rounded-xl border border-gray-200 dark:border-gray-700/50 shadow-sm transition-opacity duration-500 flex-shrink-0"
        >
          <h2
            class="text-sm font-semibold mb-3 text-gray-700 dark:text-gray-300"
          >
            Prompt Suggestions For You
          </h2>
          <div class="flex flex-wrap justify-start gap-2">
            {
              promptSuggestions.map((suggestion) => (
                <button class="flex items-center gap-1.5 px-3 py-1.5 rounded-full border border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-700/50 hover:bg-gray-100 dark:hover:bg-gray-700 text-xs md:text-sm text-gray-700 dark:text-gray-300 transition whitespace-nowrap">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-3.5 w-3.5 text-purple-500"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    stroke-width="2"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M17.657 18.657A8 8 0 016.343 7.343S7 9 9 10h6c2 1 2.343 2.657 2.343 2.657m0 0l2.343 2.343m-2.343-2.343l2.343-2.343m0 2.343l-2.343 2.343m2.343-2.343l-2.343-2.343"
                    />{" "}
                    {/* Wand Icon */}
                  </svg>
                  {suggestion}
                </button>
              ))
            }
          </div>
        </div>

        {
          /* Chat Window - flex-1 makes it take available space, overflow-y-auto handles scrolling */
        }
        <div
          id="chat-window"
          class="flex-1 overflow-y-auto space-y-4 p-4 border border-gray-200 dark:border-gray-700/50 rounded-xl bg-gray-50 dark:bg-gray-900/30 shadow-inner"
          style="scroll-behavior: smooth; max-height: 80vh;"
        >
          {
            initialQuery && (
              <div class="flex justify-end">
                <div class="max-w-[75%] p-3 rounded-xl bg-gradient-to-br from-purple-500 to-indigo-600 text-white shadow-md">
                  {initialQuery}
                </div>
              </div>
            )
          }
          {/* AI responses will be appended here dynamically */}
        </div>

        {/* Input Form - Added flex-shrink-0 */}
        <form
          id="chat-form"
          class="flex items-center gap-2 p-2 border border-gray-200 dark:border-gray-700/50 rounded-full bg-white dark:bg-gray-800/60 shadow-sm focus-within:ring-2 focus-within:ring-purple-400 dark:focus-within:ring-purple-500 transition flex-shrink-0"
        >
          <button
            type="button"
            id="voice-input-button"
            class="p-2 rounded-full dark:border-gray-600 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition flex-shrink-0"
            aria-label="Use voice input"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              class="h-5 w-5"
              fill="none"
              stroke="currentColor"
              stroke-width="1.5"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path
                stroke="none"
                fill="currentColor"
                d="M12 14a3 3 0 0 0 3-3V5a3 3 0 0 0-6 0v6a3 3 0 0 0 3 3z"
              ></path>
              <path d="M19 11a7 7 0 0 1-14 0"></path>
              <path d="M12 17v4m-4 0h8"></path>
            </svg>
          </button>

          <input
            type="text"
            id="user-input"
            placeholder="Ask me anything..."
            class="flex-grow px-4 py-2 text-base rounded-full focus:outline-none bg-transparent text-gray-700 dark:text-gray-200 placeholder-gray-400 dark:placeholder-gray-500"
          />
          <button
            type="submit"
            class="p-2 rounded-full bg-gradient-to-br from-purple-500 to-indigo-600 text-white hover:opacity-90 transition-opacity shadow flex-shrink-0"
            aria-label="Send message"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-4 ml-1"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              stroke-width="2"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
            </svg>
          </button>
        </form>
      </div>
    </section>
  </main>
</Layout>

<script>
  import { firebaseInstance, getCurrentUser } from "../lib/firebase";
  let conversationHistory = [] as {
    role: string;
    parts: { text: string }[];
  }[];
  // Client-side authentication check
  import { authService } from "../lib/auth"; // Assuming authService is correctly set up

  function checkAuthentication() {
    setTimeout(async () => {
      try {
        const user = await authService.getCurrentUser();
        if (!user) {
          console.warn("Authentication check failed", {
            timestamp: new Date().toISOString(),
          });
          // Redirect to login, preserving the current path and query params
          const redirectUrl = `/login?redirect=${encodeURIComponent(window.location.pathname + window.location.search)}`;
          window.location.href = redirectUrl;
        } else {
          // Optional: User is authenticated, maybe initialize something user-specific
          console.log("User authenticated:", user.email);
        }
      } catch (error) {
        console.error("Authentication check error:", {
          error: error instanceof Error ? error.message : "Unknown error",
          timestamp: new Date().toISOString(),
        });
        // Redirect to login on error as well
        const redirectUrl = `/login?redirect=${encodeURIComponent(window.location.pathname + window.location.search)}`;
        window.location.href = redirectUrl;
      }
    }, 1000); // Reduced delay slightly
  }
  // Run auth check only if authService exists
  if (typeof authService !== "undefined" && authService) {
    document.addEventListener("DOMContentLoaded", checkAuthentication);
  } else {
    console.warn("authService not found, skipping authentication check.");
    // Decide what to do if auth is not available. Maybe allow access or show a message.
    // For now, it just logs a warning.
  }

  // Existing chat script
  const form = document.getElementById("chat-form");
  const input = document.getElementById(
    "user-input"
  ) as HTMLInputElement | null;
  const chatWindow = document.getElementById("chat-window");
  const suggestionButtons = document.querySelectorAll(
    "#chat-interface .flex-wrap button"
  );
  const voiceInputButton = document.getElementById("voice-input-button");
  const promptSuggestionsContainer =
    document.getElementById("prompt-suggestions");

  // --- Function to add message bubbles ---
  function addMessageBubble(message, isUser) {
    if (!chatWindow) return;
    const messageWrapper = document.createElement("div");
    messageWrapper.className = `flex ${isUser ? "justify-end" : "justify-start"} animate-fade-in`; // Added fade-in animation

    const bubble = document.createElement("div");
    bubble.className = `max-w-[75%] p-3 rounded-xl shadow-md ${isUser ? "bg-gradient-to-r from-purple-500 to-indigo-600 text-white" : "bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200"}`;

    // Basic Markdown rendering (links, bold, italics) - Can be expanded
    let htmlContent = message
      .replace(/</g, "<")
      .replace(/>/g, ">") // Escape HTML tags first
      .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>") // Bold
      .replace(/\*(.*?)\*/g, "<em>$1</em>") // Italics
      .replace(
        /\[(.*?)\]\((.*?)\)/g,
        '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:underline">$1</a>'
      ) // Links
      .replace(/\n/g, "<br>"); // Newlines

    bubble.innerHTML = htmlContent;

    messageWrapper.appendChild(bubble);
    chatWindow.appendChild(messageWrapper);
    // Scroll to bottom smoothly
    chatWindow.scrollTo({ top: chatWindow.scrollHeight, behavior: "smooth" });
  }

  function addThinkingBubble() {
    if (!chatWindow) return null;
    const thinkingBubble = document.createElement("div");
    thinkingBubble.className = "flex justify-start thinking-bubble"; // Add class for easy removal
    thinkingBubble.innerHTML = `
        <div class="max-w-[75%] p-3 rounded-xl bg-white dark:bg-gray-700 text-gray-500 dark:text-gray-400 shadow flex items-center gap-2">
          <svg class="animate-spin h-4 w-4 text-purple-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <span>Thinking...</span>
        </div>
      `;
    chatWindow.appendChild(thinkingBubble);
    chatWindow.scrollTo({ top: chatWindow.scrollHeight, behavior: "smooth" });
    return thinkingBubble; // Return the element so it can be removed
  }

  function removeThinkingBubble() {
    const thinkingBubble = chatWindow?.querySelector(".thinking-bubble");
    if (thinkingBubble) {
      chatWindow?.removeChild(thinkingBubble);
    }
  }

  // Modified sendMessage to handle initial query without adding duplicate user bubble
  // Import at the top of the file (ensure this is present):
  // import { firebaseInstance, getCurrentUser } from "../lib/firebase";

  async function sendMessage(message, isInitialQuery = false) {
    console.log(
      `sendMessage called. Initial: ${isInitialQuery}, Message: "${message}"`
    );
    if (!message || message.trim() === "") {
      console.log("Message is empty, exiting sendMessage.");
      return;
    }

    // --- Hide suggestions if they are visible ---
    if (
      promptSuggestionsContainer &&
      promptSuggestionsContainer.style.display !== "none"
    ) {
      promptSuggestionsContainer.classList.add("opacity-0");
      setTimeout(() => {
        if (promptSuggestionsContainer)
          promptSuggestionsContainer.style.display = "none";
      }, 300); // Match transition duration
    }
    // ---

    // Add user message to conversation history
    conversationHistory.push({
      role: "user",
      parts: [{ text: message }],
    });

    // Only add user bubble if it's not the initial query from the URL
    if (!isInitialQuery) {
      addMessageBubble(message, true);
    }
    if (input instanceof HTMLInputElement) input.value = ""; // Clear input field

    const thinkingBubbleElement = addThinkingBubble(); // Show thinking indicator

    try {
      // Get auth token if user is logged in
      let authToken: string | null = null;
      try {
        if (firebaseInstance && firebaseInstance.auth) {
          const user = await getCurrentUser(firebaseInstance.auth);
          if (user) {
            authToken = await user.getIdToken();
          }
        } else {
          console.warn("Firebase instance or auth is not available.");
        }
      } catch (e) {
        console.warn("Could not get auth token:", e);
      }

      const response = await fetch("/.netlify/functions/guide-mode", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          ...(authToken ? { Authorization: `Bearer ${authToken}` } : {}),
        },
        body: JSON.stringify({
          message: message,
          history: conversationHistory,
        }),
      });

      removeThinkingBubble(); // Remove thinking indicator regardless of response status

      if (!response.ok) {
        let errorMsg = `HTTP error! status: ${response.status}`;
        try {
          const errData = await response.json();
          errorMsg = errData.error || errorMsg;
        } catch (e) {
          // Ignore if response is not JSON
        }
        console.error("API Error Response:", errorMsg);
        addMessageBubble("Something went wrong, please try again.", false);
        // Optionally remove last user message from history if API failed?
        // conversationHistory.pop();
        return; // Stop processing on error
      }

      const data = await response.json();

      if (data.success && data.data) {
        addMessageBubble(data.data, false);
        // Add AI response to conversation history
        conversationHistory.push({
          role: "model",
          parts: [{ text: data.data }],
        });
      } else {
        const errorToShow =
          data.error || "Sorry, something went wrong receiving the data.";
        console.error("API Success False or No Data:", errorToShow);
        addMessageBubble(errorToShow, false);
      }
    } catch (error) {
      console.error("Error calling guide mode API:", error);
      removeThinkingBubble(); // Ensure thinking indicator is removed on fetch error
      addMessageBubble(
        `Error: ${error instanceof Error ? error.message : "Could not connect to the AI service."}`,
        false
      );
      // Optionally remove last user message from history on network error?
      // conversationHistory.pop();
    }
    console.log("sendMessage finished for:", message);
  }

  // --- Initialization Logic ---
  if (form && input) {
    // Check for context passed from Hero section
    const passedQuestion = (window as any).lastQ;
    const passedAnswer = (window as any).lastA;
    let contextHandled = false;

    if (passedQuestion && passedAnswer) {
      console.log(
        "Context found (lastQ, lastA):",
        passedQuestion,
        passedAnswer
      );
      // Add the passed context to the chat window
      addMessageBubble(passedQuestion, true);
      addMessageBubble(passedAnswer, false);
      // Add to conversation history
      conversationHistory.push({
        role: "user",
        parts: [{ text: passedQuestion }],
      });
      conversationHistory.push({
        role: "model",
        parts: [{ text: passedAnswer }],
      });
      contextHandled = true; // Mark context as handled
    } else {
      console.log("No lastQ/lastA context found.");
    }

    // Handle initialQuery ONLY if context from lastQ/lastA wasn't handled
    if (!contextHandled) {
      const queryFromWindow = (window as any).initialQuery;
      console.log("Checking for initialQuery on window:", queryFromWindow);
      if (queryFromWindow) {
        // Add initial query as user message bubble
        addMessageBubble(queryFromWindow, true);
        // Wait a short moment then send it to the backend
        setTimeout(() => sendMessage(queryFromWindow, true), 100); // Pass true to avoid adding another user bubble
      } else {
        console.log("No initialQuery found on window, or it was empty.");
      }
    }

    // Handle Enter key press in the input field
    input.addEventListener("keydown", (e) => {
      // Check if Enter key was pressed without the Shift key
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault(); // Prevent default Enter behavior (like adding a newline)
        const message = input.value.trim();
        if (message) {
          sendMessage(message); // Use the async function
        }
      }
    });

    form.addEventListener("submit", (e) => {
      e.preventDefault();
      const message = input.value.trim();
      if (message) {
        sendMessage(message); // Use the async function
      }
    });

    // Initial query sending logic moved above
  }

  // --- Event Listeners for Suggestions ---
  suggestionButtons.forEach((button) => {
    button.addEventListener("click", () => {
      // Extract text, removing the icon part if necessary (adjust selector/logic if icon changes)
      const suggestionText = button.textContent?.trim() ?? "";
      // Example heuristic: Remove icon text if it's always the same prefix, or use a data attribute
      // const suggestionText = button.dataset.suggestion || button.textContent?.trim() ?? "";

      if (input && suggestionText) {
        input.value = suggestionText;
        input.focus();
        // Optionally send the message directly on click
        // sendMessage(suggestionText);
      }
    });
  });

  // --- Voice Input Logic ---
  const SpeechRecognition =
    (window as any).SpeechRecognition ||
    (window as any).webkitSpeechRecognition;
  let recognition;
  let isRecognizing = false;

  if (SpeechRecognition && voiceInputButton && input) {
    try {
      recognition = new SpeechRecognition();
      recognition.continuous = false; // Process single utterances
      recognition.lang = "en-US"; // Use US English, or adjust as needed
      recognition.interimResults = false; // Get final results only
      recognition.maxAlternatives = 1;

      voiceInputButton.addEventListener("click", () => {
        if (!recognition) return; // Guard against errors during init
        if (isRecognizing) {
          recognition.stop();
          return;
        }
        try {
          input.placeholder = "Listening..."; // Provide feedback
          recognition.start();
        } catch (e) {
          console.error("Speech recognition error starting:", e);
          input.placeholder = "Ask me anything..."; // Restore placeholder
          alert(
            "Voice input error: Could not start recognition. Please ensure microphone permissions are granted and no other app is using the mic."
          );
        }
      });

      recognition.onstart = () => {
        isRecognizing = true;
        voiceInputButton.classList.add("text-red-500", "animate-pulse");
        voiceInputButton.setAttribute("aria-label", "Stop voice input");
        console.log("Voice recognition started.");
      };

      recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        console.log("Voice result:", transcript);
        input.value = transcript;
        input.focus(); // Focus input after transcript insertion
        // Optionally submit automatically:
        // const message = input.value.trim();
        // if (message) {
        //    sendMessage(message);
        // }
      };

      recognition.onerror = (event) => {
        console.error("Speech recognition error:", event.error, event.message);
        let errorMessage = `Speech recognition error: ${event.error}.`;
        if (
          event.error === "not-allowed" ||
          event.error === "service-not-allowed"
        ) {
          errorMessage +=
            " Please ensure microphone access is granted in your browser settings and refresh the page.";
        } else if (event.error === "no-speech") {
          errorMessage =
            "No speech detected. Please try speaking louder or closer to the mic.";
        } else if (event.error === "network") {
          errorMessage =
            "Network error during speech recognition. Please check your connection.";
        } else if (event.error === "audio-capture") {
          errorMessage =
            "Audio capture error. Ensure your microphone is working and not used by another application.";
        }
        alert(errorMessage); // Inform user
      };

      recognition.onend = () => {
        isRecognizing = false;
        input.placeholder = "Ask me anything..."; // Restore placeholder
        voiceInputButton.classList.remove("text-red-500", "animate-pulse");
        voiceInputButton.setAttribute("aria-label", "Use voice input");
        console.log("Voice recognition ended.");
      };
    } catch (err) {
      console.error("Failed to initialize SpeechRecognition:", err);
      if (voiceInputButton) {
        voiceInputButton.style.display = "none"; // Hide button if init fails
      }
    }
  } else {
    // Hide button if API not supported
    if (voiceInputButton) {
      console.warn("Web Speech API not supported in this browser.");
      voiceInputButton.style.display = "none";
    }
  }
</script>

<style is:global>
  /* Optional: Add simple fade-in animation for messages */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  .animate-fade-in {
    animation: fadeIn 0.3s ease-out forwards;
  }

  /* Improve scrollbar styling for webkit browsers (Chrome, Safari, Edge) */
  #chat-window::-webkit-scrollbar {
    width: 8px;
  }

  #chat-window::-webkit-scrollbar-track {
    background: transparent; /* Or use a subtle background like bg-gray-100 dark:bg-gray-800 */
    border-radius: 10px;
  }

  #chat-window::-webkit-scrollbar-thumb {
    background-color: #a855f7; /* purple-500 */
    border-radius: 10px;
    border: 2px solid transparent; /* Creates padding around thumb */
    background-clip: content-box;
  }
  #chat-window::-webkit-scrollbar-thumb:hover {
    background-color: #9333ea; /* purple-600 */
  }

  /* Improve scrollbar styling for Firefox */
  #chat-window {
    scrollbar-width: thin;
    scrollbar-color: #a855f7 transparent; /* thumb track */
  }
</style>
