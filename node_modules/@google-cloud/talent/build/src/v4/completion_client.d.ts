import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions } from 'google-gax';
import * as protos from '../../protos/protos';
/**
 *  A service handles auto completion.
 * @class
 * @memberof v4
 */
export declare class CompletionClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    completionStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of CompletionClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new CompletionClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Completes the specified prefix with keyword suggestions.
     * Intended for use by a job search auto-complete search box.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.tenant
     *   Required. Resource name of tenant the completion is performed within.
     *
     *   The format is "projects/{project_id}/tenants/{tenant_id}", for example,
     *   "projects/foo/tenants/bar".
     * @param {string} request.query
     *   Required. The query used to generate suggestions.
     *
     *   The maximum number of allowed characters is 255.
     * @param {string[]} request.languageCodes
     *   The list of languages of the query. This is
     *   the BCP-47 language code, such as "en-US" or "sr-Latn".
     *   For more information, see
     *   [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).
     *
     *   The maximum number of allowed characters is 255.
     * @param {number} request.pageSize
     *   Required. Completion result count.
     *
     *   The maximum allowed page size is 10.
     * @param {string} request.company
     *   If provided, restricts completion to specified company.
     *
     *   The format is
     *   "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}", for
     *   example, "projects/foo/tenants/bar/companies/baz".
     * @param {google.cloud.talent.v4.CompleteQueryRequest.CompletionScope} request.scope
     *   The scope of the completion. The defaults is
     *   {@link protos.google.cloud.talent.v4.CompleteQueryRequest.CompletionScope.PUBLIC|CompletionScope.PUBLIC}.
     * @param {google.cloud.talent.v4.CompleteQueryRequest.CompletionType} request.type
     *   The completion topic. The default is
     *   {@link protos.google.cloud.talent.v4.CompleteQueryRequest.CompletionType.COMBINED|CompletionType.COMBINED}.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.talent.v4.CompleteQueryResponse|CompleteQueryResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v4/completion.complete_query.js</caption>
     * region_tag:jobs_v4_generated_Completion_CompleteQuery_async
     */
    completeQuery(request?: protos.google.cloud.talent.v4.ICompleteQueryRequest, options?: CallOptions): Promise<[
        protos.google.cloud.talent.v4.ICompleteQueryResponse,
        protos.google.cloud.talent.v4.ICompleteQueryRequest | undefined,
        {} | undefined
    ]>;
    completeQuery(request: protos.google.cloud.talent.v4.ICompleteQueryRequest, options: CallOptions, callback: Callback<protos.google.cloud.talent.v4.ICompleteQueryResponse, protos.google.cloud.talent.v4.ICompleteQueryRequest | null | undefined, {} | null | undefined>): void;
    completeQuery(request: protos.google.cloud.talent.v4.ICompleteQueryRequest, callback: Callback<protos.google.cloud.talent.v4.ICompleteQueryResponse, protos.google.cloud.talent.v4.ICompleteQueryRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Return a fully-qualified company resource name string.
     *
     * @param {string} project
     * @param {string} tenant
     * @param {string} company
     * @returns {string} Resource name string.
     */
    companyPath(project: string, tenant: string, company: string): string;
    /**
     * Parse the project from Company resource.
     *
     * @param {string} companyName
     *   A fully-qualified path representing Company resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCompanyName(companyName: string): string | number;
    /**
     * Parse the tenant from Company resource.
     *
     * @param {string} companyName
     *   A fully-qualified path representing Company resource.
     * @returns {string} A string representing the tenant.
     */
    matchTenantFromCompanyName(companyName: string): string | number;
    /**
     * Parse the company from Company resource.
     *
     * @param {string} companyName
     *   A fully-qualified path representing Company resource.
     * @returns {string} A string representing the company.
     */
    matchCompanyFromCompanyName(companyName: string): string | number;
    /**
     * Return a fully-qualified job resource name string.
     *
     * @param {string} project
     * @param {string} tenant
     * @param {string} job
     * @returns {string} Resource name string.
     */
    jobPath(project: string, tenant: string, job: string): string;
    /**
     * Parse the project from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromJobName(jobName: string): string | number;
    /**
     * Parse the tenant from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the tenant.
     */
    matchTenantFromJobName(jobName: string): string | number;
    /**
     * Parse the job from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the job.
     */
    matchJobFromJobName(jobName: string): string | number;
    /**
     * Return a fully-qualified tenant resource name string.
     *
     * @param {string} project
     * @param {string} tenant
     * @returns {string} Resource name string.
     */
    tenantPath(project: string, tenant: string): string;
    /**
     * Parse the project from Tenant resource.
     *
     * @param {string} tenantName
     *   A fully-qualified path representing Tenant resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTenantName(tenantName: string): string | number;
    /**
     * Parse the tenant from Tenant resource.
     *
     * @param {string} tenantName
     *   A fully-qualified path representing Tenant resource.
     * @returns {string} A string representing the tenant.
     */
    matchTenantFromTenantName(tenantName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
